head	1.11;
access;
symbols
	joe_3_5:1.11
	joe-3_4:1.11
	help:1.11
	joe_3_1:1.10
	joe_3_0:1.10
	joe_2_9_8:1.9
	joe_2_9_8_pre1:1.8
	joe_2_9_7:1.5
	joe_2_9_7_pre3:1.5
	joe_2_9_7_pre2:1.4
	joe_2_9_6:1.3
	joe_2_9_5:1.2
	joe_2_9_4:1.1.1.1
	joe_2_9_2:1.1.1.1
	joe_2_9_1:1.1.1.1
	joe_2_9:1.1.1.1
	joe_source:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2006.05.14.17.14.04;	author jhallen;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.12.13.58.28;	author jhallen;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.10.12.11.52;	author vsamel;	state Exp;
branches;
next	1.8;

1.8
date	2001.12.10.14.01.27;	author vsamel;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.29.14.43.34;	author vsamel;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.27.13.27.32;	author vsamel;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.29.15.28.38;	author vsamel;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.29.14.39.52;	author vsamel;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.11.04.38.37;	author polesapart;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.11.04.06.35;	author polesapart;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.11.03.40.19;	author polesapart;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.11.03.40.19;	author polesapart;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Massive check-in: rearrange header files, fix -Wall warnings.
@
text
@/*
 *	Variable length array of strings
 *	Copyright
 *		(C) 1992 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 */
#include "types.h"

aELEMENT *vamk(int len)
{
	int *new = (int *) joe_malloc((1 + len) * sizeof(aELEMENT) + 2 * sizeof(int));

	new[0] = len;
	new[1] = 0;
	((aELEMENT *)(new + 2))[0] = aterm;
	return (aELEMENT *)(new + 2);
}

void varm(aELEMENT *vary)
{
	if (vary) {
		vazap(vary, 0, aLen(vary));
		joe_free((int *) vary - 2);
	}
}

int alen(aELEMENT *ary)
{
	if (ary) {
		aELEMENT *beg = ary;
		while (acmp(*ary, aterm))
			++ary;
		return ary - beg;
	} else
		return 0;
}

aELEMENT *vaensure(aELEMENT *vary, int len)
{
	if (!vary)
		vary = vamk(len);
	else if (len > aSiz(vary)) {
		len += (len >> 2);
		vary = (aELEMENT *)(2 + (int *) joe_realloc((int *) vary - 2, (len + 1) * sizeof(aELEMENT) + 2 * sizeof(int)));

		aSiz(vary) = len;
	}
	return vary;
}

aELEMENT *vazap(aELEMENT *vary, int pos, int n)
{
	if (vary) {
		int x;

		if (pos < aLen(vary)) {
			if (pos + n <= aLen(vary)) {
				for (x = pos; x != pos + n; ++x)
					adel(vary[x]);
			} else {
				for (x = pos; x != aLen(vary); ++x)
					adel(vary[x]);
			}
		}
	}
	return vary;
}

aELEMENT *vatrunc(aELEMENT *vary, int len)
{
	if (!vary || len > aLEN(vary))
		vary = vaensure(vary, len);
	if (len < aLen(vary)) {
		vary = vazap(vary, len, aLen(vary) - len);
		vary[len] = vary[aLen(vary)];
		aLen(vary) = len;
	} else if (len > aLen(vary)) {
		vary = vafill(vary, aLen(vary), ablank, len - aLen(vary));
	}
	return vary;
}

aELEMENT *vafill(aELEMENT *vary, int pos, aELEMENT el, int len)
{
	int olen = aLEN(vary), x;

	if (!vary || pos + len > aSIZ(vary))
		vary = vaensure(vary, pos + len);
	if (pos + len > olen) {
		vary[pos + len] = vary[olen];
		aLen(vary) = pos + len;
	}
	for (x = pos; x != pos + len; ++x)
		vary[x] = adup(el);
	if (pos > olen)
		vary = vafill(vary, pos, ablank, pos - olen);
	return vary;
}

#ifdef junk
aELEMENT *vancpy(aELEMENT *vary, int pos, aELEMENT *array, int len)
{
	int olen = aLEN(vary);

	if (!vary || pos + len > aSIZ(vary))
		vary = vaensure(vary, pos + len);
	if (pos + len > olen) {
		vary[pos + len] = vary[olen];
		aLen(vary) = pos + len;
	}
	if (pos > olen)
		vary = vafill(vary, olen, ablank, pos - olen);
	mfwrd(vary + pos, array, len * sizeof(aELEMENT));
	return vary;
}
#endif

aELEMENT *vandup(aELEMENT *vary, int pos, aELEMENT *array, int len)
{
	int olen = aLEN(vary), x;

	if (!vary || pos + len > aSIZ(vary))
		vary = vaensure(vary, pos + len);
	if (pos + len > olen) {
		vary[pos + len] = vary[olen];
		aLen(vary) = pos + len;
	}
	if (pos > olen)
		vary = vafill(vary, olen, ablank, pos - olen);
	for (x = 0; x != len; ++x)
		vary[x + pos] = adup(array[x]);
	return vary;
}

aELEMENT *vadup(aELEMENT *vary)
{
	return vandup(NULL, 0, vary, aLEN(vary));
}

aELEMENT *_vaset(aELEMENT *vary, int pos, aELEMENT el)
{
	if (!vary || pos + 1 > aSIZ(vary))
		vary = vaensure(vary, pos + 1);
	if (pos > aLen(vary)) {
		vary = vafill(vary, aLen(vary), ablank, pos - aLen(vary));
		vary[pos + 1] = vary[pos];
		vary[pos] = el;
		aLen(vary) = pos + 1;
	} else if (pos == aLen(vary)) {
		vary[pos + 1] = vary[pos];
		vary[pos] = el;
		aLen(vary) = pos + 1;
	} else {
		adel(vary[pos]);
		vary[pos] = el;
	}
	return vary;
}

static int _acmp(aELEMENT *a, aELEMENT *b)
{
	return acmp(*a, *b);
}

aELEMENT *vasort(aELEMENT *ary, int len)
{
	if (!ary || !len)
		return ary;
	qsort(ary, len, sizeof(aELEMENT), (int (*)(const void *, const void *))_acmp);
	return ary;
}

aELEMENT *vawords(aELEMENT *a, unsigned char *s, int len, unsigned char *sep, int seplen)
{
	int x;

	if (!a)
		a = vamk(10);
	else
		a = vatrunc(a, 0);
      loop:
	x = vsspan(s, len, sep, seplen);
	s += x;
	len -= x;
	if (len) {
		x = vsscan(s, len, sep, seplen);
		if (x != ~0) {
			a = vaadd(a, vsncpy(vsmk(x), 0, s, x));
			s += x;
			len -= x;
			if (len)
				goto loop;
		} else
			a = vaadd(a, vsncpy(vsmk(len), 0, s, len));
	}
	return a;
}
@


1.10
log
@	Added -notite global option: when set, prevents screen from
	being restored on exit.

	Added -usetabs global option: when set, uses tabs for cursor
	position update (which was the default before).  Now we don't
	use tabs by default.

        Completed change to 'unsigned char *' and elimination of
        MAXINT.  What a mess.  No warnings with gcc -pedantic.

	Fix UTF-8 bugs where cursor was not correct on scrolled screen.
@
text
@d8 1
a8 8
#include "config.h"

#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif

#include "utils.h"
#include "va.h"
@


1.9
log
@change aELEMENT #define to typedef
@
text
@d181 1
a181 1
aELEMENT *vawords(aELEMENT *a, char *s, int len, char *sep, int seplen)
@


1.8
log
@change (m|re|c)alloc() and free() into joe_(m|re|c)alloc() and joe_free()
(preparation for further error checking)
@
text
@d17 1
a17 1
aELEMENT(*vamk(int len))
d19 1
a19 1
	int *new = (int *) joe_malloc((1 + len) * sizeof(aCAST) + 2 * sizeof(int));
d23 2
a24 2
	((aELEMENT(*))(new + 2))[0] = aterm;
	return (aELEMENT(*))(new + 2);
d27 1
a27 1
void varm(char **vary)
d35 1
a35 1
int alen(char **ary)
d38 1
a38 1
		aELEMENT(*beg) = ary;
d46 1
a46 1
aELEMENT(*vaensure(aELEMENT(*vary), int len))
d52 1
a52 1
		vary = (aELEMENT(*))(2 + (int *) joe_realloc((int *) vary - 2, (len + 1) * sizeof(aCAST) + 2 * sizeof(int)));
d59 1
a59 1
aELEMENT(*vazap(aELEMENT(*vary), int pos, int n))
d77 1
a77 1
aELEMENT(*vatrunc(aELEMENT(*vary), int len))
d91 1
a91 1
aELEMENT(*vafill(aELEMENT(*vary), int pos, aELEMENT(el), int len))
d109 1
a109 1
aELEMENT(*vancpy(aELEMENT(*vary), int pos, aELEMENT(*array), int len))
d121 1
a121 1
	mfwrd(vary + pos, array, len * sizeof(aCAST));
d126 1
a126 1
aELEMENT(*vandup(aELEMENT(*vary), int pos, aELEMENT(*array), int len))
d143 1
a143 1
aELEMENT(*vadup(aELEMENT(*vary)))
d148 1
a148 1
aELEMENT(*_vaset(aELEMENT(*vary), int pos, aELEMENT(el)))
d168 1
a168 1
static int _acmp(char **a, char **b)
d173 1
a173 1
aELEMENT(*vasort(aELEMENT(*ary), int len))
d177 1
a177 1
	qsort(ary, len, sizeof(aCAST), (int (*)(const void *, const void *))_acmp);
d181 1
a181 1
aELEMENT(*vawords(aELEMENT(*a), char *s, int len, char *sep, int seplen))
@


1.7
log
@include only headers which are needed
@
text
@d14 1
d19 1
a19 1
	int *new = (int *) malloc((1 + len) * sizeof(aCAST) + 2 * sizeof(int));
d31 1
a31 1
		free((int *) vary - 2);
d52 1
a52 1
		vary = (aELEMENT(*))(2 + (int *) realloc((int *) vary - 2, (len + 1) * sizeof(aCAST) + 2 * sizeof(int)));
@


1.6
log
@put struct definitions and other goodies into types.h
@
text
@a8 1
#include "types.h"
d10 1
d12 2
a13 1
#include "blocks.h"
@


1.5
log
@version 2.9.7-pre3
@
text
@d1 9
a9 17
/* Variable length array of strings
   Copyright (C) 1992 Joseph H. Allen

This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */
@


1.4
log
@take the CVS repository to version 2.9.7-pre2
@
text
@d23 1
a23 2
aELEMENT(*vamk(len))
int len;
d33 1
a33 1
void varm(vary) aELEMENT(*vary);
d41 1
a41 1
int alen(ary) aELEMENT(*ary);
d52 1
a52 2
aELEMENT(*vaensure(vary, len)) aELEMENT(*vary);
int len;
d65 1
a65 2
aELEMENT(*vazap(vary, pos, n)) aELEMENT(*vary);
int pos, n;
d83 1
a83 2
aELEMENT(*vatrunc(vary, len)) aELEMENT(*vary);
int len;
d97 1
a97 3
aELEMENT(*vafill(vary, pos, el, len)) aELEMENT(*vary);
aELEMENT(el);
int pos, len;
d115 1
a115 3
aELEMENT(*vancpy(vary, pos, array, len)) aELEMENT(*vary);
aELEMENT(*array);
int pos, len;
d132 1
a132 3
aELEMENT(*vandup(vary, pos, array, len)) aELEMENT(*vary);
aELEMENT(*array);
int pos, len;
d149 1
a149 1
aELEMENT(*vadup(vary)) aELEMENT(*vary);
d154 1
a154 3
aELEMENT(*_vaset(vary, pos, el)) aELEMENT(*vary);
aELEMENT(el);
int pos;
d174 1
a174 3
int _acmp(a, b) aELEMENT(*a);

aELEMENT(*b);
d179 1
a179 2
aELEMENT(*vasort(ary, len)) aELEMENT(*ary);
int len;
d183 1
a183 1
	qsort(ary, len, sizeof(aCAST), _acmp);
d187 1
a187 3
aELEMENT(*vawords(a, s, len, sep, seplen)) aELEMENT(*a);
char *s, *sep;
int len, seplen;
@


1.3
log
@changed as of joe-2.9.6
@
text
@d1 2
a2 3
/*
	Variable length array of strings
	Copyright (C) 1992 Joseph H. Allen
d4 14
a17 2
	This file is part of JOE (Joe's Own Editor)
*/
d23 5
a27 2
aELEMENT (*vamk (int len)) {
	int *new = (int *) malloc ((1 + len) * sizeof (aCAST) + 2 * sizeof (int));
d30 2
a31 2
	((aELEMENT (*))(new + 2))[0] = aterm;
	return (aELEMENT (*))(new + 2);
d34 2
a35 1
void varm (aELEMENT (*vary)) {
d37 2
a38 2
		vazap (vary, 0, aLen (vary));
		free ((int *) vary - 2);
d42 2
a43 1
int alen (aELEMENT (*ary)) {
d45 2
a46 2
		aELEMENT (*beg) = ary;
		while (acmp (*ary, aterm)) {
a47 1
		}
d49 1
a49 1
	} else {
a50 1
	}
d53 6
a58 4
aELEMENT (*vaensure (aELEMENT (*vary), int len)) {
	if (!vary) {
		vary = vamk (len);
	} else if (len > aSiz (vary)) {
d60 3
a62 2
		vary = (aELEMENT (*))(2 + (int *) realloc ((int *) vary - 2, (len + 1) * sizeof (aCAST) + 2 * sizeof (int)));
		aSiz (vary) = len;
d67 3
a69 1
aELEMENT (*vazap (aELEMENT (*vary), int pos, int n)) {
d72 5
a76 5
		if (pos < aLen (vary)) {
			if (pos + n <= aLen (vary)) {
				for (x = pos; x != pos + n; ++x) {
					adel (vary[x]);
				}
d78 2
a79 3
				for (x = pos; x != aLen (vary); ++x) {
					adel (vary[x]);
				}
d86 11
a96 10
aELEMENT (*vatrunc (aELEMENT (*vary), int len)) {
	if (!vary || len > aLEN (vary)) {
		vary = vaensure (vary, len);
	}
	if (len < aLen (vary)) {
		  vary = vazap (vary, len, aLen (vary) - len);
		  vary[len] = vary[aLen (vary)];
		  aLen (vary) = len;
	} else if (len > aLen (vary)) {
		  vary = vafill (vary, aLen (vary), ablank, len - aLen (vary));
d101 8
a108 5
aELEMENT (*vafill (aELEMENT (*vary), int pos, aELEMENT (el), int len)) {
	int olen = aLEN (vary), x;
	if (!vary || pos + len > aSIZ (vary)) {
		vary = vaensure (vary, pos + len);
	}
d111 1
a111 7
		aLen (vary) = pos + len;
	}
	for (x = pos; x != pos + len; ++x) {
		vary[x] = adup (el);
	}
	if (pos > olen) {
		vary = vafill (vary, pos, ablank, pos - olen);
d113 4
d121 8
a128 5
aELEMENT (*vancpy (aELEMENT (*vary), int pos, aELEMENT (*array), int len)) {
	int olen = aLEN (vary);
	if (!vary || pos + len > aSIZ (vary)) {
		vary = vaensure (vary, pos + len);
	}
d130 2
a131 5
		  vary[pos + len] = vary[olen];
		  aLen (vary) = pos + len;
	}
	if (pos > olen) {
		vary = vafill (vary, olen, ablank, pos - olen);
d133 3
a135 1
	mfwrd (vary + pos, array, len * sizeof (aCAST));
d140 8
a147 5
aELEMENT (*vandup (aELEMENT (*vary), int pos, aELEMENT (*array), int len)) {
	int olen = aLEN (vary), x;
	if (!vary || pos + len > aSIZ (vary)) {
		vary = vaensure (vary, pos + len);
	}
d150 1
a150 7
		aLen (vary) = pos + len;
	}
	if (pos > olen) {
		vary = vafill (vary, olen, ablank, pos - olen);
	}
	for (x = 0; x != len; ++x) {
		vary[x + pos] = adup (array[x]);
d152 4
d159 3
a161 2
aELEMENT (*vadup (aELEMENT (*vary))) {
	return vandup (NULL, 0, vary, aLEN (vary));
d164 8
a171 6
aELEMENT (*_vaset (aELEMENT (*vary), int pos, aELEMENT (el))) {
	if (!vary || pos + 1 > aSIZ (vary)) {
		vary = vaensure (vary, pos + 1);
	}
	if (pos > aLen (vary)) {
		vary = vafill (vary, aLen (vary), ablank, pos - aLen (vary));
d174 2
a175 2
		aLen (vary) = pos + 1;
	} else if (pos == aLen (vary)) {
d178 1
a178 1
		aLen (vary) = pos + 1;
d180 1
a180 1
		adel (vary[pos]);
d186 5
a190 2
int _acmp (aELEMENT (*a), aELEMENT (*b)) {
	return acmp (*a, *b);
d193 4
a196 2
aELEMENT (*vasort (aELEMENT (*ary), int len)) {
	if (!ary || !len) {
d198 1
a198 2
	}
	qsort (ary, len, sizeof (aCAST), (int (*)(const void *, const void *)) _acmp);
d202 4
a205 1
aELEMENT (*vawords (aELEMENT (*a), char *s, int len, char *sep, int seplen)) {
d207 5
a211 5
	if (!a) {
		a = vamk (10);
	} else {
		a = vatrunc (a, 0);
	}
d213 1
a213 1
	x = vsspan (s, len, sep, seplen);
d217 1
a217 1
		x = vsscan (s, len, sep, seplen);
d219 1
a219 1
			a = vaadd (a, vsncpy (vsmk (x), 0, s, x));
d222 1
a222 1
			if (len) {
d224 2
a225 4
			}
		} else {
			a = vaadd (a, vsncpy (vsmk (len), 0, s, len));
		}
@


1.2
log
@changed as of joe-2.9.5
@
text
@d1 3
a3 2
/* Variable length array of strings
   Copyright (C) 1992 Joseph H. Allen
d5 2
a6 14
This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */ 
d8 1
d12 86
a97 97
aELEMENT(*vamk(len))
int len;
{
int *new=(int *)malloc((1+len)*sizeof(aCAST)+2*sizeof(int));
new[0]=len;
new[1]=0;
((aELEMENT(*))(new+2))[0]=aterm;
return (aELEMENT(*))(new+2);
}

void varm(vary)
aELEMENT(*vary);
{
if(vary)
 {
 vazap(vary,0,aLen(vary));
 free((int *)vary-2);
 }
}

int alen(ary)
aELEMENT(*ary);
{
if(ary)
 {
 aELEMENT(*beg)=ary;
 while(acmp(*ary,aterm)) ++ary;
 return ary-beg;
 }
else return 0;
}

aELEMENT(*vaensure(vary,len))
aELEMENT(*vary);
int len;
{
if(!vary) vary=vamk(len);
else if(len>aSiz(vary))
 {
 len+=(len>>2);
 vary=(aELEMENT(*))(2+(int *)realloc(
       (int *)vary-2,(len+1)*sizeof(aCAST)+2*sizeof(int) ));
 aSiz(vary)=len;
 }
return vary;
}

aELEMENT(*vazap(vary,pos,n))
aELEMENT(*vary);
int pos,n;
{
if(vary)
 {
 int x;
 if(pos<aLen(vary))
  if(pos+n<=aLen(vary))
   for(x=pos;x!=pos+n;++x) adel(vary[x]);
  else
   for(x=pos;x!=aLen(vary);++x) adel(vary[x]);
 }
return vary;
}

aELEMENT(*vatrunc(vary,len))
aELEMENT(*vary);
int len;
{
if(!vary || len>aLEN(vary)) vary=vaensure(vary,len);
if(len<aLen(vary))
 {
 vary=vazap(vary,len,aLen(vary)-len);
 vary[len]=vary[aLen(vary)];
 aLen(vary)=len;
 }
else if(len>aLen(vary))
 {
 vary=vafill(vary,aLen(vary),ablank,len-aLen(vary));
 }
return vary;
}

aELEMENT(*vafill(vary,pos,el,len))
aELEMENT(*vary);
aELEMENT(el);
int pos,len;
{
int olen=aLEN(vary), x;
if(!vary || pos+len>aSIZ(vary))
 vary=vaensure(vary,pos+len);
if(pos+len>olen)
 {
 vary[pos+len]=vary[olen];
 aLen(vary)=pos+len;
 }
for(x=pos;x!=pos+len;++x) vary[x]=adup(el);
if(pos>olen) vary=vafill(vary,pos,ablank,pos-olen);
return vary;
d101 14
a114 15
aELEMENT(*vancpy(vary,pos,array,len))
aELEMENT(*vary);
aELEMENT(*array);
int pos, len;
{
int olen=aLEN(vary);
if(!vary || pos+len>aSIZ(vary)) vary=vaensure(vary,pos+len);
if(pos+len>olen)
 {
 vary[pos+len]=vary[olen];
 aLen(vary)=pos+len;
 }
if(pos>olen) vary=vafill(vary,olen,ablank,pos-olen);
mfwrd(vary+pos,array,len*sizeof(aCAST));
return vary;
d118 79
a196 89
aELEMENT(*vandup(vary,pos,array,len))
aELEMENT(*vary);
aELEMENT(*array);
int pos, len;
{
int olen=aLEN(vary), x;
if(!vary || pos+len>aSIZ(vary)) vary=vaensure(vary,pos+len);
if(pos+len>olen)
 {
 vary[pos+len]=vary[olen];
 aLen(vary)=pos+len;
 }
if(pos>olen) vary=vafill(vary,olen,ablank,pos-olen);
for(x=0;x!=len;++x) vary[x+pos]=adup(array[x]);
return vary;
}

aELEMENT(*vadup(vary))
aELEMENT(*vary);
{
return vandup(NULL,0,vary,aLEN(vary));
}

aELEMENT(*_vaset(vary,pos,el))
aELEMENT(*vary);
aELEMENT(el);
int pos;
{
if(!vary || pos+1>aSIZ(vary)) vary=vaensure(vary,pos+1);
if(pos>aLen(vary))
 {
 vary=vafill(vary,aLen(vary),ablank,pos-aLen(vary));
 vary[pos+1]=vary[pos];
 vary[pos]=el;
 aLen(vary)=pos+1;
 }
else if(pos==aLen(vary))
 {
 vary[pos+1]=vary[pos];
 vary[pos]=el;
 aLen(vary)=pos+1;
 }
else
 {
 adel(vary[pos]);
 vary[pos]=el;
 }
return vary;
}

int _acmp(a,b)
aELEMENT(*a);
aELEMENT(*b);
{
return acmp(*a,*b);
}

aELEMENT(*vasort(ary,len))
aELEMENT(*ary);
int len;
{
if(!ary || !len) return ary;
qsort(ary,len,sizeof(aCAST),_acmp);
return ary;
}

aELEMENT(*vawords(a,s,len,sep,seplen))
aELEMENT(*a);
char *s, *sep;
int len, seplen;
{
int x;
if(!a) a=vamk(10);
else a=vatrunc(a,0);
loop:
x=vsspan(s,len,sep,seplen);
s+=x; len-=x;
if(len)
 {
 x=vsscan(s,len,sep,seplen);
 if(x!= ~0)
  {
  a=vaadd(a,vsncpy(vsmk(x),0,s,x));
  s+=x; len-=x;
  if(len) goto loop;
  }
 else a=vaadd(a,vsncpy(vsmk(len),0,s,len));
 }
return a;
@


1.1
log
@Initial revision
@
text
@a19 1
#include "zstr.h"
@


1.1.1.1
log
@First import of joe sources to cvs (as of joe-2.9)
@
text
@@
