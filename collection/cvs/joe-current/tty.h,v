head	1.12;
access;
symbols
	joe_3_5:1.12
	joe-3_4:1.12
	help:1.12
	joe_3_1:1.9
	joe_3_0:1.9
	joe_2_9_8:1.8
	joe_2_9_8_pre1:1.8
	joe_2_9_7:1.4
	joe_2_9_7_pre3:1.4
	joe_2_9_7_pre2:1.3
	joe_2_9_6:1.2
	joe_2_9_5:1.1.1.1
	joe_2_9_4:1.1.1.1
	joe_2_9_2:1.1.1.1
	joe_2_9_1:1.1.1.1
	joe_2_9:1.1.1.1
	joe_source:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2006.05.14.17.14.04;	author jhallen;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.05.20.20.17;	author jhallen;	state Exp;
branches;
next	1.10;

1.10
date	2005.03.14.03.21.37;	author jhallen;	state Exp;
branches;
next	1.9;

1.9
date	2004.04.12.13.58.27;	author jhallen;	state Exp;
branches;
next	1.8;

1.8
date	2001.12.04.13.21.47;	author vsamel;	state Exp;
branches;
next	1.7;

1.7
date	2001.12.04.13.20.52;	author vsamel;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.29.14.43.34;	author vsamel;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.27.13.27.32;	author vsamel;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.29.15.28.38;	author vsamel;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.29.14.39.52;	author vsamel;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.11.04.38.37;	author polesapart;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.11.03.40.09;	author polesapart;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.11.03.40.09;	author polesapart;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Massive check-in: rearrange header files, fix -Wall warnings.
@
text
@/*
 *	TTY interface header file
 *	Copyright
 *		(C) 1992 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 */
#ifndef _JOE_TTY_H
#define _JOE_TTY_H 1

struct mpx {
	int	ackfd;		/* Packetizer response descriptor */
	int	kpid;		/* Packetizer process id */
	int	pid;		/* Client process id */
	void	(*func) ();	/* Function to call when read occures */
	void	*object;	/* First arg to pass to function */
	void	(*die) ();	/* Function: call when client dies or closes */
	void	*dieobj;
};

/* void ttopen(void);  Open the tty (attached to stdin) for use inside of JOE
 *
 * (0) Call sigjoe()
 *     There is also 'void ttopnn(void)' which does not do this step.
 *
 * (1) fflush(stdout)
 *
 * (2) Save the current state of the tty
 *
 * (3) Disable CR/LF/NL input translations,
 *     Disable all output processing,
 *     Disable echo and line editing, and
 *     Place tty in character at a time mode.
 *     (basically, disable all processing except for XON/XOFF if it's set)
 *
 * (4) Set this new tty state without loosing any typeahead (by using the
 *     proper ioctl).
 *
 * (5) Store the baud rate in the global variable 'baud'
 *
 * (6) Divide the baud rate into the constant DIVIDEND and store the result
 *     in the global variable 'upc'.  This should come out to the number
 *     of microseconds needed to send each character.  The constant 'DIVIDEND'
 *     should be chosen so that 'upc' reflects the real throughput of the
 *     tty, not the theoretical best throughput.
 *
 * (7) Create an output buffer of a size which depends on 'upc' and the
 *     constant 'TIMES'.  'TIMES' is the number of times per second JOE
 *     should check for typeahead.  Since we only check for typehead after
 *     the output buffer is flushed, 'upc' and the size of the output buffer
 *     determine how often this occurs.  So for example if 'upc'==1000 (~9600
 *     baud) and 'TIMES'==3, the output buffer size is set to 333 characters.
 *     Each time this buffer is completely flushed, 1/3 of a second will go by.
 */
void ttopen PARAMS((void));
void ttopnn PARAMS((void));
extern unsigned long upc; /* Microseconds per character */
extern unsigned baud; /* Baud rate */

#define TIMES 3
#define DIVIDEND 10000000

/* void ttclose(void);  Restore the tty back to its original mode.
 *
 * (1) ttyflsh()
 *
 * (2) Restore the original tty mode which aopen() had saved.  Do this without
 *     loosing any typeahead.
 *
 * (3) Call signrm().  There is also 'void ttyclsn(void)' which does not do
 *     the this step.
 */
void ttclose PARAMS((void));
void ttclsn PARAMS((void));

/* int ttgetc(void);  Flush the output and get the next character from the tty
 *
 * (1) ttflsh()
 *
 * (2) Read the next input character
 *     If the input closed, call 'ttsig' with 0 as its argument.
 *
 * (3) Clear 'have'
 */
int ttgetc PARAMS((void));

/* void ttputc(char c);  Write a character to the output buffer.  If it becomes
 * full, call ttflsh()
 */
extern int obufp; /* Output buffer index */
extern int obufsiz; /* Output buffer size */
extern unsigned char *obuf; /* Output buffer */

#define ttputc(c) { obuf[obufp++] = (c); if(obufp == obufsiz) ttflsh(); }

/* void ttputs(char *s);  Write a string to the output buffer.  Any time the
 * output buffer gets full, call ttflsh()
 */
void ttputs PARAMS((unsigned char *s));

/* int ttshell(char *s);  Run a shell command or if 's' is zero, run a
 * sub-shell
 */
int ttshell PARAMS((unsigned char *cmd));

/* void ttsusp(void);  Suspend the process, or if the UNIX can't do it, call
 * ttshell(NULL)
 */
void ttsusp PARAMS((void));

/* int ttflsh(void);  Flush the output buffer and check for typeahead.
 *
 * (1) write() any characters in the output buffer to the tty and then sleep
 *     for the amount of time it should take for the written characters to get
 *     to the tty.  This is so that any buffering between the editor and the
 *     tty is defeated.  If this is not done, the screen update will not be
 *     able to defer for typeahead.
 *
 *     The best way to do the sleep (possible only on systems with the
 *     setitimer call) is to set a timer for the necessary amount, write the
 *     characters to the tty, and then sleep until the timer expires.
 *
 *     If this can't be done, it's usually ok to 'write' and then to sleep for
 *     the necessary amount of time.  However, you will notice delays in the
 *     screen update if the 'write' actually takes any significant amount of
 *     time to execute (it usually takes none since all it usually does is
 *     write to an operating system output buffer).
 *
 * (2) The way we check for typeahead is to put the TTY in nonblocking mode
 *     and attempt to read a character.  If one could be read, the global
 *     variable 'have' is set to indicate that there is typeahead pending and
 *     the character is stored in a single character buffer until ttgetc
 *     is called.  If the global variable 'leave' is set, the check for
 *     typeahead is disabled.  This is so that once the program knows that it's
 *     about to exit, it doesn't eat the first character of your typeahead if
 *     ttflsh gets called.  'leave' should also be set before shell escapes and
 *     suspends.
 */
int ttflsh PARAMS((void));

extern int have; /* Set if we have typeahead */
extern int leave; /* Set if we're exiting (so don't check for typeahead) */

#ifdef __MSDOS__
#define ifhave bioskey(1)
#else
#define ifhave have
#endif

/* void ttsig(int n);  Signal handler you provide.  This is called if the
 * editor gets a hangup signal, termination signal or if the input closes.
 * It is called with 'n' set to the number of the caught signal or 0 if the
 * input closed.
 */
void ttsig PARAMS((int sig));

/* void ttgtsz(int *x,int *y);  Get size of screen from ttsize/winsize
 * structure */
void ttgtsz PARAMS((int *x, int *y));

/* You don't have to call these: ttopen/ttclose does it for you.  These
 * may be needed to make your own shell escape sequences.
 */

/* void sigjoe(void);  Set the signal handling for joe.  I.E., ignore all
 * signals the user can generate from the keyboard (SIGINT, SIGPIPE)
 * and trap the software terminate and hangup signals (SIGTERM, SIGHUP) so
 * that 'ttsig' gets called.
 */
void sigjoe PARAMS((void));

/* void signrm(void);  Set above signals back to their default values.
 */
void signrm PARAMS((void));

/* MPX *mpxmk(int fd,int pid,
 *             void (*func)(),void *object,
 *             void (*die)(),void *dieobj,
 *            );
 *
 * Create an asynchronous input source handler for a process
 *   Child process id in 'pid'
 *   File descriptor to get input from in 'fd'
 *   Function to call with received characters in 'func'
 *   Function to call when process dies in 'die'
 *   The first arg passed to func and die is object and dieobj
 */
MPX *mpxmk PARAMS((int *ptyfd, unsigned char *cmd, unsigned char **args, void (*func) (/* ??? */), void *object, void (*die) (/* ??? */), void *dieobj, int out_only));

/* int subshell(int *ptyfd);
 * Execute a subshell.  Returns 'pid' of shell or zero if there was a
 * problem.  Returns file descriptor for the connected pty in 'ptyfd'.
 */
int subshell PARAMS(());

extern int noxon;			/* Set if ^S/^Q processing should be disabled */
extern int Baud;			/* Baud rate from joerc, cmd line or environment */

void tickoff PARAMS((void));
void tickon PARAMS((void));

extern long last_time; /* Current time in seconds */
extern int idleout; /* Clear to use /dev/tty for screen */

#endif
@


1.11
log
@fix input redirection
@
text
@d11 9
a19 2
#include "config.h"
#include "types.h"
d57 2
a58 2
extern unsigned long upc;
extern unsigned baud;
d90 3
a92 3
extern int obufp;
extern int obufsiz;
extern unsigned char *obuf;
d141 2
a142 2
extern int have;
extern int leave;
d196 2
a197 2
extern int noxon;
extern int Baud;
d202 3
@


1.10
log
@Perforce macro and support for it.
@
text
@d181 1
a181 1
MPX *mpxmk PARAMS((int *ptyfd, unsigned char *cmd, unsigned char **args, void (*func) (/* ??? */), void *object, void (*die) (/* ??? */), void *dieobj));
@


1.9
log
@	Added -notite global option: when set, prevents screen from
	being restored on exit.

	Added -usetabs global option: when set, uses tabs for cursor
	position update (which was the default before).  Now we don't
	use tabs by default.

        Completed change to 'unsigned char *' and elimination of
        MAXINT.  What a mess.  No warnings with gcc -pedantic.

	Fix UTF-8 bugs where cursor was not correct on scrolled screen.
@
text
@d94 1
a94 1
/* void ttshell(char *s);  Run a shell command or if 's' is zero, run a
d97 1
a97 1
void ttshell PARAMS((unsigned char *cmd));
@


1.8
log
@move pwd() into path.c
@
text
@d85 1
a85 1
extern char *obuf;
d92 1
a92 1
void ttputs PARAMS((char *s));
d97 1
a97 1
void ttshell PARAMS((char *cmd));
d181 1
a181 1
MPX *mpxmk PARAMS((int *ptyfd, char *cmd, char **args, void (*func) (/* ??? */), void *object, void (*die) (/* ??? */), void *dieobj));
@


1.7
log
@move jread() / jwrite() into utils.c
@
text
@a168 4
/* char *pwd();  Get current working directory into a static buffer.
 */
char *pwd PARAMS((void));

@


1.6
log
@include only headers which are needed
@
text
@a13 5
/* Versions of 'read' and 'write' which automatically retry during signals
 * (yuck, yuck, yuck... we the #$%#$@@ did they have to do this?) */
int jread PARAMS((int fd, void *buf, int siz));
int jwrite PARAMS((int fd, void *buf, int siz));

@


1.5
log
@put struct definitions and other goodies into types.h
@
text
@a13 3
#include "config.h"
#include "queue.h"

@


1.4
log
@version 2.9.7-pre3
@
text
@d1 9
a9 2
/* TTY interface header file
   Copyright (C) 1992 Joseph H. Allen
d11 2
a12 17
This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */

#ifndef _Itty
#define _Itty 1
a15 13

#define NPROC 8			/* Number of processes we keep track of */

typedef struct mpx MPX;
struct mpx {
	int ackfd;		/* Packetizer response descriptor */
	int kpid;		/* Packetizer process id */
	int pid;		/* Client process id */
	void (*func) ();	/* Function to call when read occures */
	void *object;		/* First arg to pass to function */
	void (*die) ();		/* Function: call when client dies or closes */
	void *dieobj;
};
@


1.3
log
@take the CVS repository to version 2.9.7-pre2
@
text
@d40 2
a41 2
int jread();
int jwrite();
d77 2
a78 2
void ttopen();
void ttopnn();
d95 2
a96 2
void ttclose();
void ttclsn();
d107 1
a107 1
int ttgetc();
d121 1
a121 1
void ttputs();
d126 1
a126 1
void ttshell();
d131 1
a131 1
void ttsusp();
d161 1
a161 1
int ttflsh();
d177 1
a177 1
void ttsig();
d181 1
a181 1
void ttgtsz();
d192 1
a192 1
void sigjoe();
d196 1
a196 1
void signrm();
d200 1
a200 1
char *pwd();
d214 1
a214 1
MPX *mpxmk();
d220 1
a220 1
int subshell();
d225 2
a226 2
void tickoff();
void tickon();
@


1.2
log
@changed as of joe-2.9.6
@
text
@d1 2
a2 3
/*
	TTY interface header file
	Copyright (C) 1992 Joseph H. Allen
d4 14
a17 2
	This file is part of JOE (Joe's Own Editor)
 */
d28 1
a28 2
struct mpx
{
d38 5
d77 2
a78 2
void ttopen ();
void ttopnn ();
d95 2
a96 2
void ttclose ();
void ttclsn ();
d107 1
a107 1
int ttgetc ();
d115 2
a116 1
#define ttputc(c) (obuf[obufp++]=(c), obufp==obufsiz && ttflsh())
d121 1
a121 1
void ttputs ();
d126 1
a126 1
void ttshell ();
d131 1
a131 1
void ttsusp ();
d161 1
a161 1
int ttflsh ();
d177 1
a177 1
void ttsig ();
d181 1
a181 1
void ttgtsz ();
d192 1
a192 1
void sigjoe ();
d196 1
a196 1
void signrm ();
d200 1
a200 1
char *pwd ();
d214 1
a214 1
MPX *mpxmk ();
d220 1
a220 1
int subshell ();
d225 2
a226 2
void tickoff ();
void tickon ();
@


1.1
log
@Initial revision
@
text
@d1 3
a3 2
/* TTY interface header file
   Copyright (C) 1992 Joseph H. Allen
d5 2
a6 14
This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */ 
d18 9
a26 9
 {
 int ackfd;			/* Packetizer response descriptor */
 int kpid;			/* Packetizer process id */
 int pid;			/* Client process id */
 void (*func)();		/* Function to call when read occures */
 void *object;			/* First arg to pass to function */
 void (*die)();			/* Function: call when client dies or closes */
 void *dieobj;
 };
d62 2
a63 2
void ttopen();
void ttopnn();
d80 2
a81 2
void ttclose();
void ttclsn();
d92 1
a92 1
int ttgetc();
d105 1
a105 1
void ttputs();
d110 1
a110 1
void ttshell();
d115 1
a115 1
void ttsusp();
d145 1
a145 1
int ttflsh();
d161 1
a161 1
void ttsig();
d165 1
a165 1
void ttgtsz();
d176 1
a176 1
void sigjoe();
d180 1
a180 1
void signrm();
d184 1
a184 1
char *pwd();
d198 1
a198 1
MPX *mpxmk();
d204 1
a204 1
int subshell();
d209 2
a210 2
void tickoff();
void tickon();
@


1.1.1.1
log
@First import of joe sources to cvs (as of joe-2.9)
@
text
@@
