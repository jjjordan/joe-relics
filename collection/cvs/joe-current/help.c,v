head	1.35;
access;
symbols
	joe_3_5:1.34
	joe-3_4:1.32
	help:1.32
	joe_3_1:1.20
	joe_3_0:1.16
	joe_2_9_8:1.13
	joe_2_9_8_pre1:1.11
	joe_2_9_7:1.7
	joe_2_9_7_pre3:1.7
	joe_2_9_7_pre2:1.6
	joe_2_9_6:1.5
	joe_2_9_5:1.4
	joe_2_9_4:1.3
	joe_2_9_2:1.2
	joe_2_9_1:1.1.1.1
	joe_2_9:1.1.1.1
	joe_source:1.1.1;
locks; strict;
comment	@ * @;


1.35
date	2006.07.20.20.56.17;	author jhallen;	state Exp;
branches;
next	1.34;

1.34
date	2006.07.18.19.32.08;	author jhallen;	state Exp;
branches;
next	1.33;

1.33
date	2006.06.15.18.18.28;	author jhallen;	state Exp;
branches;
next	1.32;

1.32
date	2006.05.25.18.40.29;	author jhallen;	state Exp;
branches;
next	1.31;

1.31
date	2006.05.24.22.19.00;	author jhallen;	state Exp;
branches;
next	1.30;

1.30
date	2006.05.22.04.15.41;	author jhallen;	state Exp;
branches;
next	1.29;

1.29
date	2006.05.14.17.50.51;	author jhallen;	state Exp;
branches;
next	1.28;

1.28
date	2006.05.14.17.14.04;	author jhallen;	state Exp;
branches;
next	1.27;

1.27
date	2005.04.24.04.30.49;	author jhallen;	state Exp;
branches;
next	1.26;

1.26
date	2005.03.28.15.13.10;	author jhallen;	state Exp;
branches;
next	1.25;

1.25
date	2005.03.28.06.17.07;	author jhallen;	state Exp;
branches;
next	1.24;

1.24
date	2005.03.22.03.22.37;	author jhallen;	state Exp;
branches;
next	1.23;

1.23
date	2005.03.18.15.15.38;	author jhallen;	state Exp;
branches;
next	1.22;

1.22
date	2005.03.18.04.25.23;	author jhallen;	state Exp;
branches;
next	1.21;

1.21
date	2004.11.29.20.47.35;	author jhallen;	state Exp;
branches;
next	1.20;

1.20
date	2004.05.19.03.47.31;	author jhallen;	state Exp;
branches;
next	1.19;

1.19
date	2004.05.04.16.35.11;	author jhallen;	state Exp;
branches;
next	1.18;

1.18
date	2004.05.03.22.55.50;	author jhallen;	state Exp;
branches;
next	1.17;

1.17
date	2004.05.03.12.28.47;	author jhallen;	state Exp;
branches;
next	1.16;

1.16
date	2004.04.15.14.29.07;	author jhallen;	state Exp;
branches;
next	1.15;

1.15
date	2004.04.12.13.58.27;	author jhallen;	state Exp;
branches;
next	1.14;

1.14
date	2004.04.09.18.48.48;	author jhallen;	state Exp;
branches;
next	1.13;

1.13
date	2003.02.20.07.18.19;	author vsamel;	state Exp;
branches;
next	1.12;

1.12
date	2002.01.15.09.26.04;	author vsamel;	state Exp;
branches;
next	1.11;

1.11
date	2001.12.10.14.01.27;	author vsamel;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.04.13.17.42;	author vsamel;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.29.14.43.34;	author vsamel;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.27.13.27.31;	author vsamel;	state Exp;
branches;
next	1.7;

1.7
date	2001.10.29.15.28.38;	author vsamel;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.29.14.39.51;	author vsamel;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.11.04.38.36;	author polesapart;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.11.04.06.35;	author polesapart;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.11.04.00.24;	author polesapart;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.11.03.57.30;	author polesapart;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.11.03.39.36;	author polesapart;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.11.03.39.36;	author polesapart;	state Exp;
branches;
next	;


desc
@@


1.35
log
@semiautomatic variables
@
text
@/*
 *	Help system
 *	Copyright
 *		(C) 1992 Joseph H. Allen
 *		(C) 2001 Marek 'Marx' Grac
 *
 *	This file is part of JOE (Joe's Own Editor)
 */
#include "types.h"

struct help {
	unsigned char	*text;		/* help text with attributes */
	unsigned int	lines;		/* number of lines */
	struct help	*prev;		/* previous help screen */
	struct help	*next;		/* nex help screen */
	unsigned char	*name;		/* context name for context sensitive help */
};

#define NOT_ENOUGH_MEMORY -11

int bg_help;	/* Background color for help */

struct help *help_actual = NULL;	/* actual help screen */
struct help *help_ptr = NULL;		/* build pointer */

/* 
 * Process help file
 * Returns new line number
 */

int help_init(JFILE *fd,unsigned char *bf,int line)
{
	unsigned char *buf = vsmk(128);		/* input buffer */

	struct help *tmp;

	if (bf[0] == '{') {			/* start of help screen */
		tmp = (struct help *) joe_malloc(sizeof(struct help));

		tmp->text = vsmk(128);
		obj_perm(tmp->text);
		tmp->lines = 0;
		tmp->name = vsncpy(NULL, 0, sz(bf + 1));
		obj_perm(tmp->name);

		while ((jfgets(&buf, fd)) && (buf[0] != '}')) {
			++line;
			tmp->text = vscat(tmp->text, sv(buf));
			tmp->text = vsadd(tmp->text, '\n');
			++tmp->lines;
		}
		tmp->prev = help_ptr;
		tmp->next = NULL;
		if (help_ptr) {
			help_ptr->next = tmp;
		} else {
			help_actual = tmp;
		}
		help_ptr = tmp;
		if (buf[0] == '}') {		/* set new help screen as actual one */
			++line;
		} else {
			fprintf(stderr, (char *)joe_gettext(_("\n%d: EOF before end of help text\n")),line);
		}
	}
	return line;
}

/*
 * Find context help - find help entry with the same name
 */

struct help *find_context_help(unsigned char *name)
{
	struct help *tmp = help_actual;

	while (tmp->prev != NULL)	/* find the first help entry */
		tmp = tmp->prev;

	while (tmp != NULL && zcmp(tmp->name, name) != 0)
		tmp = tmp->next;

	return tmp;
}

int help_is_utf8;

/*
 * Display help text
 */
void help_display(Screen *t)
{
	unsigned char *str;
	int y, x, c, z;
	int atr = BG_COLOR(bg_help);

	if (help_actual) {
		str = help_actual->text;
	} else {
		str = NULL;
	}

	for (y = skiptop; y != t->wind; ++y) {
		if (t->t->updtab[y]) {
			unsigned char *start = str, *eol;
			int width=0;
			int nspans=0;
			int spanwidth;
			int spancount=0;
			int spanextra;
			int len;

			eol = zchr(str, '\n');

			/* First pass: count no. springs \| and determine minimum width */
			while(*str && *str!='\n') {
				if (*str == '\\') {
					++str;
					switch(*str) {
						case 'i':
						case 'I':
						case 'u':
						case 'U':
						case 'd':
						case 'D':
						case 'b':
						case 'B':
						case 'f':
						case 'F':
							++str;
							break;
						case '|':
							++str;
							++nspans;
							break;
						case 0:
							break;
						default:
							++str;
							++width;
					}
				} else {
					len = eol - str;
					if (help_is_utf8)
						c = utf8_decode_fwrd(&str, &len);
					else {
						c = *str++;
						--len;
					}
					width += joe_wcwidth(!!locale_map->type, c);
				}
			}
			str = start;
			/* Now calculate span width */
			if (width >= t->w - 1 || nspans==0) {
				spanwidth = 0;
				spanextra = nspans;
			} else {
				spanwidth = ((t->w - 1) - width)/nspans;
				spanextra = nspans - ((t->w - 1) - width - nspans*spanwidth);
			}
			/* Second pass: display text */
			for (x = 0; x != t->w - 1; ++x) {
				if (*str == '\n' || !*str) {
					if (eraeol(t->t, x, y, BG_COLOR(bg_help))) {
						return;
					} else {
						break;
					}
				} else {
					if (*str == '\\') {
						switch (*++str) {
						case '|':
							++str;
							for (z=0;z!=spanwidth;++z)
								outatr(locale_map,t->t,t->t->scrn+x+y*t->w+z,t->t->attr+x+y*t->w+z,x+z,y,' ',atr);
							if (spancount++ >= spanextra) {
								outatr(locale_map,t->t,t->t->scrn+x+y*t->w+z,t->t->attr+x+y*t->w+z,x+z,y,' ',atr);
								++z;
							}
							x += z-1;
							continue;
						case 'i':
						case 'I':
							atr ^= INVERSE;
							++str;
							--x;
							continue;
						case 'u':
						case 'U':
							atr ^= UNDERLINE;
							++str;
							--x;
							continue;
						case 'd':
						case 'D':
							atr ^= DIM;
							++str;
							--x;
							continue;
						case 'b':
						case 'B':
							atr ^= BOLD;
							++str;
							--x;
							continue;
						case 'f':
						case 'F':
							atr ^= BLINK;
							++str;
							--x;
							continue;
						case 0:	
							--x;
							continue;
						}
					}
					len = eol - str;
					if (help_is_utf8)
						c = utf8_decode_fwrd(&str, &len);
					else {
						c = *str++;
						--len;
					}

					outatr(locale_map,
					       t->t, t->t->scrn + x + y * t->w, 
				       	       t->t->attr + x + y * t->w, x, y,
					       c, atr);
					x += (joe_wcwidth(!!locale_map->type, c) - 1);
				}
			}
			atr = BG_COLOR(bg_help);
			t->t->updtab[y] = 0;
		}

		while (*str && *str != '\n')
			++str;
		if (*str == '\n')
			++str;
	}
}

/*
 * Show help screen 
 */
int help_on(Screen *t)
{
	if (help_actual) {
		t->wind = help_actual->lines + skiptop;
		if ((t->h - t->wind) < FITHEIGHT) {
			t->wind = t->h - FITHEIGHT;
		}
		if (t->wind < 0) {
			t->wind = skiptop;
			return -1;
		}
		wfit(t);
		msetI(t->t->updtab + skiptop, 1, t->wind);
		return 0;
	} else {
		return -1;
	}
}

/*
 * Hide help screen
 */
static void help_off(Screen *t)
{
	t->wind = skiptop;
	wfit(t);
}

/*
 * Show/hide current help screen
 */
int u_help(BASE *base)
{
	W *w = base->parent;
	struct help *new_help;

	if (w->huh && (new_help = find_context_help(w->huh)) != NULL) {
		if (help_actual != new_help) {
			if (w->t->wind != skiptop)
				help_off(w->t);
			help_actual = new_help;		/* prepare context help */
		}
	}
	if (w->t->wind == skiptop) {
		return help_on(w->t);			/* help screen is hidden, so show the actual one */
	} else {
		help_off(w->t);				/* hide actual help screen */
		return 0;
	}
}

/*
 * Show next help screen (if it is possible)
 */
int u_help_next(BASE *base)
{
	W *w = base->parent;

	if (help_actual && help_actual->next) {		/* is there any next help screen? */
		if (w->t->wind != skiptop) {
			help_off(w->t);			/* if help screen was visible, then hide it */
		}
		help_actual = help_actual->next;	/* change to next help screen */
		return help_on(w->t);			/* show actual help screen */
	} else {
		return -1;
	}
}

/*
 * Show previous help screen (if it is possible)
 */
int u_help_prev(BASE *base)
{
	W *w = base->parent;

	if (help_actual && help_actual->prev) {		/* is there any previous help screen? */
		if (w->t->wind != skiptop)
			help_off(w->t);			/* if help screen was visible, then hide it */
		help_actual = help_actual->prev;	/* change to previous help screen */
		return help_on(w->t);			/* show actual help screen */
	} else {
		return -1;
	}
}
@


1.34
log
@fix compiler warnings
@
text
@d33 1
a33 1
	unsigned char buf[1024];			/* input buffer */
a35 3
	unsigned int bfl;				/* buffer length */
	unsigned int hlpsiz, hlpbsz;			/* number of used/allocated bytes for tmp->text */
	unsigned char *tempbuf;
d40 2
a41 1
		tmp->text = NULL;
d43 2
a44 3
		hlpsiz = 0;
		hlpbsz = 0;
		tmp->name = vsncpy(NULL, 0, sz(bf + 1) - 1); /* -1 kill the \n */
d46 1
a46 1
		while ((jfgets(buf, sizeof(buf), fd)) && (buf[0] != '}')) {
d48 2
a49 13
			bfl = zlen(buf);
			if (hlpsiz + bfl > hlpbsz) {
				if (tmp->text) {
					tempbuf = (unsigned char *) joe_realloc(tmp->text, hlpbsz + bfl + 1024);
					tmp->text = tempbuf;
				} else {
					tmp->text = (unsigned char *) joe_malloc(bfl + 1024);
					tmp->text[0] = 0;
				}
				hlpbsz += bfl + 1024;
			}
			zcpy(tmp->text + hlpsiz, buf);
			hlpsiz += bfl;
@


1.33
log
@Add builtins.  Fix syntax error in python.jsf.in
@
text
@d49 1
a49 1
		while ((jfgets((char *)buf, sizeof(buf), fd)) && (buf[0] != '}')) {
@


1.32
log
@missing @@..@@ in rc file
@
text
@d31 1
a31 1
int help_init(FILE *fd,unsigned char *bf,int line)
d49 1
a49 1
		while ((fgets((char *)buf, sizeof(buf), fd)) && (buf[0] != '}')) {
@


1.31
log
@-help_is_utf8 option
@
text
@d47 1
a47 1
		tmp->name = vsncpy(NULL, 0, sz(bf + 1) - 1);
@


1.30
log
@gettext()
@
text
@d100 2
d158 7
a164 3
					c = utf8_decode_fwrd(&str, &len);
					width += joe_wcwidth(!!locale_map->type,
							     c);
d233 6
a238 1
					c = utf8_decode_fwrd(&str, &len);
@


1.29
log
@Change SCREEN to Screen
@
text
@d77 1
a77 1
			fprintf(stderr, "\n%d: EOF before end of help text\n",line);
@


1.28
log
@Massive check-in: rearrange header files, fix -Wall warnings.
@
text
@d103 1
a103 1
void help_display(SCREEN *t)
d250 1
a250 1
int help_on(SCREEN *t)
d272 1
a272 1
static void help_off(SCREEN *t)
@


1.27
log
@fix gcc-4.0.0 warnings
@
text
@a8 1
#include "config.h"
d11 7
a17 9
#include <stdio.h>

#include "blocks.h"
#include "scrn.h"
#include "charmap.h"
#include "utils.h"
#include "vs.h"
#include "utf8.h"
#include "w.h"
@


1.26
log
@Background color for screen item
@
text
@a12 1
#include <string.h>
d54 1
a54 1
			bfl = strlen((char *)buf);
d65 1
a65 1
			strcpy((char *)(tmp->text + hlpsiz), (char *)buf);
d97 1
a97 1
	while (tmp != NULL && strcmp(tmp->name, name) != 0)
d128 1
a128 1
			eol = (unsigned char *)strchr((char *)str, '\n');
@


1.25
log
@Background color
@
text
@d25 1
a25 1
extern int bg_color;
d111 1
a111 1
	int atr = BG_COLOR(bg_color);
d177 1
a177 1
					if (eraeol(t->t, x, y)) {
d240 1
a240 1
			atr = BG_COLOR(bg_color);
@


1.24
log
@Fix bugs where doedit() was called and we expected the window to immediately
change.

Run -pedantic
@
text
@d25 2
d111 1
a111 1
	int atr = 0;
d240 1
a240 1
			atr = 0;
@


1.23
log
@Minor fix in help.c
@
text
@d127 1
a127 1
			eol = strchr(str, '\n');
@


1.22
log
@parse rc file only once
@
text
@a35 1
	strcpy((char *)buf,(char *)bf);
d42 1
a42 1
	if (buf[0] == '{') {			/* start of help screen */
d49 1
a49 1
		tmp->name = vsncpy(NULL, 0, sz(buf + 1) - 1);
@


1.21
log
@UTF-8 allowed in help text.
@
text
@d25 2
a26 1
struct help *help_actual = NULL;			/* actual help screen */
d30 1
a30 3
 * Returns 0 if the help file was succefully processed
 *        -1 if the help file couldn't be opened 
 *        NOT_ENOUGH_MEMORY if there is not enough memory
d33 1
a33 1
int help_init(unsigned char *filename)
a34 1
	FILE *fd;					/* help file */
d36 1
d43 2
a44 2
	if (!(fd = fopen((char *)filename, "r")))		/* open the help file */
		return -1;				/* return if we couldn't open the file */
d46 13
a58 58
	fprintf(stderr, "Processing '%s'...", filename);
	fflush(stderr);

	while (fgets((char *)buf, sizeof(buf), fd)) {
		if (buf[0] == '{') {			/* start of help screen */
			if (!(tmp = (struct help *) joe_malloc(sizeof(struct help)))) {
				return NOT_ENOUGH_MEMORY;
			}

			tmp->text = NULL;
			tmp->lines = 0;
			hlpsiz = 0;
			hlpbsz = 0;
			tmp->name = vsncpy(NULL, 0, sz(buf + 1) - 1);

			while ((fgets((char *)buf, sizeof(buf), fd)) && (buf[0] != '}')) {
				bfl = strlen((char *)buf);
				if (hlpsiz + bfl > hlpbsz) {
					if (tmp->text) {
						tempbuf = (unsigned char *) joe_realloc(tmp->text, hlpbsz + bfl + 1024);
						if (!tempbuf) {
							joe_free(tmp->text);
							joe_free(tmp);
							return NOT_ENOUGH_MEMORY;
						} else {
							tmp->text = tempbuf;
						}
					} else {
						tmp->text = (unsigned char *) joe_malloc(bfl + 1024);
						if (!tmp->text) {
							joe_free(tmp);
							return NOT_ENOUGH_MEMORY;
						} else {
							tmp->text[0] = 0;
						}
					}
					hlpbsz += bfl + 1024;
				}
				strcpy((char *)(tmp->text + hlpsiz), (char *)buf);
				hlpsiz += bfl;
				++tmp->lines;
			}
			if (buf[0] == '}') {		/* set new help screen as actual one */
				tmp->prev = help_actual;
				tmp->next = NULL;
				if (help_actual) {
					help_actual->next = tmp;
				}
				help_actual = tmp;
			} else {
				fprintf(stderr, "\nHelp file '%s' is not properly ended with } on new line.\n", filename);
				fprintf(stderr, "Do you want to accept incomplete help screen (y/n)?");
				fflush(stderr);
				fgets((char *)buf, 8, stdin);
				if (!((buf[0] == 'y') || (buf[0] == 'Y'))) {
					joe_free(tmp->text);
					joe_free(tmp);
					return 0;
d60 2
a61 6
					tmp->prev = help_actual;
					tmp->next = NULL;
					if (help_actual) {
						help_actual->next = tmp;
					}
					help_actual = tmp;
d63 1
d65 16
d83 1
a83 9
	fclose(fd);					/* close help file */

	fprintf(stderr, "done\n");
	
	while (help_actual && help_actual->prev) {	/* move to first help screen */
		help_actual = help_actual->prev;
	}

	return 0;
@


1.20
log
@Changed ESC y to yank in joerc.  Left ESC ^Y
as yankpop.

Added "spring" escape sequence for help text.
@
text
@d17 1
d161 1
a161 1
			unsigned char *start = str;
d167 4
d172 3
a174 2
			while(*str && *str!='\n')
				if (*str++ == '\\')
d198 7
a204 2
				else
					++width;
a267 2
						default:
							c = *str++;
a268 2
					} else {
						c = *str++;
d270 8
a277 2
					outatr(locale_map, t->t, t->t->scrn + x + y * t->w, 
					             t->t->attr + x + y * t->w, x, y, c, atr);
@


1.19
log
@
Everything about character set is now contained in struct charmap.

Deprecate ^T U.  Now use ^T E to select file encoding.
@
text
@d149 1
a149 1
	int y, x, c;
d160 44
d214 10
@


1.18
log
@Clean up pass: use internal ctype function everywhere.
@
text
@a24 1
extern int utf8;
d209 1
a209 1
					outatr(utf8, locale_map, t->t, t->t->scrn + x + y * t->w, 
@


1.17
log
@Elimiante --pedantic warnings.
@
text
@d19 1
d210 1
a210 1
					outatr(utf8, t->t, t->t->scrn + x + y * t->w, 
@


1.16
log
@Fix syntax definition file loader so that you don't
get seg faults when you refer to a state which doesn't
exist.

Fix outatr() to work with non-UTF-8 character sets again.
Need to start thinking about iconv().

Mess with option strings to make ^T look nicer: no longer
four columns in 80 character terminal windows.

Got rid of yellow selection bar from ^T.
@
text
@d84 1
a84 1
				strcpy(tmp->text + hlpsiz, buf);
@


1.15
log
@	Added -notite global option: when set, prevents screen from
	being restored on exit.

	Added -usetabs global option: when set, uses tabs for cursor
	position update (which was the default before).  Now we don't
	use tabs by default.

        Completed change to 'unsigned char *' and elimination of
        MAXINT.  What a mess.  No warnings with gcc -pedantic.

	Fix UTF-8 bugs where cursor was not correct on scrolled screen.
@
text
@d24 1
d209 1
a209 1
					outatr(t->t, t->t->scrn + x + y * t->w, 
@


1.14
log
@Initial check-in of UTF-8 support (^T U).  JOE is likely to have many bugs
at this point.
@
text
@d32 1
a32 1
int help_init(char *filename)
d42 1
a42 1
	if (!(fd = fopen(filename, "r")))		/* open the help file */
d48 1
a48 1
	while (fgets(buf, sizeof(buf), fd)) {
d60 2
a61 2
			while ((fgets(buf, sizeof(buf), fd)) && (buf[0] != '}')) {
				bfl = strlen(buf);
d98 1
a98 1
				fgets(buf, 8, stdin);
@


1.13
log
@change type of variables holding string to unsigned char *
@
text
@d208 2
a209 1
					outatr(t->t, t->t->scrn + x + y * t->w, x, y, c, atr);
@


1.12
log
@get back context help
@
text
@d40 1
a40 1
	char *tempbuf;
d64 1
a64 1
						tempbuf = (char *) joe_realloc(tmp->text, hlpbsz + bfl + 1024);
d73 1
a73 1
						tmp->text = (char *) joe_malloc(bfl + 1024);
d147 1
a147 1
	char *str;
d203 1
a203 1
							c = (unsigned char) *str++;
d206 1
a206 1
						c = (unsigned char) *str++;
@


1.11
log
@change (m|re|c)alloc() and free() into joe_(m|re|c)alloc() and joe_free()
(preparation for further error checking)
@
text
@d18 1
d58 1
d126 17
d259 1
d261 7
d283 1
a283 1
	if (help_actual && help_actual->next) {		/* is there any previous help screen? */
d287 1
a287 1
		help_actual = help_actual->next;	/* change to previous help screen */
@


1.10
log
@change indentation of cases in the switch() statement
@
text
@a13 4
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif

d17 1
d49 1
a49 1
			if (!(tmp = (struct help *) malloc(sizeof(struct help)))) {
d62 1
a62 1
						tempbuf = (char *) realloc(tmp->text, hlpbsz + bfl + 1024);
d64 2
a65 2
							free (tmp->text);
							free (tmp);
d71 1
a71 1
						tmp->text = (char *) malloc(bfl + 1024);
d73 1
a73 1
							free (tmp);
d98 2
a99 2
					free (tmp->text);
					free (tmp);
@


1.9
log
@include only headers which are needed
@
text
@d153 35
a187 35
							case 'i':
							case 'I':
								atr ^= INVERSE;
								++str;
								--x;
								continue;
							case 'u':
							case 'U':
								atr ^= UNDERLINE;
								++str;
								--x;
								continue;
							case 'd':
							case 'D':
								atr ^= DIM;
								++str;
								--x;
								continue;
							case 'b':
							case 'B':
								atr ^= BOLD;
								++str;
								--x;
								continue;
							case 'f':
							case 'F':
								atr ^= BLINK;
								++str;
								--x;
								continue;
							case 0:
								--x;
								continue;
							default:
								c = (unsigned char) *str++;
@


1.8
log
@put struct definitions and other goodies into types.h
@
text
@d18 1
d20 1
a20 1
#include "help.h"
@


1.7
log
@version 2.9.7-pre3
@
text
@d2 7
a8 8
	Help system
	Copyright
		(C) 1992 Joseph H. Allen
		(C) 2001 Marek 'Marx' Grac

	This file is part of JOE (Joe's Own Editor)
*/

d10 1
@


1.6
log
@take the CVS repository to version 2.9.7-pre2
@
text
@d230 1
a230 1
void help_off(SCREEN *t)
@


1.5
log
@changed as of joe-2.9.6
@
text
@d10 3
a12 1
#include "help.h"
d14 3
d18 2
a19 6
#include "config.h"
#include "tty.h"
#include "b.h"
#include "termcap.h"
#include "kbd.h"
#include "scrn.h"
a20 4
#include "vs.h"
#include "menu.h"
#include "tw.h"
#include "blocks.h"
d22 1
a22 1
/* The loaded help screen */
d24 1
a24 4
char *hlptxt = 0;		/* ???  */
int hlpsiz = 0;			/* ??? */
int hlpbsz = 0;			/* ??? */
int hlplns = 0;			/* ??? */
d26 6
a31 1
int help_index = 0;		/* index of last shown help screen */
d33 4
a36 1
char **help_names;		/* ??? */
d38 16
a53 2
struct help *help_first;	/* first screen of help list */
struct help **help_structs;	/* array of help screens */
d55 57
a111 9
/*
 *	???
 */
int get_help (char *name) {
	int x;

	for (x = 0; help_structs[x]; ++x) {
		if (!strcmp (help_structs[x]->name, name)) {
			break;
d114 1
d116 4
a119 4
	if (help_structs[x]) {
		return x;
	} else {
		return -1;
d121 2
d128 3
a130 2
void help_display (SCREEN *t) {
	char *str = hlptxt;
d134 6
d144 1
a144 1
					if (eraeol (t->t, x, y)) {
d157 1
a157 1
								goto cont;
d163 1
a163 1
								goto cont;
d169 1
a169 1
								goto cont;
d175 1
a175 1
								goto cont;
d181 1
a181 1
								goto cont;
d184 1
a184 1
								goto cont;
d186 1
a186 1
								c =	(unsigned char) *str++;
d191 1
a191 2
  					outatr (t->t, t->t->scrn + x + y * t->w, x, y, c, atr);
					cont:;
d197 2
a198 2
	
		while (*str && *str != '\n') {
d200 1
a200 2
		}
		if (*str == '\n') {
a201 1
		}
d206 1
a206 1
 * Create/Eliminate help window 
d208 15
a222 17
int help_on (SCREEN *t) {
	struct help *h = help_structs[help_index];

	hlptxt = h->hlptxt;
	hlpsiz = h->hlpsiz;
	hlpbsz = h->hlpbsz;
	hlplns = h->hlplns;

	if (!hlptxt) {
		return -1;
	}
	t->wind = hlplns + skiptop;
	if (t->h - t->wind < FITHEIGHT) {
		t->wind = t->h - FITHEIGHT;
	}
	if (t->wind < 0) {
		t->wind = skiptop;
a224 3
	wfit (t);
	msetI (t->t->updtab + skiptop, 1, t->wind);
	return 0;
d227 5
a231 1
void help_off (SCREEN *t) {
d233 1
a233 1
	wfit (t);
d237 1
a237 1
 * Toggle help on/off
d239 2
a240 2
int u_help (BASE *base) {
	int h;
d243 2
a244 8
	if (w->huh && (h = get_help (w->huh)) > -1) {
		if (w->t->wind != skiptop) {
			help_off (w->t);
		}
		help_index = h;
		return help_on (w->t);
	} else if (w->t->wind == skiptop) {
		return help_on (w->t);
d246 1
a246 1
		help_off (w->t);
d252 1
a252 1
 * Goto next/prev help screen
d254 2
a255 1
int u_help_next (BASE *base) {
d258 1
a258 1
	if (help_structs[help_index + 1]) {
d260 1
a260 1
			help_off (w->t);
d262 2
a263 2
		++help_index;
		return help_on (w->t);
d269 5
a273 1
int u_help_prev (BASE *base) {
d276 5
a280 6
	if (help_index) {
		if (w->t->wind != skiptop) {
			  help_off (w->t);
		}
		--help_index;
		return help_on (w->t);
a282 22
	}
}

/*
 * Convert list of help screens into an array 
 */
void help_to_array (void) {
	struct help *tmp;
	int nhelp = 0;		/* number of help screens */

	for (tmp = help_first; (tmp = tmp->next); ++nhelp);
	++nhelp;

	if (nhelp) {
		  help_structs = (struct help **) malloc (sizeof (struct help *) * (nhelp + 1));
		  help_structs[nhelp] = NULL;
		  tmp = help_first;

		  while (nhelp--) {
			    help_structs[nhelp] = tmp;
			    tmp = tmp->next;
		    }
@


1.4
log
@changed as of joe-2.9.5
@
text
@d12 1
a12 2
	/* strcmp () */
	
d27 4
a30 4
char *hlptxt = 0;			// ???
int hlpsiz = 0;				// ???
int hlpbsz = 0;				// ???
int hlplns = 0;				// ???
d32 1
a32 1
int help_index = 0;			// index of last shown help screen
d34 1
a34 1
char **help_names;			// ???
d36 2
a37 2
struct help *help_first;		// first screen of help list
struct help **help_structs;		// array of help screens
d39 3
a41 3
/*****************************************************************************/
/****************** ????? ****************************************************/
/*****************************************************************************/
d44 3
a46 3
	
	for (x = 0; help_structs[x]; ++x)
		if (!strcmp (help_structs[x]->name, name))
d48 2
d51 1
a51 1
	if (help_structs[x])
d53 1
a53 1
	else
d55 1
d57 4
a60 3
/*****************************************************************************/
/****************** Display help text ****************************************/
/*****************************************************************************/
d68 3
a70 3
			for (x = 0; x != t->w - 1; ++x)
				if (*str == '\n' || !*str)
					if (eraeol (t->t, x, y))
d72 1
a72 1
					else
d74 3
a76 2
				else {
					if (*str == '\\')
d107 1
a107 1
							goto cont;
d112 8
a119 5
								c = (unsigned char) *str++;
						} else
							c = (unsigned char) *str++;
				outatr (t->t, t->t->scrn + x + y * t->w, x, y, c, atr);
				cont:;
d124 7
a130 4
	while (*str && *str != '\n')
		++str;
	if (*str == '\n')
		++str;
d133 4
a136 3
/*****************************************************************************/
/****************** Create/Eliminate help window *****************************/
/*****************************************************************************/
d145 1
a145 1
	if (!hlptxt)
d147 1
d149 1
a149 1
	if (t->h - t->wind < FITHEIGHT)
d151 1
a161 2
	int z = t->wind;

d165 4
a168 3
/*****************************************************************************/
/****************** Toggle help on/off ***************************************/
/*****************************************************************************/
d174 1
a174 1
		if (w->t->wind != skiptop)
d176 1
d179 1
a179 1
	} else if (w->t->wind == skiptop)
d181 1
a181 1
	else {
d186 4
a189 3
/*****************************************************************************/
/****************** Goto next/prev help screen *******************************/
/*****************************************************************************/
d194 1
a194 1
		if (w->t->wind != skiptop)
d196 1
d199 1
a199 1
	} else
d201 1
d208 3
a210 2
		if (w->t->wind != skiptop)
			help_off (w->t);
d213 1
a213 1
	} else
d215 1
d217 4
a220 3
/*****************************************************************************/
/****************** Convert list of help screens into an array ***************/
/*****************************************************************************/
d223 1
a223 1
	int nhelp=0;			// number of help screens	
d225 1
a225 1
	for (tmp = help_first;tmp=tmp->next;++nhelp);
d229 8
a236 8
		help_structs = (struct help **) malloc (sizeof (struct help *) * (nhelp + 1));
		help_structs[nhelp] = NULL;
		tmp = help_first;

		while (nhelp--) {
			help_structs[nhelp] = tmp;
			tmp = tmp->next;
		}
@


1.3
log
@changed as of joe-2.9.4
@
text
@a22 1
#include "zstr.h"
@


1.2
log
@changed as of joe-2.9.2
@
text
@d1 5
a5 2
/* Help system
   Copyright (C) 1992 Joseph H. Allen
d7 2
a8 14
This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */ 
d10 1
d12 2
a25 1
#include "help.h"
d29 192
a220 142
char *hlptxt=0;
int hlpsiz=0;
int hlpbsz=0;
int hlplns=0;

char **help_names;
struct help **help_structs;
struct help *first_help;

int helpcursor=0;

int get_help(name)
char *name;
 {
 int x;
 for(x=0;help_structs[x];++x) if(!strcmp(help_structs[x]->name,name)) break;
 if(help_structs[x]) return x;
 else return -1;
 }

/* Display help text */

void dsphlp(t)
SCREEN *t;
 {
 char *str=hlptxt;
 int y,x,c;
 int atr=0;
 for(y=skiptop;y!=t->wind;++y)
  {
  if(t->t->updtab[y])
   {
   for(x=0;x!=t->w-1;++x)
    if(*str=='\n' || !*str)
     if(eraeol(t->t,x,y)) return;
     else break;
    else
     {
     if(*str=='\\')
      switch(*++str)
       {
       case 'i': case 'I': atr^=INVERSE; ++str; --x; goto cont;
       case 'u': case 'U': atr^=UNDERLINE; ++str; --x; goto cont;
       case 'd': case 'D': atr^=DIM; ++str; --x; goto cont;
       case 'b': case 'B': atr^=BOLD; ++str; --x; goto cont;
       case 'f': case 'F': atr^=BLINK; ++str; --x; goto cont;
       case 0: --x; goto cont;
       default: c=(unsigned char)*str++;
       }
     else c= (unsigned char)*str++;
     outatr(t->t,t->t->scrn+x+y*t->w,x,y,c,atr);
     cont:;
     }
   atr=0; t->t->updtab[y]=0;
   }
  while(*str && *str!='\n') ++str;
  if(*str=='\n') ++str;
  }
 }

/* Create the help window */

int helpon(t)
SCREEN *t;
 {
 struct help *h=help_structs[helpcursor];
 hlptxt=h->hlptxt;
 hlpsiz=h->hlpsiz;
 hlpbsz=h->hlpbsz;
 hlplns=h->hlplns;
 if(!hlptxt) return -1;
 t->wind=hlplns+skiptop;
 if(t->h-t->wind<FITHEIGHT) t->wind=t->h-FITHEIGHT;
 if(t->wind<0)
  {
  t->wind=skiptop;
  return -1;
  }
 wfit(t);
 msetI(t->t->updtab+skiptop,1,t->wind);
 return 0;
 }

/* Eliminate the help window */

void helpoff(t)
SCREEN *t;
 {
 int z=t->wind;
 t->wind=skiptop;
 wfit(t);
 }

/* Toggle help on/off */

int uhelp(base)
BASE *base;
 {
 W *w=base->parent;
 int h;
 if(w->huh && (h=get_help(w->huh))>-1)
  {
  if(w->t->wind!=skiptop) helpoff(w->t);
  helpcursor=h;
  return helpon(w->t);
  }
 else if(w->t->wind==skiptop)
  return helpon(w->t);
 else
  {
  helpoff(w->t);
  return 0;
  }
 }

/* Goto next/prev help screen */

int uhnext(base)
BASE *base;
 {
 W *w=base->parent;
 if(help_structs[helpcursor+1])
  {
  if(w->t->wind!=skiptop) helpoff(w->t);
  ++helpcursor;
  return helpon(w->t);
  }
 else return -1;
 }

int uhprev(base)
BASE *base;
 {
 W *w=base->parent;
 if(helpcursor)
  {
  if(w->t->wind!=skiptop) helpoff(w->t);
  --helpcursor;
  return helpon(w->t);
  }
 else return -1;
 }
@


1.1
log
@Initial revision
@
text
@d19 1
d51 1
a51 1
 for(x=0;help_structs[x];++x) if(!zcmp(help_structs[x]->name,name)) break;
@


1.1.1.1
log
@First import of joe sources to cvs (as of joe-2.9)
@
text
@@
