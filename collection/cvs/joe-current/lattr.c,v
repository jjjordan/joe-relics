head	1.11;
access;
symbols
	joe_3_5:1.10
	joe-3_4:1.8
	help:1.8;
locks; strict;
comment	@ * @;


1.11
date	2008.10.28.22.55.41;	author jhallen;	state Exp;
branches;
next	1.10;

1.10
date	2006.07.19.00.27.12;	author jhallen;	state Exp;
branches;
next	1.9;

1.9
date	2006.07.18.23.31.54;	author jhallen;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.14.17.14.04;	author jhallen;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.12.21.24.39;	author jhallen;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.12.19.39.30;	author jhallen;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.12.02.07.05;	author jhallen;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.04.14.37.59;	author jhallen;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.03.21.01.30;	author jhallen;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.08.03.00.57;	author jhallen;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.10.18.24.28;	author jhallen;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Add reload command
@
text
@/*
 *	Line attribute cache
 *	Copyright
 *		(C) 2006 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 *
 * This is a gap buffer which stores the syntax highlighter parser state for
 * the beginning of each line.  The computation is lazy, so not all lines in
 * the file will have their state computed (for example, if you never visit
 * the end of the file).
 *
 * When a change occurs (an insert or a delete), two things happen:
 *   First, if whole lines are inserted or deleted, the corresponding states
 *   are inserted or deleted as well, so that the cached states still match
 *   up with their lines following the insert or delete.
 *
 *   Second, a window of states which must be recomputed is generated.  This
 *   covers all the space for the change with the lowest line number to the
 *   change with the highest line number.
 *
 * Now, when the screen update algorithm requests the state for a line in or
 * after this region, the states within the region are recomputed.  The
 * cached states after the region may be valid: if a state is computed which
 * matches whatever is in the cache, then all of the remaining states are
 * trusted.  The idea is that we should not always have to recompute the
 * syntax states for the entire file for small changes.
 *
 * Anyway, prior to this cache, JOE would use lots of CPU time whenever you
 * hit PgUp, because it would have to recompute all of the states from the
 * first line of the file to the top of the screen.  Now this information is
 * saved, which uses more space, but allows JOE to use much less CPU time.
 */

#include "types.h"

/* Create a line attribute database */

struct lattr_db *mk_lattr_db(B *new_b, struct high_syntax *new_syn)
{
	struct lattr_db *db = (struct lattr_db *)joe_malloc(sizeof(struct lattr_db));
	db->next = 0;
	db->syn = new_syn;
	db->b = new_b;
	db->end = 512;
	db->hole = 1;
	db->ehole = db->end;
	db->buffer = (HIGHLIGHT_STATE *)malloc(db->end * sizeof(HIGHLIGHT_STATE));
	db->first_invalid = 1;
	db->invalid_window = -1;
	/* State of first line is idle */
	clear_state(db->buffer+0);
	return db;
}

/* Delete a database */

void rm_lattr_db(struct lattr_db *db)
{
	free(db->buffer);
	free(db);
}

/* Delete linked list of databases */

void rm_all_lattr_db(struct lattr_db *db)
{
	struct lattr_db *n;
	while (db) {
		n = db->next;
		db->next = 0;
		rm_lattr_db(db);
		db = n;
	}
}

/* Reset linked list of databases (because of file reload) */

void reset_all_lattr_db(struct lattr_db *db)
{
	struct lattr_db *n;
	for (n = db; n; n=n->next) {
		n->hole = 1;
		n->ehole = n->end;
		n->first_invalid = 1;
		n->invalid_window = -1;
		clear_state(n->buffer+0);
	}
}

/* Set gap position */

void lattr_hole(struct lattr_db *db, long pos)
{
	if (pos > db->hole)
		mmove(db->buffer + db->hole, db->buffer + db->ehole, (pos - db->hole) * sizeof(HIGHLIGHT_STATE));
	else if (pos < db->hole)
		mmove(db->buffer + db->ehole - (db->hole - pos), db->buffer + pos, (db->hole - pos) * sizeof(HIGHLIGHT_STATE));
	db->ehole = pos + db->ehole - db->hole;
	db->hole = pos;
}

/* Make sure there is enough space for an insert */

void lattr_check(struct lattr_db *db, long amnt)
{
	if (amnt > db->ehole - db->hole) {
		/* Not enough space */
		/* Amount of additional space needed */
		amnt = amnt - (db->ehole - db->hole) + 16;
		db->buffer = (HIGHLIGHT_STATE *)realloc(db->buffer, (db->end + amnt) * sizeof(HIGHLIGHT_STATE));
		mmove(db->buffer + db->ehole + amnt, db->buffer + db->ehole, (db->end - db->ehole) * sizeof(HIGHLIGHT_STATE));
		db->ehole += amnt;
		db->end += amnt;
	}
}

/* Find a database for a particular syntax in a buffer.  If none exists, create one. */

struct lattr_db *find_lattr_db(B *b, struct high_syntax *y)
{
	struct lattr_db *db;
	for (db = b->db; db && db->syn != y; db = db->next);
	if (!db) {
		db = mk_lattr_db(b, y);
		db->next = b->db;
		b->db = db;
	}
	return db;
}

/* Drop a database, but only if no BWs refer to it */

void drop_lattr_db(B *b, struct lattr_db *db)
{
#if junk
	if (!lattr_db_in_use(db)) {
		if (b->db == db) {
			b->db = db->next;
		} else {
			struct lattr_db *x;
			for (x = b->db; x->next != db; x = x->next);
			x->next = db->next;
		}
		rm_lattr_db(db);
	}
#endif
}

/* An insert occurred */

void lattr_ins(struct lattr_db *db,long line,long size)
{
	++line; /* First invalid line is the one following the insert */

	/* Are we before the end? */
	if (line < lattr_size(db)) {
		/* Insert */
		if (size) {
			lattr_hole(db, line);
			lattr_check(db, size);
			db->ehole -= size;
		}
		if (db->invalid_window == -1) {
			/* Create invalid window */
			db->first_invalid = line;
			db->invalid_window = size;
		} else if (line >= db->first_invalid + db->invalid_window) {
			/* Insert after end of existing window */
			db->invalid_window = line + size - db->first_invalid;
		} else if (line >= db->first_invalid) {
			/* Insert into existing window */
			db->invalid_window += size;
		} else {
			/* Insert before existing window */
			db->invalid_window += db->first_invalid - line + size;
			db->first_invalid = line;
		}
	}
}

/* A deletion occurred */

void lattr_del(struct lattr_db *db, long line, long size)
{
	++line; /* First invalid line is the one following the delete */

	/* Are we before the end? */
	if (line < lattr_size(db)) {
		/* Delete */
		if (size) {
			lattr_hole(db, line);
			if (size > db->end - db->ehole)
				size = db->end - db->ehole;
			db->ehole += size;
		}

		if (db->invalid_window == -1) {
			/* Create invalid window */
			db->first_invalid = line;
			db->invalid_window = 0;
		} else if (line < db->first_invalid) {
			/* Delete point is before existing window */
			if (line + size <= db->first_invalid) {
				/* End point is before start of window */
				db->invalid_window = db->first_invalid + db->invalid_window - line - size;
				db->first_invalid = line;
			} else if (line + size <= db->first_invalid + db->invalid_window) {
				/* End point is in window */
				db->invalid_window -= line + size - db->first_invalid;
				db->first_invalid = line;
			} else {
				/* End point is beyond window */
				db->invalid_window = 0;
				db->first_invalid = line;
			}
		} else if (line < db->first_invalid + db->invalid_window) {
			/* Delete point is in window */
			if (line + size < db->first_invalid + db->invalid_window) {
				/* Deletion is entirely in window */
				db->invalid_window -= size;
			} else {
				/* End of window got deleted */
				db->invalid_window = line - db->first_invalid;
			}
		} else {
			/* Delete point is after window */
			db->invalid_window = line - db->first_invalid;
		}
	}
}

HIGHLIGHT_STATE *lattr_gt(struct lattr_db *db, long line)
{
	HIGHLIGHT_STATE *st;
	if (line >= db->hole)
		st = db->buffer + line - db->hole + db->ehole;
	else
		st = db->buffer + line;
	return st;
}

void lattr_st(struct lattr_db *db, long line, HIGHLIGHT_STATE *state)
{
	HIGHLIGHT_STATE *st = lattr_gt(db, line);
	*st = *state;
}

/* Get attribute for a specific line */

HIGHLIGHT_STATE lattr_get(struct lattr_db *db, struct high_syntax *y, P *p, long line)
{
	/* Past end of file? */
	if (line > p->b->eof->line) {
		HIGHLIGHT_STATE x;
		clear_state(&x);
		return x;
	}

	/* Check if we need to expand */
	if (line >= lattr_size(db)) {
		/* Expand by this amount */
		long amnt = line - lattr_size(db) + 1;
		/* Set position to end */
		lattr_hole(db, lattr_size(db));
		lattr_check(db, amnt);
		db->ehole -= amnt;
		/* Set invalid window to cover new space */
		if (db->invalid_window == -1) {
			db->first_invalid = lattr_size(db) - amnt;
			db->invalid_window = amnt;
		} else {
			db->invalid_window = lattr_size(db) - db->first_invalid;
		}
	}

	/* Check if we need to shrink */
	/* if (p->b->eof->line + 1 < lattr_size(db)) {
		lattr_hole(db, p->b->eof->line + 1);
		db->ehole = db->end;
		if (db->first_invalid > lattr_size(db)) {
			db->first_invalid = lattr_size(db);
			db->invalid_window = -1;
		}
		if (db->invalid_window != -1 && db->first_invalid + db->invalid_window > lattr_size(db)) {
			db->invalid_window = lattr_size(db) - db->first_invalid;
		}
	} */

	/* Check if we are pointing to a valid record */
	if (line >= db->first_invalid) {
		long ln;
		P *tmp = 0;
		HIGHLIGHT_STATE state;
		tmp = pdup(p, USTR "lattr_get");
		ln = db->first_invalid; /* First line with known good state */
		state = lattr_lvalue(db, ln - 1); /* Known good state */
		/* Compute up to requested line */
		pline(tmp, ln - 1);

		/* Recompute everything in invalid window */
		while (ln < db->first_invalid + db->invalid_window) {
			state = parse(y, tmp, state);
			lattr_st(db, ln, &state);
			++ln;
		}

		/* Update invalid window: hopefully we did the whole window */
		db->invalid_window -= ln - db->first_invalid;
		db->first_invalid = ln;

		/* Recompute until match found.  If match is found, we can assume rest is valid */
		while (ln < lattr_size(db)) {
			HIGHLIGHT_STATE *prev;
			state = parse(y, tmp, state);
			prev = lattr_gt(db, ln);
			if (!eq_state(prev, &state))
				lattr_st(db, ln, &state);
			else {
				db->first_invalid = lattr_size(db);
				db->invalid_window = -1;
				++ln;
				break;
			}
			++ln;
		}

		/* Update invalid pointer */
		if (ln > db->first_invalid) {
			db->first_invalid = ln;
			db->invalid_window = 0;
		}
		if (ln == lattr_size(db)) {
			db->first_invalid = ln;
			db->invalid_window = -1;
		}
		prm(tmp);
	}

	/* Check it */

#ifdef junk
	{
		HIGHLIGHT_STATE st;
		P *tmp =pdup(p, USTR "lattr_get");
		pline(tmp, 0);
		clear_state(&st);

		for (z = 0; z != db->first_invalid; ++z) {
			HIGHLIGHT_STATE *prev;
			prev = lattr_gt(db, z);
			if (prev->state != st.state) {
				printf("** Mismatch!! %d %d %d %d **\n",z,tmp->line,prev->state,st.state);
				abort();
			}
			st = parse(y, tmp, st);
		}
		prm(tmp);
	}
#endif

	/* Return with attribute */
	return lattr_lvalue(db, line);
}
@


1.10
log
@UC -> USTR
@
text
@d77 14
@


1.9
log
@change US to UC
@
text
@d281 1
a281 1
		tmp = pdup(p, UC "lattr_get");
d331 1
a331 1
		P *tmp =pdup(p, UC "lattr_get");
@


1.8
log
@Massive check-in: rearrange header files, fix -Wall warnings.
@
text
@d281 1
a281 1
		tmp = pdup(p, US "lattr_get");
d331 1
a331 1
		P *tmp =pdup(p, US "lattr_get");
@


1.7
log
@mmove bug in lattr.c
@
text
@a35 2
#include "syntax.h"
#include "b.h"
a41 1
	int x;
a93 1
		int x;
a238 2
	long z;

a247 1
		long x;
@


1.6
log
@fix lattr bugs
@
text
@a51 2
	for (x = 0; x != db->end; ++x)
		db->buffer[x].state = 50000;
d69 1
a69 1
void rm_all_lattr_db(struct lattr_db *db)\
d97 1
d102 1
a102 1
		mmove(db->buffer + db->ehole + amnt, db->buffer + db->ehole, db->end - db->ehole);
d243 1
d333 22
@


1.5
log
@new cvs server
@
text
@d41 2
a42 1
struct lattr_db *mk_lattr_db(B *new_b, struct high_syntax *new_syn) {
d44 1
d51 3
a53 1
	db->buffer = (HIGHLIGHT_STATE *)calloc(db->end, sizeof(HIGHLIGHT_STATE));
d63 2
a64 1
void rm_lattr_db(struct lattr_db *db) {
d71 2
a72 1
void rm_all_lattr_db(struct lattr_db *db) {
d84 8
a91 12
void lattr_hole(struct lattr_db *db, long pos) {
	if (pos > db->hole) {
		long amnt = pos - db->hole;
		mmove(db->buffer + db->hole, db->buffer + db->ehole, amnt * sizeof(HIGHLIGHT_STATE));
		db->hole = pos;
		db->ehole += amnt;
	} else if (pos < db->hole) {
		long amnt = db->hole - pos;
		mmove(db->buffer + db->ehole - amnt, db->buffer + pos, amnt * sizeof(HIGHLIGHT_STATE));
		db->hole = pos;
		db->ehole -= amnt;
	}
d96 2
a97 1
void lattr_check(struct lattr_db *db, long amnt) {
d103 1
a103 1
		mmove(db->buffer + db->ehole, db->buffer + db->ehole + amnt, db->end - db->ehole);
d111 2
a112 1
struct lattr_db *find_lattr_db(B *b, struct high_syntax *y) {
d125 2
a126 1
void drop_lattr_db(B *b, struct lattr_db *db) {
d143 2
a144 1
void lattr_ins(struct lattr_db *db,long line,long size) {
d155 2
a156 6
		/* Update beginning of invalid window */
		if (line < db->first_invalid) {
			if (db->invalid_window != -1)
				db->invalid_window += db->first_invalid - line;
			else
				db->invalid_window = 0;
d158 3
a160 4
		}
		/* invalid_window can not be set to -1 at this point */
		/* Update end of invalid window */
		if (line + size > db->first_invalid + db->invalid_window) {
d162 7
d175 2
a176 1
void lattr_del(struct lattr_db *db, long line, long size) {
d187 26
a212 4
			/* Fix window position */
			if (db->invalid_window == -1) {
				/* There is no window */
				db->first_invalid -= size;
d214 2
a215 22
				/* There is a window: check all of the boundary cases */
				if (line < db->first_invalid) {
					if (line + size < db->first_invalid) {
						db->first_invalid -= size;
					} else if (line + size < db->first_invalid + db->invalid_window) {
						db->invalid_window -= line + size - db->first_invalid;
						db->first_invalid = line;
					} else {
						db->first_invalid = line;
						db->invalid_window = 0;
					}
				} else if (line < db->first_invalid + db->invalid_window) {
					if (line + size < db->first_invalid + db->invalid_window)
						db->invalid_window -= size;
					else
						db->invalid_window = line - db->first_invalid;
				}
				/* If we deleted the window */
				if (db->first_invalid + db->invalid_window == lattr_size(db)) {
					db->first_invalid = lattr_size(db);
					db->invalid_window = -1;
				}
d217 3
a220 11
		/* Update beginning of invalid window */
		if (line < db->first_invalid) {
			if (db->invalid_window != -1)
				db->invalid_window += db->first_invalid - line;
			else
				db->invalid_window = 0;
			db->first_invalid = line;
		}
		/* Update end of invalid window */
		if (line > db->first_invalid && line > db->first_invalid + db->invalid_window)
			db->invalid_window = line - db->first_invalid;
d242 2
a243 1
HIGHLIGHT_STATE lattr_get(struct lattr_db *db, struct high_syntax *y, P *p, long line) {
d295 1
a295 1
		while (ln < db->first_invalid + db->invalid_window /* && ln < line */) {
d306 1
a306 1
		while (ln < lattr_size(db) /* && ln < line */) {
@


1.4
log
@Minor fix: don't try to shrink in lattr_get.  lattr_del already does it.
@
text
@d221 16
d293 1
a293 1
			lattr_lvalue(db, ln) = state;
d305 1
a305 1
			prev = &lattr_lvalue(db, ln);
d307 1
a307 1
				lattr_lvalue(db, ln) = state;
@


1.3
log
@New line attribute cache.
@
text
@d251 1
a251 1
	if (p->b->eof->line + 1 < lattr_size(db)) {
d261 1
a261 1
	}
@


1.2
log
@add joe_debug
@
text
@d1 33
a33 1
/* Line attribute database */
d37 1
d39 1
d41 275
a315 152
struct lattr_node *lattr_find(struct lattr_db *db, lattr_key_t key)
  {
  int y;
  struct lattr_node *t = db->top;
  for (y = t->nptrs; --y >= 0;)
    {
    while (t->ptrs[y]->key < key)
      t = t->ptrs[y];
    db->update[y] = t;
    }
  return t->ptrs[0];
  }

struct lattr_node *lattr_ins(struct lattr_db *db, lattr_key_t key, lattr_value_t value)
  {
  struct lattr_node *t;
  int level, x;

  /* Choose level for this node */
  for (level = 1; random() < 0x29000000; ++level);
  if (level > (lattr_SKIP_DEPTH-1))
    level = lattr_SKIP_DEPTH-1;

  /* Allocate new node */
  t = (struct lattr_node *)joe_malloc(sizeof(struct lattr_node) + level * sizeof(struct lattr_node *));

  /* Increase height of tree if necessary */
  while (level > db->top->nptrs)
    db->update[db->top->nptrs++] = db->top;

  /* Insert node in list */
  t->nptrs = level;

  t->key = key;

  t->value = value;

  for (x = 0; x != level; ++x)
    {
    t->ptrs[x] = db->update[x]->ptrs[x];
    db->update[x]->ptrs[x] = t;
    }

  return t;
  }

/* Delete a node */

void lattr_del(struct lattr_db *db, struct lattr_node *t)
  {
  int x;

  /* Remove from list */
  for (x = 0; x != db->top->nptrs && db->update[x]->ptrs[x] == t; ++x)
    db->update[x]->ptrs[x] = t->ptrs[x];

  /* Reduce height of tree if we can */
  while (db->top->nptrs && db->top->ptrs[db->top->nptrs-1] == &db->nil)
    --db->top->nptrs;

  /* Free node */
  joe_free(t);
  }

/* Set key to value */

void lattr_set(struct lattr_db *db, lattr_key_t key, lattr_value_t value)
  {
  struct lattr_node *t;
  t = lattr_find(db, key);
  if (t->key == key)
    {
    t->value = value;
    }
  else
    {
    lattr_ins(db, key, value);
    }
  }

/* Find node with nearest key */

int lattr_get(struct lattr_db *db, lattr_key_t *key, lattr_value_t *value)
  {
  struct lattr_node *t;
  t = lattr_find(db, *key);
  if (t->key == *key)
    {
    /* Exact match */
    *value = t->value;
    return 0;
    }
  else
    {
    /* Next lowest value */
    /* Point to previous node */
    t = db->update[0];
    *key = t->key;
    *value = t->value;
    return -1;
    }
  }

/* Delete all nodes after one with matching key */

void lattr_cut(struct lattr_db *db, lattr_key_t key)
  {
  struct lattr_node *u, *t=lattr_find(db, key);
  while (t != &db->nil)
    {
    u = t->ptrs[0];
    lattr_del(db, t);
    t=u;
    }
  }

struct lattr_db *mk_lattr_db()
  {
  int x;
  struct lattr_db *db;

  db = (struct lattr_db *)joe_malloc(sizeof(struct lattr_db));

  db->nil.key = 0x7FFFFFFF;
  db->nil.nptrs = 0;
  db->nil.ptrs[0] = &db->nil;

  db->top = (struct lattr_node *)joe_malloc(sizeof(struct lattr_node) + lattr_SKIP_DEPTH * sizeof(struct lattr_node *));
  db->top->key = 0;
  db->top->nptrs = 0;
  clear_state(&db->top->value);

  for(x = 0; x != lattr_SKIP_DEPTH; ++x)
    db->top->ptrs[x] = &db->nil;

  db->count = 0;

  lattr_ins(db, 0, db->top->value);

  return db;
  }

void rm_lattr_db(struct lattr_db *db)
  {
  struct lattr_node *t, *u;
  for (t=db->top; t != &db->nil; t = u)
    {
    u=t->ptrs[0];
    joe_free(t);
    }
  joe_free(db);
  }
@


1.1
log
@Improve highlighting performance.
@
text
@d71 1
a71 1
// Set key to value
d87 1
a87 1
// Find node with nearest key
@

