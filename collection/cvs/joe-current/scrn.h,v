head	1.26;
access;
symbols
	joe_3_5:1.22
	joe-3_4:1.22
	help:1.22
	joe_3_1:1.16
	joe_3_0:1.14
	joe_2_9_8:1.8
	joe_2_9_8_pre1:1.7
	joe_2_9_7:1.4
	joe_2_9_7_pre3:1.4
	joe_2_9_7_pre2:1.3
	joe_2_9_6:1.2
	joe_2_9_5:1.1.1.1
	joe_2_9_4:1.1.1.1
	joe_2_9_2:1.1.1.1
	joe_2_9_1:1.1.1.1
	joe_2_9:1.1.1.1
	joe_source:1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2008.11.01.02.07.46;	author jhallen;	state Exp;
branches;
next	1.25;

1.25
date	2008.10.24.16.24.40;	author jhallen;	state Exp;
branches;
next	1.24;

1.24
date	2007.06.04.01.13.33;	author jhallen;	state Exp;
branches;
next	1.23;

1.23
date	2007.01.23.05.27.50;	author jhallen;	state Exp;
branches;
next	1.22;

1.22
date	2006.05.20.04.27.10;	author jhallen;	state Exp;
branches;
next	1.21;

1.21
date	2006.05.14.17.14.04;	author jhallen;	state Exp;
branches;
next	1.20;

1.20
date	2005.03.28.15.13.16;	author jhallen;	state Exp;
branches;
next	1.19;

1.19
date	2005.03.28.06.17.08;	author jhallen;	state Exp;
branches;
next	1.18;

1.18
date	2005.03.28.05.05.36;	author jhallen;	state Exp;
branches;
next	1.17;

1.17
date	2005.03.21.04.47.00;	author jhallen;	state Exp;
branches;
next	1.16;

1.16
date	2004.05.04.16.35.12;	author jhallen;	state Exp;
branches;
next	1.15;

1.15
date	2004.05.03.22.55.52;	author jhallen;	state Exp;
branches;
next	1.14;

1.14
date	2004.04.18.02.26.36;	author jhallen;	state Exp;
branches;
next	1.13;

1.13
date	2004.04.15.14.29.08;	author jhallen;	state Exp;
branches;
next	1.12;

1.12
date	2004.04.12.13.58.27;	author jhallen;	state Exp;
branches;
next	1.11;

1.11
date	2004.04.09.18.48.48;	author jhallen;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.07.00.19.20;	author jhallen;	state Exp;
branches;
next	1.9;

1.9
date	2004.03.24.19.47.50;	author jhallen;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.10.12.09.39;	author vsamel;	state Exp;
branches;
next	1.7;

1.7
date	2001.12.10.13.57.21;	author vsamel;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.29.14.43.34;	author vsamel;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.27.13.27.32;	author vsamel;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.29.15.28.38;	author vsamel;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.29.14.39.52;	author vsamel;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.11.04.38.37;	author polesapart;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.11.03.40.05;	author polesapart;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.11.03.40.05;	author polesapart;	state Exp;
branches;
next	;


desc
@@


1.26
log
@quoting fixes
@
text
@/*
 *	Device independant tty interface for JOE
 *	Copyright
 *		(C) 1992 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 */
#ifndef _JOE_SCRN_H
#define _JOE_SCRN_H 1

struct hentry {
	int	next;
	int	loc;
};

/* Each terminal has one of these: terminal capability database */

#ifdef __MSDOS__

struct scrn {
	int	li;		/* Height of screen */
	int	co;		/* Width of screen */
	short	*scrn;		/* Buffer */
	int	scroll;
	int	insdel;
	int	*updtab;	/* Lines which need to be updated */
	HIGHLIGHT_STATE *syntax;
	int	*compose;
	int	*sary;
};

#else

struct scrn {
	CAP	*cap;		/* Termcap/Terminfo data */

	int	li;		/* Screen height */
	int	co;		/* Screen width */

	unsigned char	*ti;		/* Initialization string */
	unsigned char	*cl;		/* Home and clear screen... really an
				   init. string */
	unsigned char	*cd;		/* Clear to end of screen */
	unsigned char	*te;		/* Restoration string */

	int	haz;		/* Terminal can't print ~s */
	int	os;		/* Terminal overstrikes */
	int	eo;		/* Can use blank to erase even if os */
	int	ul;		/* _ overstrikes */
	int	am;		/* Terminal has autowrap, but not magicwrap */
	int	xn;		/* Terminal has magicwrap */

	unsigned char	*so;		/* Enter standout (inverse) mode */
	unsigned char	*se;		/* Exit standout mode */

	unsigned char	*us;		/* Enter underline mode */
	unsigned char	*ue;		/* Exit underline mode */
	unsigned char	*uc;		/* Single time underline character */

	int	ms;		/* Ok to move when in standout/underline mode */

	unsigned char	*mb;		/* Enter blinking mode */
	unsigned char	*md;		/* Enter bold mode */
	unsigned char	*mh;		/* Enter dim mode */
	unsigned char	*mr;		/* Enter inverse mode */
	unsigned char	*me;		/* Exit above modes */

	unsigned char	*Sb;		/* Set background color */
	unsigned char	*Sf;		/* Set foregrond color */
	int	Co;			/* No. of colors */
	int	ut;		/* Screen erases with background color */

	int	da, db;		/* Extra lines exist above, below */
	unsigned char	*al, *dl, *AL, *DL;	/* Insert/delete lines */
	unsigned char	*cs;		/* Set scrolling region */
	int	rr;		/* Set for scrolling region relative addressing */
	unsigned char	*sf, *SF, *sr, *SR;	/* Scroll */

	unsigned char	*dm, *dc, *DC, *ed;	/* Delete characters */
	unsigned char	*im, *ic, *IC, *ip, *ei;	/* Insert characters */
	int	mi;		/* Set if ok to move while in insert mode */

	unsigned char	*bs;		/* Move cursor left 1 */
	int	cbs;
	unsigned char	*lf;		/* Move cursor down 1 */
	int	clf;
	unsigned char	*up;		/* Move cursor up 1 */
	int	cup;
	unsigned char	*nd;		/* Move cursor right 1 */

	unsigned char	*ta;		/* Move cursor to next tab stop */
	int	cta;
	unsigned char	*bt;		/* Move cursor to previous tab stop */
	int	cbt;
	int	tw;		/* Tab width */

	unsigned char	*ho;		/* Home cursor to upper left */
	int	cho;
	unsigned char	*ll;		/* Home cursor to lower left */
	int	cll;
	unsigned char	*cr;		/* Move cursor to left edge */
	int	ccr;
	unsigned char	*RI;		/* Move cursor right n */
	int	cRI;
	unsigned char	*LE;		/* Move cursor left n */
	int	cLE;
	unsigned char	*UP;		/* Move cursor up n */
	int	cUP;
	unsigned char	*DO;		/* Move cursor down n */
	int	cDO;
	unsigned char	*ch;		/* Set cursor column */
	int	cch;
	unsigned char	*cv;		/* Set cursor row */
	int	ccv;
	unsigned char	*cV;		/* Goto beginning of specified line */
	int	ccV;
	unsigned char	*cm;		/* Set cursor row and column */
	int	ccm;

	unsigned char	*ce;		/* Clear to end of line */
	int	cce;

	int assume_256;		/* Assume terminal has 256 color mode, but use
	                           regular mode for standard colors just in case */

	/* Basic abilities */
	int	scroll;		/* Set to use scrolling */
	int	insdel;		/* Set to use insert/delete within line */

	/* Current state of terminal */
	int	*scrn;		/* Characters on screen */
	int	*attr;		/* Attributes on screen */
	int	x, y;		/* Current cursor position (-1 for unknown) */
	int	top, bot;	/* Current scrolling region */
	int	attrib;		/* Current character attributes */
	int	ins;		/* Set if we're in insert mode */

	int	*updtab;	/* Dirty lines table */
	int	avattr;		/* Bits set for available attributes */
	int	*sary;		/* Scroll buffer array */

	int	*compose;	/* Line compose buffer */
	int	*ofst;		/* stuff for magic */
	struct hentry	*htab;
	struct hentry	*ary;
};

#endif

extern int skiptop;

/* SCRN *nopen(void);
 *
 * Open the screen (sets TTY mode so that screen may be used immediatly after
 * the 'nopen').
 */
SCRN *nopen PARAMS((CAP *cap));

/* void nresize(SCRN *t,int w,int h);
 *
 * Change size of screen.  For example, call this when you find out that
 * the Xterm changed size.
 */
void nresize PARAMS((SCRN *t, int w, int h));

/* void nredraw(SCRN *t);
 *
 * Invalidate all state variables for the terminal.  This way, everything gets
 * redrawn.
 */
void nredraw PARAMS((SCRN *t));

void npartial PARAMS((SCRN *t));
void nescape PARAMS((SCRN *t));
void nreturn PARAMS((SCRN *t));

/* void nclose(SCRN *t);
 *
 * Close the screen and restore TTY to initial state.
 *
 * if 'flg' is set, tclose doesn't mess with the signals.
 */
void nclose PARAMS((SCRN *t));

/* int cpos(SCRN *t,int x,int y);
 *
 * Set cursor position
 */
int cpos PARAMS((register SCRN *t, register int x, register int y));

/* int attr(SCRN *t,int a);
 *
 * Set attributes
 */
int set_attr PARAMS((SCRN *t, int c));

/* Encode character as utf8 */
void utf8_putc PARAMS((int c));

/* void outatr(SCRN *t,int *scrn,int *attr,int x,int y,int c,int a);
 *
 * Output a character at the given screen cooridinate.  The cursor position
 * after this function is executed is indeterminate.
 */

/* Character attribute bits */

#ifdef __MSDOS__

#define INVERSE 1
#define UNDERLINE 2
#define BOLD 4
#define BLINK 8
#define DIM 16
extern unsigned atab[];

#define outatr(t,scrn,attr,x,y,c,a) do { \
	(t); \
	(x); \
	(y); \
	*(scrn) = ((unsigned)(c) | atab[a]); \
} while(0)

#else

#define INVERSE		 256
#define UNDERLINE	 512
#define BOLD		1024
#define BLINK		2048
#define DIM		4096
#define AT_MASK		(INVERSE+UNDERLINE+BOLD+BLINK+DIM)

#define BG_SHIFT	13
#define BG_VALUE	(255<<BG_SHIFT)
#define BG_NOT_DEFAULT	(256<<BG_SHIFT)
#define BG_MASK		(511<<BG_SHIFT)

#define BG_DEFAULT	(0<<BG_SHIFT)

/* #define BG_COLOR(color)	(BG_NOT_DEFAULT^(color)<<BG_SHIFT) */
#define BG_COLOR(color)	(color)

#define BG_BLACK	(BG_NOT_DEFAULT|(0<<BG_SHIFT))
#define BG_RED		(BG_NOT_DEFAULT|(1<<BG_SHIFT))
#define BG_GREEN	(BG_NOT_DEFAULT|(2<<BG_SHIFT))
#define BG_YELLOW	(BG_NOT_DEFAULT|(3<<BG_SHIFT))
#define BG_BLUE		(BG_NOT_DEFAULT|(4<<BG_SHIFT))
#define BG_MAGENTA	(BG_NOT_DEFAULT|(5<<BG_SHIFT))
#define BG_CYAN		(BG_NOT_DEFAULT|(6<<BG_SHIFT))
#define BG_WHITE	(BG_NOT_DEFAULT|(7<<BG_SHIFT))
#define BG_BBLACK	(BG_NOT_DEFAULT|(8<<BG_SHIFT))
#define BG_BRED		(BG_NOT_DEFAULT|(9<<BG_SHIFT))
#define BG_BGREEN	(BG_NOT_DEFAULT|(10<<BG_SHIFT))
#define BG_BYELLOW	(BG_NOT_DEFAULT|(11<<BG_SHIFT))
#define BG_BBLUE	(BG_NOT_DEFAULT|(12<<BG_SHIFT))
#define BG_BMAGENTA	(BG_NOT_DEFAULT|(13<<BG_SHIFT))
#define BG_BCYAN	(BG_NOT_DEFAULT|(14<<BG_SHIFT))
#define BG_BWHITE	(BG_NOT_DEFAULT|(15<<BG_SHIFT))

#define FG_SHIFT	22
#define FG_VALUE	(255<<FG_SHIFT)
#define FG_NOT_DEFAULT	(256<<FG_SHIFT)
#define FG_MASK		(511<<FG_SHIFT)

#define FG_DEFAULT	(0<<FG_SHIFT)
#define FG_BWHITE	(FG_NOT_DEFAULT|(15<<FG_SHIFT))
#define FG_BCYAN	(FG_NOT_DEFAULT|(14<<FG_SHIFT))
#define FG_BMAGENTA	(FG_NOT_DEFAULT|(13<<FG_SHIFT))
#define FG_BBLUE	(FG_NOT_DEFAULT|(12<<FG_SHIFT))
#define FG_BYELLOW	(FG_NOT_DEFAULT|(11<<FG_SHIFT))
#define FG_BGREEN	(FG_NOT_DEFAULT|(10<<FG_SHIFT))
#define FG_BRED		(FG_NOT_DEFAULT|(9<<FG_SHIFT))
#define FG_BBLACK	(FG_NOT_DEFAULT|(8<<FG_SHIFT))
#define FG_WHITE	(FG_NOT_DEFAULT|(7<<FG_SHIFT))
#define FG_CYAN		(FG_NOT_DEFAULT|(6<<FG_SHIFT))
#define FG_MAGENTA	(FG_NOT_DEFAULT|(5<<FG_SHIFT))
#define FG_BLUE		(FG_NOT_DEFAULT|(4<<FG_SHIFT))
#define FG_YELLOW	(FG_NOT_DEFAULT|(3<<FG_SHIFT))
#define FG_GREEN	(FG_NOT_DEFAULT|(2<<FG_SHIFT))
#define FG_RED		(FG_NOT_DEFAULT|(1<<FG_SHIFT))
#define FG_BLACK	(FG_NOT_DEFAULT|(0<<FG_SHIFT))

void outatr PARAMS((struct charmap *map,SCRN *t,int *scrn,int *attrf,int xx,int yy,int c,int a));

#endif

/*
 * translate character and its attribute into something printable
 */
void xlat PARAMS((int *attr, unsigned char *c));
void xlat_utf_ctrl PARAMS((int *attr, unsigned char *c));

/* int eraeol(SCRN *t,int x,int y);
 *
 * Erase from screen coordinate to end of line.
 */
int eraeol PARAMS((SCRN *t, int x, int y, int atr));

/* void nscrlup(SCRN *t,int top,int bot,int amnt);
 *
 * Buffered scroll request.  Request that some lines up.  'top' and 'bot'
 * indicate which lines to scroll.  'bot' is the last line to scroll + 1.
 * 'amnt' is distance in lines to scroll.
 */
void nscrlup PARAMS((SCRN *t, int top, int bot, int amnt));

/* void nscrldn(SCRN *t,int top,int bot,int amnt);
 *
 * Buffered scroll request.  Scroll some lines down.  'top' and 'bot'
 * indicate which lines to scroll.  'bot' is the last line to scroll + 1.
 * 'amnt' is distance in lines to scroll.
 */
void nscrldn PARAMS((SCRN *t, int top, int bot, int amnt));

/* void nscroll(SCRN *t);
 *
 * Execute buffered scroll requests
 */
void nscroll PARAMS((SCRN *t, int atr));

/* void magic(SCRN *t,int y,int *cur,int *new);
 *
 * Figure out and execute line shifting
 */
void magic PARAMS((SCRN *t, int y, int *cs, int *ca, int *s, int *a,int placex));

int clrins PARAMS((SCRN *t));

int meta_color PARAMS((unsigned char *s));

/* Return width of a string */
int joe_wcswidth(struct charmap *map, unsigned char *s, int len);

/* Calculate no. lines needed to fit a string within a given width: used to break up
 * prompts into multiple lines in qw.c */
int break_height(struct charmap *map, unsigned char **src, int *src_len, int wid, int n);

/* Generate a field */
void genfield PARAMS((SCRN *t,int *scrn,int *attr,int x,int y,int ofst,unsigned char *s,int len,int atr,int width,int flg,int *fmt));

/* Column width of a string takes into account utf-8) */
int txtwidth PARAMS((struct charmap *map,unsigned char *s,int len));
int txtwidth1 PARAMS((struct charmap *map, int tabwidth, unsigned char *s, int len));

void unesc_genfmt(unsigned char *d, unsigned char *s, int len, int max);

/* Generate a field: formatted */
void genfmt PARAMS((SCRN *t, int x, int y, int ofst, unsigned char *s, int atr, int flg));

/* Column width of formatted string */
int fmtlen PARAMS((unsigned char *s));

/* Offset within formatted string of particular column */
int fmtpos PARAMS((unsigned char *s, int goal));

extern int bg_text;
extern int columns;
extern int notite;
extern int usetabs;
extern int assume_color;
extern int assume_256color;

#endif
@


1.25
log
@Do not indent single line paragraphs with autoindent is off.  Better dealing
with bullets.
@
text
@d345 1
a345 1
void unesc_genfmt(unsigned char *d, unsigned char *s, int max);
@


1.24
log
@More work on coroutine refactoring.
@
text
@d343 1
@


1.23
log
@more wmkpw elimination
@
text
@d331 7
d342 1
a342 1
int txtwidth PARAMS((unsigned char *s,int len));
@


1.22
log
@fix assume_256.  get rid of ^#
@
text
@d337 2
@


1.21
log
@Massive check-in: rearrange header files, fix -Wall warnings.
@
text
@d123 3
@


1.20
log
@Background color for screen item
@
text
@d11 4
a14 2
#include "config.h"
#include "types.h"
d16 130
a145 1
#include "tty.h"		/* ttputc() */
d343 7
@


1.19
log
@Background color
@
text
@d163 1
a163 1
int eraeol PARAMS((SCRN *t, int x, int y));
d185 1
a185 1
void nscroll PARAMS((SCRN *t));
d204 1
a204 1
void genfmt PARAMS((SCRN *t, int x, int y, int ofst, unsigned char *s, int flg));
@


1.18
log
@Fix some resize window bugs, add 256 color support.
@
text
@d105 4
@


1.17
log
@Blocks to work in hex mode.
Overtype mode for hex.
@
text
@d99 45
a143 29
#define BG_SHIFT 13
#define BG_VALUE (7<<BG_SHIFT)
#define BG_NOT_DEFAULT (8<<BG_SHIFT)
#define BG_MASK (15<<BG_SHIFT)

#define BG_DEFAULT (0<<BG_SHIFT) /* default */
#define BG_BLACK (8<<BG_SHIFT)
#define BG_RED (9<<BG_SHIFT)
#define BG_GREEN (10<<BG_SHIFT)
#define BG_YELLOW (11<<BG_SHIFT)
#define BG_BLUE (12<<BG_SHIFT)
#define BG_MAGENTA (13<<BG_SHIFT)
#define BG_CYAN (14<<BG_SHIFT)
#define BG_WHITE (15<<BG_SHIFT)

#define FG_SHIFT 17
#define FG_VALUE (7<<FG_SHIFT)
#define FG_NOT_DEFAULT (8<<FG_SHIFT)
#define FG_MASK (15<<FG_SHIFT)

#define FG_DEFAULT (0<<FG_SHIFT)
#define FG_WHITE (8<<FG_SHIFT) /* default */
#define FG_CYAN (9<<FG_SHIFT)
#define FG_MAGENTA (10<<FG_SHIFT)
#define FG_BLUE (11<<FG_SHIFT)
#define FG_YELLOW (12<<FG_SHIFT)
#define FG_GREEN (13<<FG_SHIFT)
#define FG_RED (14<<FG_SHIFT)
#define FG_BLACK (15<<FG_SHIFT)
@


1.16
log
@
Everything about character set is now contained in struct charmap.

Deprecate ^T U.  Now use ^T E to select file encoding.
@
text
@d178 1
a178 1
void genfield PARAMS((SCRN *t,int *scrn,int *attr,int x,int y,int ofst,unsigned char *s,int len,int atr,int width,int flg));
@


1.15
log
@Clean up pass: use internal ctype function everywhere.
@
text
@d129 1
a129 1
void outatr PARAMS((int wide,struct charmap *map,SCRN *t,int *scrn,int *attrf,int xx,int yy,int c,int a));
@


1.14
log
@Allow UTF-8 in menu entries.

Clear up genfield() and genfmt() stuff.  Now control characters in
file names are properly displayed.

When UTF-8 character decodes to 127 - 159, 0 - 31, display it
as a control character.
@
text
@d129 1
a129 1
void outatr PARAMS((int wide,SCRN *t,int *scrn,int *attrf,int xx,int yy,int c,int a));
@


1.13
log
@Fix syntax definition file loader so that you don't
get seg faults when you refer to a state which doesn't
exist.

Fix outatr() to work with non-UTF-8 character sets again.
Need to start thinking about iconv().

Mess with option strings to make ^T look nicer: no longer
four columns in 80 character terminal windows.

Got rid of yellow selection bar from ^T.
@
text
@d137 1
d177 15
@


1.12
log
@	Added -notite global option: when set, prevents screen from
	being restored on exit.

	Added -usetabs global option: when set, uses tabs for cursor
	position update (which was the default before).  Now we don't
	use tabs by default.

        Completed change to 'unsigned char *' and elimination of
        MAXINT.  What a mess.  No warnings with gcc -pedantic.

	Fix UTF-8 bugs where cursor was not correct on scrolled screen.
@
text
@d129 1
a129 19
#define outatr(t, scrn, attrf, xx, yy, c, a) do {	\
	int zz = mk_wcwidth(c);				\
	if(*(scrn) != (c) || *(attrf) != (a)) {		\
		*(scrn) = (c);				\
		*(attrf) = (a);				\
		if((t)->ins)				\
			clrins(t);			\
		if((t)->x != (xx) || (t)->y != (yy))	\
			cpos((t), (xx), (yy));		\
		if((t)->attrib != (a))			\
			set_attr((t), (a));		\
		utf8_putc(c);				\
		(t)->x+=zz;				\
		if(zz==2) {				\
			(scrn)[1]= -1;			\
			(attrf)[1]= 0;			\
		}					\
	}						\
} while(0)
@


1.11
log
@Initial check-in of UTF-8 support (^T U).  JOE is likely to have many bugs
at this point.
@
text
@d192 1
a192 1
int meta_color PARAMS((char *s));
@


1.10
log
@Clean up meaning of default color.

Allow syntax to be specified in joerc file: "-syntax perl"

Add class definitions to syntax files.

Add perl and verilog definitions (they need work).

Change joerc to assume files with . in their name do not want word
wrap enabled (except for .txt).
@
text
@d61 1
a61 1
int attr PARAMS((SCRN *t, int c));
d63 4
a66 1
/* void outatr(SCRN *t,int *scrn,int x,int y,int c,int a);
d83 1
a83 1
#define outatr(t,scrn,x,y,c,a) do { \
d129 5
a133 3
#define outatr(t, scrn, xx, yy, c, a) do {		\
	if(*(scrn) != ((c) | (a))) {			\
		*(scrn) = ((c) | (a));			\
d139 7
a145 3
			attr((t), (a));			\
		ttputc(c);				\
		++(t)->x;				\
d188 1
a188 1
void magic PARAMS((SCRN *t, int y, int *cs, int *s, int placex));
@


1.9
log
@Syntax highlighting baby steps.
@
text
@d97 28
a124 20
#define BG_MASK (7<<BG_SHIFT)
#define BG_BLACK (0<<BG_SHIFT) /* default */
#define BG_RED (1<<BG_SHIFT)
#define BG_GREEN (2<<BG_SHIFT)
#define BG_YELLOW (3<<BG_SHIFT)
#define BG_BLUE (4<<BG_SHIFT)
#define BG_MAGENTA (5<<BG_SHIFT)
#define BG_CYAN (6<<BG_SHIFT)
#define BG_WHITE (7<<BG_SHIFT)

#define FG_SHIFT 16
#define FG_MASK (7<<FG_SHIFT)
#define FG_WHITE (0<<FG_SHIFT) /* default */
#define FG_CYAN (1<<FG_SHIFT)
#define FG_MAGENTA (2<<FG_SHIFT)
#define FG_BLUE (3<<FG_SHIFT)
#define FG_YELLOW (4<<FG_SHIFT)
#define FG_GREEN (5<<FG_SHIFT)
#define FG_RED (6<<FG_SHIFT)
#define FG_BLACK (7<<FG_SHIFT)
d183 2
@


1.8
log
@change "expr, expr" to "expr; expr" where appropriate
@
text
@d94 23
@


1.7
log
@change xlat macro into xlat(int *, char *) function
@
text
@d80 6
a85 4
#define outatr(t,scrn,x,y,c,a) \
  ( \
    (t), (x), (y), *(scrn)=((unsigned)(c)|atab[a]) \
  )
d95 1
a95 1
#define outatr(t, scrn, xx, yy, c, a) {			\
d107 1
a107 1
}
@


1.6
log
@include only headers which are needed
@
text
@d109 4
a112 11
extern unsigned xlata[256];
extern unsigned char xlatc[256];
extern int dspasis;

#define xlat(a,c) \
  ( \
  (dspasis && ((unsigned)(c)>=128)) ? \
      ((a)=0) \
    : \
      (((a)=xlata[(unsigned)(c)]), ((c)=xlatc[(unsigned)(c)])) \
  )
@


1.5
log
@put struct definitions and other goodies into types.h
@
text
@d14 1
a14 2
#include "termcap.h"
#include "tty.h"
d87 5
a91 5
#define INVERSE 256
#define UNDERLINE 512
#define BOLD 1024
#define BLINK 2048
#define DIM 4096
@


1.4
log
@version 2.9.7-pre3
@
text
@d1 9
a9 2
/* Device independant tty interface for JOE
   Copyright (C) 1992 Joseph H. Allen
d11 2
a12 14
This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */
a13 4
#ifndef _Iscrn
#define _Iscrn 1

#include "config.h"
a17 129

typedef struct scrn SCRN;

struct hentry {
	int next;
	int loc;
};

/* Each terminal has one of these */

#ifdef __MSDOS__

struct scrn {
	int li;
	int co;
	short *scrn;
	int scroll;
	int insdel;
	int *updtab;
	int *compose;
	int *sary;
};

#else
struct scrn {
	CAP *cap;		/* Termcap/Terminfo data */

	int li;			/* Screen height */
	int co;			/* Screen width */

	char *ti;		/* Initialization string */
	char *cl;		/* Home and clear screen... really an
				   init. string */
	char *cd;		/* Clear to end of screen */
	char *te;		/* Restoration string */

	int haz;		/* Terminal can't print ~s */
	int os;			/* Terminal overstrikes */
	int eo;			/* Can use blank to erase even if os */
	int ul;			/* _ overstrikes */
	int am;			/* Terminal has autowrap, but not magicwrap */
	int xn;			/* Terminal has magicwrap */

	char *so;		/* Enter standout (inverse) mode */
	char *se;		/* Exit standout mode */

	char *us;		/* Enter underline mode */
	char *ue;		/* Exit underline mode */
	char *uc;		/* Single time underline character */

	int ms;			/* Ok to move when in standout/underline mode */

	char *mb;		/* Enter blinking mode */
	char *md;		/* Enter bold mode */
	char *mh;		/* Enter dim mode */
	char *mr;		/* Enter inverse mode */
	char *me;		/* Exit above modes */

	int da, db;		/* Extra lines exist above, below */
	char *al, *dl, *AL, *DL;	/* Insert/delete lines */
	char *cs;		/* Set scrolling region */
	int rr;			/* Set for scrolling region relative addressing */
	char *sf, *SF, *sr, *SR;	/* Scroll */

	char *dm, *dc, *DC, *ed;	/* Delete characters */
	char *im, *ic, *IC, *ip, *ei;	/* Insert characters */
	int mi;			/* Set if ok to move while in insert mode */

	char *bs;		/* Move cursor left 1 */
	int cbs;
	char *lf;		/* Move cursor down 1 */
	int clf;
	char *up;		/* Move cursor up 1 */
	int cup;
	char *nd;		/* Move cursor right 1 */

	char *ta;		/* Move cursor to next tab stop */
	int cta;
	char *bt;		/* Move cursor to previous tab stop */
	int cbt;
	int tw;			/* Tab width */

	char *ho;		/* Home cursor to upper left */
	int cho;
	char *ll;		/* Home cursor to lower left */
	int cll;
	char *cr;		/* Move cursor to left edge */
	int ccr;
	char *RI;		/* Move cursor right n */
	int cRI;
	char *LE;		/* Move cursor left n */
	int cLE;
	char *UP;		/* Move cursor up n */
	int cUP;
	char *DO;		/* Move cursor down n */
	int cDO;
	char *ch;		/* Set cursor column */
	int cch;
	char *cv;		/* Set cursor row */
	int ccv;
	char *cV;		/* Goto beginning of specified line */
	int ccV;
	char *cm;		/* Set cursor row and column */
	int ccm;

	char *ce;		/* Clear to end of line */
	int cce;

	/* Basic abilities */
	int scroll;		/* Set to use scrolling */
	int insdel;		/* Set to use insert/delete within line */

	/* Current state of terminal */
	int *scrn;		/* Current contents of screen */
	int x, y;		/* Current cursor position (-1 for unknown) */
	int top, bot;		/* Current scrolling region */
	int attrib;		/* Current character attributes */
	int ins;		/* Set if we're in insert mode */

	int *updtab;		/* Dirty lines table */
	int avattr;		/* Bits set for available attributes */
	int *sary;		/* Scroll buffer array */

	int *compose;		/* Line compose buffer */
	int *ofst;		/* stuff for magic */
	struct hentry *htab;
	struct hentry *ary;
};
#endif
@


1.3
log
@take the CVS repository to version 2.9.7-pre2
@
text
@d162 1
a162 1
SCRN *nopen();
d169 1
a169 1
void nresize();
d176 1
a176 1
void nredraw();
d178 3
a180 3
void npartial();
void nescape();
void nreturn();
d188 1
a188 1
void nclose();
d194 1
a194 1
int cpos();
d200 1
a200 1
int attr();
d264 1
a264 1
int eraeol();
d272 1
a272 1
void nscrlup();
d280 1
a280 1
void nscrldn();
d286 1
a286 1
void nscroll();
d292 1
a292 1
void magic();
d294 1
a294 1
int clrins();
@


1.2
log
@changed as of joe-2.9.6
@
text
@d1 2
a2 3
/*
	Device independant tty interface for JOE
	Copyright (C) 1992 Joseph H. Allen
d4 14
a17 2
	This file is part of JOE (Joe's Own Editor)
 */
d30 1
a30 2
struct hentry
{
d39 1
a39 2
struct scrn
{
d51 1
a51 2
struct scrn
{
d162 1
a162 1
SCRN *nopen ();
d169 1
a169 1
void nresize ();
d176 1
a176 1
void nredraw ();
d178 3
a180 3
void npartial ();
void nescape ();
void nreturn ();
d188 1
a188 1
void nclose ();
d194 1
a194 1
int cpos ();
d200 1
a200 1
int attr ();
d232 13
a244 13
#define outatr(t,scrn,xx,yy,c,a) \
  ( \
    (*(scrn)!=((c)|(a))) ? \
      ( \
      *(scrn)=((c)|(a)), \
      ((t)->ins?clrins(t):0), \
      ((t)->x!=(xx) || (t)->y!=(yy)?cpos((t),(xx),(yy)):0), \
      ((t)->attrib!=(a)?attr((t),(a)):0), \
      ttputc(c), ++(t)->x \
      ) \
    : \
      0 \
  )
d264 1
a264 1
int eraeol ();
d272 1
a272 1
void nscrlup ();
d280 1
a280 1
void nscrldn ();
d286 1
a286 1
void nscroll ();
d292 1
a292 1
void magic ();
d294 1
a294 1
int clrins ();
@


1.1
log
@Initial revision
@
text
@d1 3
a3 2
/* Device independant tty interface for JOE
   Copyright (C) 1992 Joseph H. Allen
d5 2
a6 14
This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */ 
d20 4
a23 4
 {
 int next;
 int loc;
 };
d30 10
a39 10
 {
 int li;
 int co;
 short *scrn;
 int scroll;
 int insdel;
 int *updtab;
 int *compose;
 int *sary;
 };
d43 2
a44 2
 {
 CAP *cap;		/* Termcap/Terminfo data */
d46 2
a47 2
 int li;			/* Screen height */
 int co;			/* Screen width */
d49 98
a146 98
 char *ti;			/* Initialization string */
 char *cl;			/* Home and clear screen... really an
 				   init. string */
 char *cd;			/* Clear to end of screen */
 char *te;			/* Restoration string */

 int haz;			/* Terminal can't print ~s */
 int os;			/* Terminal overstrikes */
 int eo;			/* Can use blank to erase even if os */
 int ul;			/* _ overstrikes */
 int am;			/* Terminal has autowrap, but not magicwrap */
 int xn;			/* Terminal has magicwrap */

 char *so;			/* Enter standout (inverse) mode */
 char *se;			/* Exit standout mode */

 char *us;			/* Enter underline mode */
 char *ue;			/* Exit underline mode */
 char *uc;			/* Single time underline character */

 int ms;			/* Ok to move when in standout/underline mode */

 char *mb;			/* Enter blinking mode */
 char *md;			/* Enter bold mode */
 char *mh;			/* Enter dim mode */
 char *mr;			/* Enter inverse mode */
 char *me;			/* Exit above modes */

 int da, db;			/* Extra lines exist above, below */
 char *al, *dl, *AL, *DL;	/* Insert/delete lines */
 char *cs;			/* Set scrolling region */
 int rr;			/* Set for scrolling region relative addressing */
 char *sf, *SF, *sr, *SR;	/* Scroll */

 char *dm, *dc, *DC, *ed;	/* Delete characters */
 char *im, *ic, *IC, *ip, *ei;	/* Insert characters */
 int mi;			/* Set if ok to move while in insert mode */

 char *bs;			/* Move cursor left 1 */
 int cbs;
 char *lf;			/* Move cursor down 1 */
 int clf;
 char *up;			/* Move cursor up 1 */
 int cup;
 char *nd;			/* Move cursor right 1 */

 char *ta;			/* Move cursor to next tab stop */
 int cta;
 char *bt;			/* Move cursor to previous tab stop */
 int cbt;
 int tw;			/* Tab width */

 char *ho;			/* Home cursor to upper left */
 int cho;
 char *ll;			/* Home cursor to lower left */
 int cll;
 char *cr;			/* Move cursor to left edge */
 int ccr;
 char *RI;			/* Move cursor right n */
 int cRI;
 char *LE;			/* Move cursor left n */
 int cLE;
 char *UP;			/* Move cursor up n */
 int cUP;
 char *DO;			/* Move cursor down n */
 int cDO;
 char *ch;			/* Set cursor column */
 int cch;
 char *cv;			/* Set cursor row */
 int ccv;
 char *cV;			/* Goto beginning of specified line */
 int ccV;
 char *cm;			/* Set cursor row and column */
 int ccm;

 char *ce;			/* Clear to end of line */
 int cce;

 /* Basic abilities */
 int scroll;			/* Set to use scrolling */
 int insdel;			/* Set to use insert/delete within line */

 /* Current state of terminal */
 int *scrn;			/* Current contents of screen */
 int x,y;			/* Current cursor position (-1 for unknown) */
 int top,bot;			/* Current scrolling region */
 int attrib;			/* Current character attributes */
 int ins;			/* Set if we're in insert mode */

 int *updtab;			/* Dirty lines table */
 int avattr;			/* Bits set for available attributes */
 int *sary;			/* Scroll buffer array */

 int *compose;			/* Line compose buffer */
 int *ofst;			/* stuff for magic */
 struct hentry *htab;
 struct hentry *ary;
 };
d154 1
a154 1
SCRN *nopen();
d161 1
a161 1
void nresize();
d168 1
a168 1
void nredraw();
d170 3
a172 3
void npartial();
void nescape();
void nreturn();
d180 1
a180 1
void nclose();
d186 1
a186 1
int cpos();
d192 1
a192 1
int attr();
d256 1
a256 1
int eraeol();
d264 1
a264 1
void nscrlup();
d272 1
a272 1
void nscrldn();
d278 1
a278 1
void nscroll();
d284 1
a284 1
void magic();
d286 1
a286 1
int clrins();
@


1.1.1.1
log
@First import of joe sources to cvs (as of joe-2.9)
@
text
@@
