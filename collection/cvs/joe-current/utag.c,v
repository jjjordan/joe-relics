head	1.36;
access;
symbols
	joe_3_5:1.32
	joe-3_4:1.29
	help:1.29
	joe_3_1:1.20
	joe_3_0:1.18
	joe_2_9_8:1.14
	joe_2_9_8_pre1:1.12
	joe_2_9_7:1.7
	joe_2_9_7_pre3:1.7
	joe_2_9_7_pre2:1.7
	joe_2_9_6:1.6
	joe_2_9_5:1.5
	joe_2_9_4:1.4
	joe_2_9_2:1.3
	joe_2_9_1:1.2
	joe_2_9:1.1.1.1
	joe_source:1.1.1;
locks; strict;
comment	@ * @;


1.36
date	2007.06.04.01.13.33;	author jhallen;	state Exp;
branches;
next	1.35;

1.35
date	2007.01.29.14.26.23;	author jhallen;	state Exp;
branches;
next	1.34;

1.34
date	2007.01.23.04.16.50;	author jhallen;	state Exp;
branches;
next	1.33;

1.33
date	2006.07.20.20.56.18;	author jhallen;	state Exp;
branches;
next	1.32;

1.32
date	2006.07.19.00.27.13;	author jhallen;	state Exp;
branches;
next	1.31;

1.31
date	2006.07.18.23.31.54;	author jhallen;	state Exp;
branches;
next	1.30;

1.30
date	2006.07.18.18.26.12;	author jhallen;	state Exp;
branches;
next	1.29;

1.29
date	2006.05.30.14.54.02;	author jhallen;	state Exp;
branches;
next	1.28;

1.28
date	2006.05.22.04.15.41;	author jhallen;	state Exp;
branches;
next	1.27;

1.27
date	2006.05.21.01.58.58;	author jhallen;	state Exp;
branches;
next	1.26;

1.26
date	2006.05.14.17.14.04;	author jhallen;	state Exp;
branches;
next	1.25;

1.25
date	2006.03.08.03.00.57;	author jhallen;	state Exp;
branches;
next	1.24;

1.24
date	2005.04.24.04.30.52;	author jhallen;	state Exp;
branches;
next	1.23;

1.23
date	2005.03.22.03.22.39;	author jhallen;	state Exp;
branches;
next	1.22;

1.22
date	2005.03.16.21.37.37;	author jhallen;	state Exp;
branches;
next	1.21;

1.21
date	2005.02.26.19.49.47;	author jhallen;	state Exp;
branches;
next	1.20;

1.20
date	2004.05.04.16.35.12;	author jhallen;	state Exp;
branches;
next	1.19;

1.19
date	2004.05.03.22.55.53;	author jhallen;	state Exp;
branches;
next	1.18;

1.18
date	2004.04.17.13.13.17;	author jhallen;	state Exp;
branches;
next	1.17;

1.17
date	2004.04.14.17.09.48;	author jhallen;	state Exp;
branches;
next	1.16;

1.16
date	2004.04.12.13.58.27;	author jhallen;	state Exp;
branches;
next	1.15;

1.15
date	2004.01.19.20.43.04;	author marx_sk;	state Exp;
branches;
next	1.14;

1.14
date	2003.03.04.17.39.33;	author vsamel;	state Exp;
branches;
next	1.13;

1.13
date	2003.02.17.13.51.00;	author vsamel;	state Exp;
branches;
next	1.12;

1.12
date	2001.12.10.13.59.06;	author vsamel;	state Exp;
branches;
next	1.11;

1.11
date	2001.12.04.13.14.16;	author vsamel;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.29.14.43.34;	author vsamel;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.27.13.27.32;	author vsamel;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.12.15.52.27;	author vsamel;	state Exp;
branches;
next	1.7;

1.7
date	2001.10.29.14.39.52;	author vsamel;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.11.04.38.37;	author polesapart;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.11.04.06.35;	author polesapart;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.11.04.00.24;	author polesapart;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.11.03.57.30;	author polesapart;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.11.03.48.08;	author polesapart;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.11.03.40.19;	author polesapart;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.11.03.40.19;	author polesapart;	state Exp;
branches;
next	;


desc
@@


1.36
log
@More work on coroutine refactoring.
@
text
@/*
 *	tags file symbol lookup
 *	Copyright
 *		(C) 1992 Joseph H. Allen
 *
 * 	This file is part of JOE (Joe's Own Editor)
 */
#include "types.h"

static unsigned char **get_tag_list()
{
	unsigned char buf[512];
	unsigned char tag[512];
	int i,pos;
	FILE *f;
	unsigned char **lst = NULL;
	
	f = fopen("tags", "r");
	if (f) {
		while (fgets((char *)buf, 512, f)) {
			pos = 0;
			for (i=0; i<512; i++) {
				if (buf[i] == ' ' || buf[i] == '\t') {
					pos = i;
					i = 512;
				}
			}
			if (pos > 0) {
				zncpy(tag, buf, pos);
				tag[pos] = '\0';
			}
			lst = vaadd(lst, vsncpy(NULL, 0, sz(tag)));
		}
		fclose(f);	
	}
	return lst;
}

static unsigned char **tag_word_list;

static int tag_cmplt(BW *bw)
{
	/* Reload every time: we should really check date of tags file...
	if (tag_word_list)
		varm(tag_word_list); */

	if (!tag_word_list) {
		tag_word_list = get_tag_list();
		vaperm(tag_word_list);
	}

	if (!tag_word_list) {
		ttputc(7);
		return 0;
	}

	return simple_cmplt(bw,tag_word_list);
}

static B *taghist = NULL;

unsigned char *get_word_under_cursor(BW *bw)
{
	P *p = pdup(bw->cursor, USTR "utag");
	P *q = pdup(p, USTR "utag");
	unsigned char *s;
	int c;

	while (joe_isalnum_(bw->b->o.charmap,(c = prgetc(p))))
		/* do nothing */;
	if (c != NO_MORE_DATA) {
		pgetc(p);
	}
	pset(q, p);
	while (joe_isalnum_(bw->b->o.charmap,(c = pgetc(q))))
		/* do nothing */;
	if (c != NO_MORE_DATA) {
		prgetc(q);
	}
	s = brvs(NULL, p, q->byte - p->byte);
	prm(p);
	prm(q);
	return s;
}

int utag(BW *bw)
{
	unsigned char *s = get_word_under_cursor(bw);

	s = ask(bw->parent, joe_gettext(_("Tag search: ")), &taghist, NULL, tag_cmplt, locale_map, 0, 0, s);

	if (s) {
		unsigned char buf[512];
		unsigned char buf1[512];
		FILE *f;
		unsigned char *t = NULL;

		if (bw->b->name) {
			t = vsncpy(t, 0, sz(bw->b->name));
			t = vsncpy(sv(t), sc(":"));
			t = vsncpy(sv(t), sv(s));
		}
		f = fopen("tags", "r");
		if (!f) {
			char *tagspath = getenv("TAGS");
			if (tagspath)
				f = fopen(tagspath, "r");
			if (!f) {
				msgnw(bw->parent, joe_gettext(_("Couldn't open tags file")));
				return -1;
			}
		}
		while (fgets((char *)buf, 512, f)) {
			int x, y, c, z;

			for (x = 0; buf[x] && buf[x] != ' ' && buf[x] != '\t'; ++x) ;
			c = buf[x];
			buf[x] = 0;
			if (!zcmp(s, buf) || (t && !zcmp(t, buf))) {
				buf[x] = c;
				while (buf[x] == ' ' || buf[x] == '\t') {
					++x;
				}
				for (y = x; buf[y] && buf[y] != ' ' && buf[y] != '\t' && buf[y] != '\n'; ++y) ;
				if (x != y) {
					c = buf[y];
					buf[y] = 0;
					if (doswitch(bw, vsncpy(NULL, 0, sz(buf + x)))) {
						fclose(f);
						return -1;
					}
					bw = (BW *) maint->curwin->object;
					p_goto_bof(bw->cursor);
					buf[y] = c;
					while (buf[y] == ' ' || buf[y] == '\t') {
						++y;
					}
					for (x = y; buf[x] && buf[x] != '\n'; ++x) ;
					buf[x] = 0;
					if (x != y) {
						long line = 0;
						if (buf[y] >= '0' && buf[y] <= '9') {
							/* It's a line number */
							sscanf((char *)(buf + y), "%ld", &line);
							if (line >= 1) {
								int omid = mid;

								mid = 1;
								pline(bw->cursor, line - 1), bw->cursor->xcol = piscol(bw->cursor);
								dofollows();
								mid = omid;
							} else {
								msgnw(bw->parent, joe_gettext(_("Invalid line number")));
							}
						} else {
							z = 0;
							/* It's a search string.  New versions of
							   ctags have real regex with vi command.  Old
							   ones do not always quote / and depend on it
							   being last char on line. */
							if (buf[y] == '/' || buf[y] == '?') {
								int ch = buf[y++];
								/* Find terminating / or ? */
								for (x = y + zlen(buf + y); x != y; --x)
									if (buf[x] == ch)
										break;
								/* Copy characters, convert to JOE regex... */
								if (buf[y] == '^') {
									buf1[z++] = '\\';
									buf1[z++] = '^';
									++y;
								}
								while (buf[y] && buf[y] != '\n' && !(buf[y] == ch && y == x)) {
									if (buf[y] == '$' && buf[y+1] == ch) {
										++y;
										buf1[z++] = '\\';
										buf1[z++] = '$';
									} else if (buf[y] == '\\' && buf[y+1]) {
										/* This is going to cause problem...
										   old ctags did not have escape */
										++y;
										if (buf[y] == '\\')
											buf1[z++] = '\\';
										buf1[z++] = buf[y++];
									} else {
										buf1[z++] = buf[y++];
									}
								}
							}
							if (z) {
								fclose(f);
								buf1[z] = 0;
								return dopfnext(bw, mksrch(vsncpy(NULL, 0, sz(buf1)), NULL, 0, 0, -1, 0, 0, 0));
							}
						}
					}
					fclose(f);
					return 0;
				}
			}
		}
		msgnw(bw->parent, joe_gettext(_("Not found")));
		fclose(f);
		return -1;
	} else {
		return -1;
	}
}
@


1.35
log
@more refactoring
@
text
@a97 3
		/* if (notify) {
			*notify = 1;
		} */
d193 1
a193 1
								return dopfnext(bw, mksrch(vsncpy(NULL, 0, sz(buf1)), NULL, 0, 0, -1, 0, 0, 0), NULL);
@


1.34
log
@fix tags.
switch more wmkpw to ask
@
text
@d90 1
a90 1
	s = ask(bw->parent, joe_gettext(_("Tag search: ")), &taghist, NULL, tag_cmplt, NULL, locale_map, 0, 0, s);
d131 1
a131 1
					if (doswitch(bw, vsncpy(NULL, 0, sz(buf + x)), NULL, NULL)) {
@


1.33
log
@semiautomatic variables
@
text
@a9 99
static int dotag(BW *bw, unsigned char *s, void *obj, int *notify)
{
	unsigned char buf[512];
	FILE *f;
	unsigned char *t = NULL;

	if (notify) {
		*notify = 1;
	}
	if (bw->b->name) {
		t = vsncpy(t, 0, sz(bw->b->name));
		t = vsncpy(sv(t), sc(":"));
		t = vsncpy(sv(t), sv(s));
	}
	f = fopen("tags", "r");
	if (!f) {
		char *tagspath = getenv("TAGS");
		if (tagspath)
			f = fopen(tagspath, "r");
		if (!f) {
			msgnw(bw->parent, joe_gettext(_("Couldn't open tags file")));
			return -1;
		}
	}
	while (fgets((char *)buf, 512, f)) {
		int x, y, c;

		for (x = 0; buf[x] && buf[x] != ' ' && buf[x] != '\t'; ++x) ;
		c = buf[x];
		buf[x] = 0;
		if (!zcmp(s, buf) || (t && !zcmp(t, buf))) {
			buf[x] = c;
			while (buf[x] == ' ' || buf[x] == '\t') {
				++x;
			}
			for (y = x; buf[y] && buf[y] != ' ' && buf[y] != '\t' && buf[y] != '\n'; ++y) ;
			if (x != y) {
				c = buf[y];
				buf[y] = 0;
				if (doswitch(bw, vsncpy(NULL, 0, sz(buf + x)), NULL, NULL)) {
					fclose(f);
					return -1;
				}
				bw = (BW *) maint->curwin->object;
				p_goto_bof(bw->cursor);
				buf[y] = c;
				while (buf[y] == ' ' || buf[y] == '\t') {
					++y;
				}
				for (x = y; buf[x] && buf[x] != '\n'; ++x) ;
				buf[x] = 0;
				if (x != y) {
					long line = 0;

					if (buf[y] >= '0' && buf[y] <= '9') {
						sscanf((char *)(buf + y), "%ld", &line);
						if (line >= 1) {
							int omid = mid;

							mid = 1;
							pline(bw->cursor, line - 1), bw->cursor->xcol = piscol(bw->cursor);
							dofollows();
							mid = omid;
						} else {
							msgnw(bw->parent, joe_gettext(_("Invalid line number")));
						}
					} else {
						if (buf[y] == '/' || buf[y] == '?') {
							++y;
							if (buf[y] == '^')
								buf[--y] = '\\';
							for (x = y+1; buf[x] && buf[x] != '\n' && buf[x-1] != '/'; ++x);
						}
						if (buf[x - 1] == '/' || buf[x - 1] == '?') {
							--x;
							buf[x] = 0;
							if (buf[x - 1] == '$') {
								buf[x - 1] = '\\';
								buf[x] = '$';
								++x;
								buf[x] = 0;
							}
						}
						if (x != y) {
							fclose(f);
							return dopfnext(bw, mksrch(vsncpy(NULL, 0, sz(buf + y)), NULL, 0, 0, -1, 0, 0, 0), NULL);
						}
					}
				}
				fclose(f);
				return 0;
			}
		}
	}
	msgnw(bw->parent, joe_gettext(_("Not found")));
	fclose(f);
	return -1;
}

d62 24
d88 3
a90 1
	BW *pbw;
d92 13
a104 10
	pbw = wmkpw(bw->parent, joe_gettext(_("Tag search: ")), &taghist, dotag, NULL, NULL, tag_cmplt, NULL, NULL, locale_map, 0);
	if (pbw && joe_isalnum_(bw->b->o.charmap,brch(bw->cursor))) {
		P *p = pdup(bw->cursor, USTR "utag");
		P *q = pdup(p, USTR "utag");
		int c;

		while (joe_isalnum_(bw->b->o.charmap,(c = prgetc(p))))
			/* do nothing */;
		if (c != NO_MORE_DATA) {
			pgetc(p);
d106 9
a114 5
		pset(q, p);
		while (joe_isalnum_(bw->b->o.charmap,(c = pgetc(q))))
			/* do nothing */;
		if (c != NO_MORE_DATA) {
			prgetc(q);
d116 92
a207 8
		binsb(pbw->cursor, bcpy(p, q));
		pset(pbw->cursor, pbw->b->eof);
		pbw->cursor->xcol = piscol(pbw->cursor);
		prm(p);
		prm(q);
	}
	if (pbw) {
		return 0;
@


1.32
log
@UC -> USTR
@
text
@a23 1
	/* first try to open the tags file in the current directory */
a25 3
		/* if there's no tags file in the current dir, then query
		   for the environment variable TAGS.
		*/
d27 3
a29 4
		if(tagspath){
			f = fopen(tagspath, "r");    
		}
		if(!f){
a30 2
			vsrm(s);
			vsrm(t);
a49 2
					vsrm(s);
					vsrm(t);
a93 2
							vsrm(s);
							vsrm(t);
a98 2
				vsrm(s);
				vsrm(t);
a104 2
	vsrm(s);
	vsrm(t);
d146 1
a146 1
	if (!tag_word_list)
d148 2
@


1.31
log
@change US to UC
@
text
@d180 2
a181 2
		P *p = pdup(bw->cursor, UC "utag");
		P *q = pdup(p, UC "utag");
@


1.30
log
@Fix tags... update to 3.5
@
text
@d180 2
a181 2
		P *p = pdup(bw->cursor, US "utag");
		P *q = pdup(p, US "utag");
@


1.29
log
@make tag search work with restore cursor
@
text
@d24 1
d27 13
a39 4
		msgnw(bw->parent, joe_gettext(_("Couldn't open tags file")));
		vsrm(s);
		vsrm(t);
		return -1;
@


1.28
log
@gettext()
@
text
@d53 1
@


1.27
log
@A option for search
Restore cursor to old position
@
text
@d26 1
a26 1
		msgnw(bw->parent, US "Couldn't open tags file");
d72 1
a72 1
							msgnw(bw->parent, US "Invalid line number");
d106 1
a106 1
	msgnw(bw->parent, US "Not found");
d167 1
a167 1
	pbw = wmkpw(bw->parent, US "Tag search: ", &taghist, dotag, NULL, NULL, tag_cmplt, NULL, NULL, locale_map, 0);
@


1.26
log
@Massive check-in: rearrange header files, fix -Wall warnings.
@
text
@d95 1
a95 1
							return dopfnext(bw, mksrch(vsncpy(NULL, 0, sz(buf + y)), NULL, 0, 0, -1, 0, 0), NULL);
@


1.25
log
@add joe_debug
@
text
@a7 1
#include "config.h"
a9 17
#include <stdio.h>

#include "b.h"
#include "bw.h"
#include "main.h"
#include "pw.h"
#include "tab.h"
#include "ufile.h"
#include "usearch.h"
#include "utils.h"
#include "vs.h"
#include "va.h"
#include "utf8.h"
#include "tty.h"
#include "charmap.h"
#include "w.h"

@


1.24
log
@fix gcc-4.0.0 warnings
@
text
@d187 2
a188 2
		P *p = pdup(bw->cursor);
		P *q = pdup(p);
@


1.23
log
@Fix bugs where doedit() was called and we expected the window to immediately
change.

Run -pedantic
@
text
@d55 1
a55 1
		if (!strcmp(s, buf) || (t && !strcmp(t, buf))) {
d150 1
a150 1
				strncpy(tag, buf, pos);
@


1.22
log
@Fix ~ expansion insanity
@
text
@d64 1
a64 1
				if (doedit(bw, vsncpy(NULL, 0, sz(buf + x)), NULL, NULL)) {
d164 3
a166 3
	// Reload every time: we should really check date of tags file...
	//if (tag_word_list)
	//	varm(tag_word_list);
@


1.21
log
@Tab completion for tags file search ^K ;
@
text
@d185 1
a185 1
	pbw = wmkpw(bw->parent, US "Tag search: ", &taghist, dotag, NULL, NULL, tag_cmplt, NULL, NULL, locale_map);
@


1.20
log
@
Everything about character set is now contained in struct charmap.

Deprecate ^T U.  Now use ^T E to select file encoding.
@
text
@d22 1
d24 1
d131 48
d185 1
a185 1
	pbw = wmkpw(bw->parent, US "Tag search: ", &taghist, dotag, NULL, NULL, cmplt, NULL, NULL, locale_map);
@


1.19
log
@Clean up pass: use internal ctype function everywhere.
@
text
@d22 2
d135 2
a136 2
	pbw = wmkpw(bw->parent, US "Tag search: ", &taghist, dotag, NULL, NULL, cmplt, NULL, NULL, -1);
	if (pbw && isalnum_(bw->b->o.utf8,bw->b->o.charmap,brch(bw->cursor))) {
d141 1
a141 1
		while (isalnum_(bw->b->o.utf8,bw->b->o.charmap,(c = prgetc(p))))
d147 1
a147 1
		while (isalnum_(bw->b->o.utf8,bw->b->o.charmap,(c = pgetc(q))))
@


1.18
log
@UTF-8 now supported in file names and prompts.

Search should be partially working.  \+ with
a UTF-8 character following is broken and
\[ ] only works for bytes.
@
text
@d134 1
a134 1
	if (pbw && isalnum_(bw->b->o.utf8,brch(bw->cursor))) {
d139 1
a139 1
		while (isalnum_(bw->b->o.utf8,(c = prgetc(p))))
d145 1
a145 1
		while (isalnum_(bw->b->o.utf8,(c = pgetc(q))))
@


1.17
log
@Fix many edit fuctions for UTF-8.  Now we use iswalnum() when in UTF-8 mode.
Paragraph format works.

Search is still broken.
@
text
@d133 1
a133 1
	pbw = wmkpw(bw->parent, US "Tag search: ", &taghist, dotag, NULL, NULL, cmplt, NULL, NULL);
@


1.16
log
@	Added -notite global option: when set, prevents screen from
	being restored on exit.

	Added -usetabs global option: when set, uses tabs for cursor
	position update (which was the default before).  Now we don't
	use tabs by default.

        Completed change to 'unsigned char *' and elimination of
        MAXINT.  What a mess.  No warnings with gcc -pedantic.

	Fix UTF-8 bugs where cursor was not correct on scrolled screen.
@
text
@d134 1
a134 1
	if (pbw && isalnum_(brc(bw->cursor))) {
d139 1
a139 1
		while (isalnum_(c = prgetc(p)))
d145 1
a145 1
		while (isalnum_(c = pgetc(q)))
@


1.15
log
@*** empty log message ***
@
text
@d24 1
a24 1
static int dotag(BW *bw, char *s, void *obj, int *notify)
d26 1
a26 1
	char buf[512];
d28 1
a28 1
	char *t = NULL;
d40 1
a40 1
		msgnw(bw->parent, "Couldn't open tags file");
d45 1
a45 1
	while (fgets(buf, 512, f)) {
d77 1
a77 1
						sscanf(buf + y, "%ld", &line);
d86 1
a86 1
							msgnw(bw->parent, "Invalid line number");
d120 1
a120 1
	msgnw(bw->parent, "Not found");
d133 1
a133 1
	pbw = wmkpw(bw->parent, "Tag search: ", &taghist, dotag, NULL, NULL, cmplt, NULL, NULL);
@


1.14
log
@change 0 to NULL where we're talking about pointers
@
text
@d93 1
@


1.13
log
@fix segafults in isalpha()-like functions
@
text
@d28 1
a28 1
	char *t = 0;
d126 1
a126 1
static B *taghist = 0;
@


1.12
log
@change function declaration "void a(P * p)" to "void a(P *p)"
@
text
@d140 1
a140 1
		if (c != MAXINT) {
d146 1
a146 1
		if (c != MAXINT) {
@


1.11
log
@change indentation of do {} while() cycles
@
text
@d24 1
a24 1
static int dotag(BW * bw, char *s, void *obj, int *notify)
d128 1
a128 1
int utag(BW * bw)
@


1.10
log
@include only headers which are needed
@
text
@d138 2
a139 1
		while (isalnum_(c = prgetc(p))) ;
d144 2
a145 1
		while (isalnum_(c = pgetc(q))) ;
@


1.9
log
@put struct definitions and other goodies into types.h
@
text
@d12 1
a12 1
#include <string.h>
d15 1
a15 1
#include "w.h"
a16 4
#include "qw.h"
#include "vs.h"
#include "utils.h"
#include "usearch.h"
a17 2
#include "main.h"
#include "utag.h"
d19 4
@


1.8
log
@use msgnw[t](W *, char *) instead of msgnw[t](BASE *, char *)
@
text
@d2 8
a9 5
	tags file symbol lookup
	Copyright (C) 1992 Joseph H. Allen

	This file is part of JOE (Joe's Own Editor)
*/
a12 1
#include "config.h"
@


1.7
log
@take the CVS repository to version 2.9.7-pre2
@
text
@d40 1
a40 1
		msgnw(bw, "Couldn't open tags file");
d86 1
a86 1
							msgnw(bw, "Invalid line number");
d119 1
a119 1
	msgnw(bw, "Not found");
@


1.6
log
@changed as of joe-2.9.6
@
text
@d24 2
a25 1
static int dotag (BW *bw, char *s, void *obj, int *notify) {
d29 1
d34 3
a36 3
		t = vsncpy (t, 0, sz (bw->b->name));
		t = vsncpy (sv (t), sc (":"));
		t = vsncpy (sv (t), sv (s));
d38 1
a38 1
	f = fopen ("tags", "r");
d40 3
a42 3
		msgnw (bw, "Couldn't open tags file");
		vsrm (s);
		vsrm (t);
d45 1
a45 1
	while (fgets (buf, 512, f)) {
d47 2
a48 1
		for (x = 0; buf[x] && buf[x] != ' ' && buf[x] != '\t'; ++x);
d51 1
a51 1
		if (!strcmp (s, buf) || (t && !strcmp (t, buf))) {
d56 1
a56 1
			for (y = x; buf[y] && buf[y] != ' ' && buf[y] != '\t' && buf[y] != '\n'; ++y);
d60 4
a63 4
				if (doedit (bw, vsncpy (NULL, 0, sz (buf + x)), NULL, NULL)) {
					vsrm (s);
					vsrm (t);
					fclose (f);
d71 1
a71 1
				for (x = y; buf[x] && buf[x] != '\n'; ++x);
d75 1
d77 1
a77 1
						sscanf (buf + y, "%ld", &line);
d80 4
a83 3
						    mid = 1;
						    pline (bw->cursor, line - 1), bw->cursor->xcol=piscol(bw->cursor);
							dofollows ();
d86 1
a86 1
							  msgnw (bw, "Invalid line number");
d91 2
a92 1
							if (buf[y] == '^') buf[--y] = '\\';
d97 5
a101 5
							if (buf	[x - 1] == '$') {
								      buf [x - 1] = '\\';
								      buf [x] = '$';
								      ++x;
								      buf [x] = 0;
d105 4
a108 4
							vsrm (s);
							vsrm (t);
							fclose (f);
							return dopfnext (bw, mksrch (vsncpy (NULL, 0, sz (buf+y)), NULL, 0, 0, -1, 0, 0), NULL);
d112 3
a114 3
				vsrm (s);
				vsrm (t);
				fclose (f);
d119 4
a122 4
	msgnw (bw, "Not found");
	vsrm (s);
	vsrm (t);
	fclose (f);
d128 2
a129 1
int utag (BW *bw) {
d132 4
a135 4
	pbw = wmkpw (bw->parent, "Tag search: ", &taghist, dotag, NULL, NULL, cmplt, NULL, NULL);
	if (pbw && isalnum_ (brc (bw->cursor))) {
		P *p = pdup (bw->cursor);
		P *q = pdup (p);
d138 1
a138 1
		while (isalnum_ (c = prgetc (p)));
d140 1
a140 1
			pgetc (p);
d142 2
a143 2
		pset (q, p);
		while (isalnum_ (c = pgetc (q)));
d145 1
a145 1
			prgetc (q);
d147 5
a151 5
		binsb (pbw->cursor, bcpy (p, q));
		pset (pbw->cursor, pbw->b->eof);
		pbw->cursor->xcol = piscol (pbw->cursor);
		prm (p);
		prm (q);
@


1.5
log
@changed as of joe-2.9.5
@
text
@d22 1
d24 1
a24 1
static int dotag(BW *bw, char *s, void *obj, int *notify) {
d27 4
a30 2
	char *t=0;
	if (notify) *notify=1;
d32 3
a34 3
		t = vsncpy(t,0,sz(bw->b->name));
		t = vsncpy(sv(t),sc(":"));
		t = vsncpy(sv(t),sv(s));
d36 1
a36 1
	f = fopen("tags","r");
d38 3
a40 3
		msgnw(bw,"Couldn't open tags file");
		vsrm(s);
		vsrm(t);
d43 1
a43 1
	while(fgets(buf,512,f)) {
d45 4
a48 3
		for (x=0; buf[x] && buf[x]!=' ' && buf[x]!='\t'; ++x);
		c = buf[x]; buf[x] = 0;
		if (!strcmp(s,buf) || t && !strcmp(t,buf)) {
d50 11
a60 9
			while (buf[x]==' ' || buf[x]=='\t') ++x;
			for (y=x; buf[y] && buf[y]!=' ' && buf[y]!='\t' && buf[y]!='\n'; ++y);
			if (x!=y) {
				B *b;
				c = buf[y]; buf[y] = 0;
				if (doedit(bw,vsncpy(NULL,0,sz(buf+x)),NULL,NULL)) {
					vsrm(s);
					vsrm(t);
					fclose(f);
d63 1
a63 1
				bw = (BW *)maint->curwin->object;
d65 4
a68 2
				while (buf[y]==' ' || buf[y]=='\t') ++y;
				for (x=y; buf[x] && buf[x]!='\n'; ++x);
d70 5
a74 5
				if (x!=y) {
					long line=0;
					if (buf[y]>='0' && buf[y]<='9') {
						sscanf (buf+y,"%ld",&line);
						if (line>=1) {
d76 7
a82 5
							mid = 1;
							pline(bw->cursor,line-1), bw->cursor->xcol=piscol(bw->cursor);
							dofollows();
							mid=omid;
						} else msgnw(bw,"Invalid line number");
d84 1
a84 1
						if (buf[y]=='/' || buf[y]=='?') {
d86 1
a86 1
							if(buf[y]=='^') buf[--y]='\\';
d88 1
a88 1
						if (buf[x-1]=='/' || buf[x-1]=='?') {
d91 5
a95 5
							if (buf[x-1]=='$') {
								buf[x-1] = '\\';
								buf[x] = '$';
								++x;
								buf[x]=0;
d98 5
a102 5
						if (x!=y) {
							vsrm(s);
							vsrm(t);
							fclose(f);
							return dopfnext(bw,mksrch(vsncpy(NULL,0,sz(buf+y)),NULL,0,0,-1,0,0),NULL);
d106 3
a108 3
				vsrm(s);
				vsrm(t);
				fclose(f);
d113 4
a116 4
	msgnw(bw,"Not found");
	vsrm(s);
	vsrm(t);
	fclose(f);
d120 1
a120 1
static B *taghist=0;
d122 1
a122 1
int utag(BW *bw) {
d124 5
a128 4
	pbw = wmkpw(bw,"Tag search: ",&taghist,dotag,NULL,NULL,cmplt,NULL,NULL);
	if (pbw && isalnum_(brc(bw->cursor))) {
		P *p = pdup(bw->cursor);
		P *q = pdup(p);
d130 15
a144 5
		while (isalnum_(c=prgetc(p))); if (c!=MAXINT) pgetc(p);
		pset(q,p); while(isalnum_(c=pgetc(q))); if (c!=MAXINT) prgetc(q);
		binsb(pbw->cursor,bcpy(p,q));
		pset(pbw->cursor,pbw->b->eof); pbw->cursor->xcol=piscol(pbw->cursor);
		prm(p); prm(q);
d146 1
a146 1
	if (pbw) 
d148 1
a148 1
	else 
d150 1
@


1.4
log
@changed as of joe-2.9.4
@
text
@d17 1
a17 1
#include "zstr.h"
@


1.3
log
@changed as of joe-2.9.2
@
text
@d115 1
a115 1
	if (pbw && crest(brc(bw->cursor))) {
d119 2
a120 2
		while (crest(c=prgetc(p))); if (c!=MAXINT) pgetc(p);
		pset(q,p); while(crest(c=pgetc(q))); if (c!=MAXINT) prgetc(q);
@


1.2
log
@changes for joe-2.9.1
@
text
@d9 1
d44 1
a44 1
		if (!zcmp(s,buf) || t && !zcmp(t,buf)) {
@


1.1
log
@Initial revision
@
text
@d1 3
a3 2
/* tags file symbol lookup
   Copyright (C) 1992 Joseph H. Allen
d5 2
a6 14
This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */ 
d22 86
a107 107
static int dotag(bw,s,obj,notify)
BW *bw;
char *s;
void *obj;
int *notify;
 {
 char buf[512];
 FILE *f;
 char *t=0;
 if(notify) *notify=1;
 if(bw->b->name)
  {
  t=vsncpy(t,0,sz(bw->b->name));
  t=vsncpy(sv(t),sc(":"));
  t=vsncpy(sv(t),sv(s));
  }
 f=fopen("tags","r");
 if(!f)
  {
  msgnw(bw,"Couldn't open tags file");
  vsrm(s);
  vsrm(t);
  return -1;
  }
 while(fgets(buf,512,f))
  {
  int x, y, c;
  for(x=0;buf[x] && buf[x]!=' ' && buf[x]!='\t';++x);
  c=buf[x]; buf[x]=0;
  if(!zcmp(s,buf) || t && !zcmp(t,buf))
   {
   buf[x]=c;
   while(buf[x]==' ' || buf[x]=='\t') ++x;
   for(y=x;buf[y] && buf[y]!=' ' && buf[y]!='\t' && buf[y]!='\n';++y);
   if(x!=y)
    {
    B *b;
    c=buf[y]; buf[y]=0;
    if(doedit(bw,vsncpy(NULL,0,sz(buf+x)),NULL,NULL))
     {
     vsrm(s);
     vsrm(t);
     fclose(f);
     return -1;
     }
    bw=(BW *)maint->curwin->object;
    buf[y]=c;
    while(buf[y]==' ' || buf[y]=='\t') ++y;
    for(x=y;buf[x] && buf[x]!='\n';++x);
    buf[x]=0;
    if(x!=y)
     {
     long line=0;
     if(buf[y]>='0' && buf[y]<='9')
      {
      sscanf(buf+y,"%ld",&line);
      if(line>=1)
       {
       int omid=mid;
       mid=1;
       pline(bw->cursor,line-1), bw->cursor->xcol=piscol(bw->cursor);
       dofollows();
       mid=omid;
       }
      else msgnw(bw,"Invalid line number");
      }
     else
      {
      if(buf[y]=='/' || buf[y]=='?')
       {
       ++y;
       if(buf[y]=='^') buf[--y]='\\';
       }
      if(buf[x-1]=='/' || buf[x-1]=='?')
       {
       --x;
       buf[x]=0;
       if(buf[x-1]=='$')
        {
        buf[x-1]='\\';
        buf[x]='$';
        ++x;
        buf[x]=0;
        }
       }
      if(x!=y)
       {
       vsrm(s);
       vsrm(t);
       fclose(f);
       return dopfnext(bw,mksrch(vsncpy(NULL,0,sz(buf+y)),NULL,0,0,-1,0,0),NULL);
       }
      }
     }
    vsrm(s);
    vsrm(t);
    fclose(f);
    return 0;
    }
   }
  }
 msgnw(bw,"Not found");
 vsrm(s);
 vsrm(t);
 fclose(f);
 return -1;
 }
d111 18
a128 19
int utag(bw)
BW *bw;
 {
 BW *pbw;
 pbw=wmkpw(bw,"Tag search: ",&taghist,dotag,NULL,NULL,cmplt,NULL,NULL);
 if(pbw && crest(brc(bw->cursor)))
  {
  P *p=pdup(bw->cursor);
  P *q=pdup(p);
  int c;
  while(crest(c=prgetc(p))); if(c!=MAXINT) pgetc(p);
  pset(q,p); while(crest(c=pgetc(q))); if(c!=MAXINT) prgetc(q);
  binsb(pbw->cursor,bcpy(p,q));
  pset(pbw->cursor,pbw->b->eof); pbw->cursor->xcol=piscol(pbw->cursor);
  prm(p); prm(q);
  }
 if(pbw) return 0;
 else return -1;
 }
@


1.1.1.1
log
@First import of joe sources to cvs (as of joe-2.9)
@
text
@@
