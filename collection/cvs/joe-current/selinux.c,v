head	1.5;
access;
symbols
	joe_3_5:1.5
	joe-3_4:1.5
	help:1.5
	joe_3_1:1.2
	joe_3_0:1.1;
locks; strict;
comment	@ * @;


1.5
date	2006.05.22.04.15.41;	author jhallen;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.14.17.14.04;	author jhallen;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.24.04.30.50;	author jhallen;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.05.00.09.15;	author jhallen;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.15.19.40.04;	author jhallen;	state Exp;
branches;
next	;


desc
@@


1.5
log
@gettext()
@
text
@/*
 * Example code to show how to copy the security context from one file to
 * another.
 */
#include "types.h"

#ifdef WITH_SELINUX
#include <selinux/selinux.h>
static int selinux_enabled = -1;
#endif

int
copy_security_context(const char *from_file, const char *to_file)
{
	int status = 0;
#ifdef WITH_SELINUX
	security_context_t from_context;
	security_context_t to_context;

	if (selinux_enabled == -1)
		selinux_enabled = (is_selinux_enabled() > 0);

	if (!selinux_enabled)
		return 0;

	if (getfilecon(from_file, &from_context) < 0) {
		/*
		 * If the filesystem doesn't support extended
		 * attributes, the original had no special security
		 * context and the target cannot have one either.
		 */
		if (errno == EOPNOTSUPP)
			return 0;

		error(0, errno, (char *)joe_gettext(_("Could not get security context for %s")),
		      from_file);
		return 1;
	}

	if (getfilecon(to_file, &to_context) < 0) {
		MSG_PUTS(_(joe_gettext(_("\nCould not get security context for "))));
		msg_outtrans(to_file);
		msg_putchar('\n');
		freecon(from_context);
		return 1;
	}

	if (zcmp(from_context, to_context) != 0) {
		if (setfilecon(to_file, from_context) < 0) {
			error(0, errno,
			      (char *)joe_gettext(_("Could not set security context for %s")),
			      to_file);
			status = 1;
		}
	}

	freecon(to_context);
	freecon(from_context);
#endif
	return status;
}

int
match_default_security_context(const char *from_file)
{
#ifdef WITH_SELINUX
	security_context_t scontext;

	if (selinux_enabled == -1)
		selinux_enabled = (is_selinux_enabled() > 0);

	if (!selinux_enabled)
		return 0;

	if (getfilecon(from_file, &scontext) < 0) {
		/*
		 * If the filesystem doesn't support extended
		 * attributes, the original had no special security
		 * context and the target cannot have one either.
		 */
		if (errno == EOPNOTSUPP)
			return 0;

		error(0, errno, (char *)joe_gettext(_("Could not get security context for %s")),
		      from_file);
		return 1;
	}

	if (setfscreatecon(scontext) < 0) {
		error(0, errno,
		      (char *)joe_gettext(_("Could not set default security context for %s")),
		      from_file);
		freecon(scontext);
		return 1;
	}
	freecon(scontext);
#endif
	return 0;
}


int
reset_default_security_context()
{
#ifdef WITH_SELINUX
	if (selinux_enabled == -1)
		selinux_enabled = (is_selinux_enabled() > 0);

	if (!selinux_enabled)
		return 0;

	if (setfscreatecon(0) < 0) {
		error(0, errno, (char *)joe_gettext(_("Could not reset default security context")));
		return 1;
	}
#endif
	return 0;
}


int
output_security_context(char *from_file)
{
#ifdef WITH_SELINUX
	security_context_t scontext;

	if (selinux_enabled == -1)
		selinux_enabled = (is_selinux_enabled() > 0);
	if (!selinux_enabled)
		return 0;

	if (getfilecon(from_file, &scontext) < 0) {
		/*
		 * If the filesystem doesn't support extended
		 * attributes, the original had no special security
		 * context and the target cannot have one either.
		 */
		if (errno == EOPNOTSUPP)
			return 0;
		
		error(0, errno,(char *)joe_gettext(_("Could not get security context for %s")),
		      from_file);
		return 1;
	}

	error(0, 0, (char *)joe_gettext(_("%s Security Context %s")), from_file, scontext);
	freecon(scontext);
#endif
	return 0;
}

#if 0

/*
  Test program compile using the following command
  cc -o t t.c -DWITH_SELINUX -DTEST -lselinux
 */

#include <stdio.h>
#include <stdlib.h>
main(int argc, char **argv)
{

	printf("%d: %s\n", argc, argv[1]);
	if (argc == 3) {
		copy_security_context(argv[1], argv[2]);
		output_security_context(argv[2]);
	}
	if (argc == 2) {
		FILE *fd;
		char *temp;
		match_default_security_context(argv[1]);
		mkstemp(temp);
		printf("temp=%s", temp);
		fd = fopen(temp, "w");
		fclose(fd);
		output_security_context(temp);
		reset_default_security_context();
	}
}
#endif
@


1.4
log
@Massive check-in: rearrange header files, fix -Wall warnings.
@
text
@d35 1
a35 1
		error(0, errno, "Could not get security context for %s",
d41 1
a41 1
		MSG_PUTS(_("\nCould not get security context for "));
d51 1
a51 1
			      "Could not set security context for %s",
d84 1
a84 1
		error(0, errno, "Could not get security context for %s",
d91 1
a91 1
		      "Could not set default security context for %s",
d113 1
a113 1
		error(0, errno, "Could not reset default security context");
d141 1
a141 1
		error(0, errno, "Could not get security context for %s",
d146 1
a146 1
	error(0, 0, "%s Security Context %s", from_file, scontext);
@


1.3
log
@fix gcc-4.0.0 warnings
@
text
@d5 2
a10 1
#include <errno.h>
@


1.2
log
@Checks ~/.joe/syntax for syntax files.
Applied new Selinux patch.
@
text
@d47 1
a47 1
	if (strcmp(from_context, to_context) != 0) {
@


1.1
log
@First attempt at character set conversion iconv().
Now the file's coding can be different from the terminal's
coding.

Also, applied secure linux patch from RedHat.
@
text
@d14 1
d16 3
d20 31
a50 18
		selinux_enabled = is_selinux_enabled();
	if (selinux_enabled) {
		security_context_t scontext;
		if (getfilecon(from_file, &scontext) < 0) {
			/*
			 * If the filesystem doesn't support extended
			 * attributes, the original had no special security
			 * context and the target cannot have one either.
			 */
			if (errno == EOPNOTSUPP)
				return 0;

			error(0, errno, "Could not get security context for %s",
			      from_file);
			return 1;
		}
		if (setfilecon(to_file, scontext) < 0) {
			error(0, errno, "Could not set security context for %s",
d52 1
a52 2
			freecon(scontext);
			return 1;
a53 1
		freecon(scontext);
d55 3
d59 1
a59 1
	return 0;
d66 2
d69 23
a91 23
		selinux_enabled = is_selinux_enabled();
	if (selinux_enabled) {
		security_context_t scontext;
		if (getfilecon(from_file, &scontext) < 0) {
			/*
			 * If the filesystem doesn't support extended
			 * attributes, the original had no special security
			 * context and the target cannot have one either.
			 */
			if (errno == EOPNOTSUPP)
				return 0;

			error(0, errno, "Could not get security context for %s",
			      from_file);
			return 1;
		}
		if (setfscreatecon(scontext) < 0) {
			error(0, errno,
			      "Could not set default security context for %s",
			      from_file);
			freecon(scontext);
			return 1;
		}
d93 1
d95 1
d100 1
d106 8
a113 7
		selinux_enabled = is_selinux_enabled();
	if (selinux_enabled) {
		if (setfscreatecon(0) < 0) {
			error(0, errno,
			      "Could not reset default security context");
			return 1;
		}
d119 1
d124 2
d127 16
a142 18
		selinux_enabled = is_selinux_enabled();
	if (selinux_enabled) {
		security_context_t scontext;
		if (getfilecon(from_file, &scontext) < 0) {
			/*
			 * If the filesystem doesn't support extended
			 * attributes, the original had no special security
			 * context and the target cannot have one either.
			 */
			if (errno == EOPNOTSUPP)
				return 0;

			error(0, errno, "Could not get security context for %s",
			      from_file);
			return 1;
		}
		error(0, 0, "%s Security Context %s", from_file, scontext);
		freecon(scontext);
d144 3
d148 1
@

