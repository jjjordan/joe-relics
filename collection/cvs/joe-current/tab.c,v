head	1.36;
access;
symbols
	joe_3_5:1.32
	joe-3_4:1.30
	help:1.30
	joe_3_1:1.19
	joe_3_0:1.17
	joe_2_9_8:1.15
	joe_2_9_8_pre1:1.13
	joe_2_9_7:1.7
	joe_2_9_7_pre3:1.7
	joe_2_9_7_pre2:1.6
	joe_2_9_6:1.5
	joe_2_9_5:1.4
	joe_2_9_4:1.3
	joe_2_9_2:1.2
	joe_2_9_1:1.1.1.1
	joe_2_9:1.1.1.1
	joe_source:1.1.1;
locks; strict;
comment	@ * @;


1.36
date	2007.06.04.01.13.33;	author jhallen;	state Exp;
branches;
next	1.35;

1.35
date	2006.07.28.06.10.58;	author jhallen;	state Exp;
branches;
next	1.34;

1.34
date	2006.07.23.14.06.35;	author jhallen;	state Exp;
branches;
next	1.33;

1.33
date	2006.07.20.20.56.17;	author jhallen;	state Exp;
branches;
next	1.32;

1.32
date	2006.07.19.00.27.12;	author jhallen;	state Exp;
branches;
next	1.31;

1.31
date	2006.07.18.23.31.54;	author jhallen;	state Exp;
branches;
next	1.30;

1.30
date	2006.05.22.04.15.41;	author jhallen;	state Exp;
branches;
next	1.29;

1.29
date	2006.05.14.17.14.04;	author jhallen;	state Exp;
branches;
next	1.28;

1.28
date	2006.03.08.03.00.57;	author jhallen;	state Exp;
branches;
next	1.27;

1.27
date	2006.03.06.03.01.44;	author jhallen;	state Exp;
branches;
next	1.26;

1.26
date	2006.03.05.04.50.00;	author jhallen;	state Exp;
branches;
next	1.25;

1.25
date	2006.03.05.04.17.53;	author jhallen;	state Exp;
branches;
next	1.24;

1.24
date	2005.04.24.04.30.51;	author jhallen;	state Exp;
branches;
next	1.23;

1.23
date	2005.03.17.23.54.47;	author jhallen;	state Exp;
branches;
next	1.22;

1.22
date	2005.03.16.23.19.29;	author jhallen;	state Exp;
branches;
next	1.21;

1.21
date	2005.03.16.21.55.58;	author jhallen;	state Exp;
branches;
next	1.20;

1.20
date	2005.03.02.06.02.23;	author jhallen;	state Exp;
branches;
next	1.19;

1.19
date	2004.05.07.19.43.30;	author jhallen;	state Exp;
branches;
next	1.18;

1.18
date	2004.05.07.00.48.43;	author jhallen;	state Exp;
branches;
next	1.17;

1.17
date	2004.04.12.13.58.27;	author jhallen;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.02.09.50.55;	author vsamel;	state Exp;
branches;
next	1.15;

1.15
date	2003.03.04.17.39.15;	author vsamel;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.10.12.09.40;	author vsamel;	state Exp;
branches;
next	1.13;

1.13
date	2001.12.10.14.01.27;	author vsamel;	state Exp;
branches;
next	1.12;

1.12
date	2001.12.10.13.59.06;	author vsamel;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.29.14.43.34;	author vsamel;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.27.13.27.32;	author vsamel;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.12.15.55.00;	author vsamel;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.12.15.52.27;	author vsamel;	state Exp;
branches;
next	1.7;

1.7
date	2001.10.29.15.28.38;	author vsamel;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.29.14.39.52;	author vsamel;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.11.04.38.37;	author polesapart;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.11.04.06.35;	author polesapart;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.11.04.00.24;	author polesapart;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.11.03.57.30;	author polesapart;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.11.03.40.05;	author polesapart;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.11.03.40.05;	author polesapart;	state Exp;
branches;
next	;


desc
@@


1.36
log
@More work on coroutine refactoring.
@
text
@/*
 *	File selection menu
 *	Copyright
 *		(C) 1992 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 */
#include "types.h"

typedef struct tab TAB;

int menu_explorer = 0;		/* Stay in menu system when directory selected */
int menu_jump = 0;		/* Jump into menu */

extern WATOM watommenu;

struct tab {
	int first_len;			/* Original size of path */
	int ofst;			/* Starting offset to path */
	unsigned char *path;		/* current directory */
	unsigned char *pattern;		/* search pattern */
	int len;		/* no. entries in files */
	unsigned char **files;		/* array of file names */
	unsigned char **list;
	unsigned char *type;		/* file type array */
	int prv;
	unsigned char *orgpath;
	unsigned char *orgnam;
};

#define F_DIR		1	/* type codes for file type array */
#define F_NORMAL	2
#define F_EXEC		4

/* Read matching files from a directory
 *  Directory is given in tab.path
 *  Pattern is given in tab.pattern
 *
 * Returns with -1 if there was an error
 * Otherwise returns index to file with inode given in prv
 * len and files are set with the file names
 * type is set with the file types
 */

static int get_entries(TAB *tab, int prv)
{
	int a;
	int which = 0;
	unsigned char *oldpwd = pwd();
	unsigned char **files;
	unsigned char *tmp;
	int users_flg = 0;

	tmp = vsncpy(NULL,0,sv(tab->path));
	tmp = canonical(tmp);

	if (chpwd(tmp)) {
		return -1;
	}
	if (!tab->path[0] && tab->pattern[0]=='~') {
		files = rexpnd_users(tab->pattern);
		users_flg = 1;
	} else
		files = rexpnd(tab->pattern);
	if (!files) {
		chpwd(oldpwd);
		return -1;
	}
	if (!valen(files)) {
		chpwd(oldpwd);
		return -1;
	}
	tab->len = valen(files);
	varm(tab->files);
	tab->files = files;
	vaperm(tab->files);
	vasort(files, tab->len);
	if (tab->type)
		joe_free(tab->type);
	tab->type = (unsigned char *) joe_malloc(tab->len);
	for (a = 0; a != tab->len; a++)
		if(users_flg) {
			tab->type[a] = F_DIR;
		} else {
			struct stat buf;
			mset(&buf, 0, sizeof(struct stat));

			stat((char *)(files[a]), &buf);
			if (buf.st_ino == prv)
				which = a;
			if ((buf.st_mode & S_IFMT) == S_IFDIR)
				tab->type[a] = F_DIR;
			else if (buf.st_mode & (0100 | 0010 | 0001))
				tab->type[a] = F_EXEC;
			else
				tab->type[a] = F_NORMAL;
		}
	chpwd(oldpwd);
	return which;
}

static void insnam(BW *bw, unsigned char *path, unsigned char *nam, int dir, int ofst)
{
	P *p = pdup(bw->cursor, USTR "insnam");

	pgoto(p, ofst);
	p_goto_eol(bw->cursor);
	bdel(p, bw->cursor);
	if (vslen(path)) {
		binsm(bw->cursor, sv(path));
		p_goto_eol(bw->cursor);
		if (path[vslen(path) - 1] != '/') {
			binsm(bw->cursor, sc("/"));
			p_goto_eol(bw->cursor);
		}
	}
	binsm(bw->cursor, sv(nam));
	p_goto_eol(bw->cursor);
	if (dir) {
		binsm(bw->cursor, sc("/"));
		p_goto_eol(bw->cursor);
	}
	prm(p);
	bw->cursor->xcol = piscol(bw->cursor);
}

/* Given a menu structure with a tab structure as its object,
 * a pattern and path set in the tab structure:
 *
 * Load the menu with a list of file names and set the file name in
 * the prompt window to the directory the menu was read in from.
 * If flg is set, treload attempts to position to the previous directory
 * which was visited.
 *
 * Returns with -1 if there was an error
 * Returns with 0 for success
 */

static unsigned char **treload(TAB *tab,MENU *m, BW *bw, int flg,int *defer)
{
	int x;
	int which;
	struct stat buf;

	if ((which = get_entries(tab, tab->prv)) < 0)
		return 0;
	if (tab->path && tab->path[0])
		stat((char *)tab->path, &buf);
	else
		stat(".", &buf);
	tab->prv = buf.st_ino;
	if (!flg)
		which = 0;

	tab->list = vatrunc(tab->list, 0);
	vaperm(tab->list);

	for (x = 0; tab->files[x]; ++x) {
		unsigned char *s = vsncpy(NULL, 0, sv(tab->files[x]));

		tab->list = vaadd(tab->list, s);
		if (tab->type[x] == F_DIR)
			tab->list[x] = vsadd(tab->list[x], '/');
		else if (tab->type[x] == F_EXEC)
			tab->list[x] = vsadd(tab->list[x], '*');
	}
	if (defer) {
		*defer = which;
		/* bash */
		/* insnam(bw, tab->path, tab->pattern, 0, tab->ofst); */
		return tab->list;
	} else {
		ldmenu(m, tab->list, which);
		/* bash */
		/* insnam(bw, tab->path, tab->pattern, 0, tab->ofst); */
		return tab->list;
	}
}

static void rmtab(TAB *tab)
{
	obj_free(tab->orgpath);
	obj_free(tab->orgnam);
	varm(tab->list);
	obj_free(tab->path);
	obj_free(tab->pattern);
	varm(tab->files);
	if (tab->type)
		joe_free(tab->type);
	joe_free(tab);
}
/*****************************************************************************/
/****************** The user hit return **************************************/
/*****************************************************************************/
static int tabrtn(MENU *m, int cursor, TAB *tab)
{
	if (menu_explorer && tab->type[cursor] == F_DIR) {	/* Switch directories */
		unsigned char *orgpath = tab->path;
		unsigned char *orgpattern = tab->pattern;
		/* unsigned char *e = endprt(tab->path);

		if (!zcmp(tab->files[cursor], USTR "..") && sLEN(e)
		    && !(e[0] == '.' && e[1] == '.' && (!e[2] || e[2] == '/')))
			tab->path = begprt(tab->path);
		else */ {
			tab->path = vsncpy(NULL, 0, sv(tab->path));
			tab->path = vsncpy(sv(tab->path), sv(m->list[cursor]));
		}
		tab->pattern = vsncpy(NULL, 0, sc("*"));
		obj_perm(tab->path);
		obj_perm(tab->pattern);
		if (!treload(m->object, m, m->parent->win->object, 0, NULL)) {
			msgnw(m->parent, joe_gettext(_("Couldn't read directory ")));
			obj_free(tab->pattern);
			tab->pattern = orgpattern;
			obj_free(tab->path);
			tab->path = orgpath;
			return -1;
		} else {
			obj_free(orgpattern);
			obj_free(orgpath);
			return 0;
		}
	} else {		/* Select name */
		BW *bw = m->parent->win->object;

		insnam(bw, tab->path, tab->files[cursor], (tab->type[cursor]==F_DIR), tab->ofst);
		rmtab(tab);
		m->object = NULL;
		m->abrt = NULL;
		wabort(m->parent);
		return 0;
	}
}

/* Like above, but treats directories as files (adds them to path instead of
 * traverse hierarchy) */

static int tabrtn1(MENU *m, int cursor, TAB *tab)
{
	/* New way: just add directory to path */
	BW *bw = m->parent->win->object;

	insnam(bw, tab->path, tab->files[cursor], (tab->type[cursor]==F_DIR ? 1 : 0), tab->ofst);
	rmtab(tab);
	m->object = NULL;
	m->abrt = NULL;
	wabort(m->parent);
	return 0;
}


/*****************************************************************************/
/****************** The user hit backspace ***********************************/
/*****************************************************************************/
static int tabbacks(MENU *m, int cursor, TAB *tab)
{
	unsigned char *orgpath = tab->path;
	unsigned char *orgpattern = tab->pattern;
	unsigned char *e = endprt(tab->path);

	if (vslen(e) && vslen(tab->path)!=tab->first_len) {
		tab->path = begprt(tab->path);
		obj_perm(tab->path);
	} else {
		wabort(m->parent);
		return 0;
	}
	tab->pattern = vsncpy(NULL, 0, sc("*"));
	obj_perm(tab->pattern);

	if (!treload(m->object, m, m->parent->win->object, 1, NULL)) {
		msgnw(m->parent, joe_gettext(_("Couldn't read directory ")));
		obj_free(tab->pattern);
		tab->pattern = orgpattern;
		obj_free(tab->path);
		tab->path = orgpath;
		return -1;
	} else {
		obj_free(orgpattern);
		obj_free(orgpath);
		return 0;
	}
}
/*****************************************************************************/
/* This should verify that bw still exists... */
static int tababrt(BW *bw, int cursor, TAB *tab)
{
	/* bash */
	/* insnam(bw, tab->orgpath, tab->orgnam, 0, tab->ofst); */
	rmtab(tab);
	return -1;
}

P *p_goto_start_of_path(P *p)
{
	int c;
	do
		c = prgetc(p);
	while (c!=NO_MORE_DATA && c!=' ' && c!='\n');

	if (c!=NO_MORE_DATA)
		pgetc(p);

	return p;
}

/*****************************************************************************/
/****************** Create a tab window **************************************/
/*****************************************************************************/

int cmplt(BW *bw)
{
	MENU *new;
	TAB *tab;
	P *p, *q;
	unsigned char *cline;
	int which;
	unsigned char **l;
	int ofst;

	tab = (TAB *) joe_malloc(sizeof(TAB));
	tab->files = NULL;
	tab->type = NULL;
	tab->list = NULL;
	tab->prv = 0;
	tab->len = 0;

	q = pdup(bw->cursor, USTR "cmplt");
	p_goto_eol(q);
	p = pdup(q, USTR "cmplt");
	p_goto_start_of_path(p);
	ofst = p->byte;

	cline = brvs(NULL, p, (int) (q->byte - p->byte));
	/* Don't do it so soon... */
	/* cline = canonical(cline); */
	prm(p);
	prm(q);

	tab->ofst = ofst;
	tab->pattern = namprt(cline);
	obj_perm(tab->pattern);
	tab->path = dirprt(cline);
	obj_perm(tab->path);
	tab->first_len = vslen(tab->path);
	tab->orgnam = vsncpy(NULL, 0, sv(tab->pattern));
	obj_perm(tab->orgnam);
	tab->orgpath = vsncpy(NULL, 0, sv(tab->path));
	obj_perm(tab->orgpath);
	tab->pattern = vsadd(tab->pattern, '*');

	l = treload(tab, 0, bw, 0, &which);

	/* bash */
	/* TRY */
	if (menu_above) {
		if (bw->parent->link.prev->watom==&watommenu) {
			wabort(bw->parent->link.prev);
			/* smode=2; */
		}
	} else {
		if (bw->parent->link.next->watom==&watommenu) {
			wabort(bw->parent->link.next);
			/* smode=2; */
		}
	}

	if (l && (new = mkmenu((menu_above ? bw->parent->link.prev : bw->parent), bw->parent, l, tabrtn, tababrt, tabbacks, which, tab))) {
		if (valen(tab->files) == 1)
			/* Only one file found, so select it */
			return tabrtn1(new, 0, tab);
		else if (smode || isreg(tab->orgnam)) {
			/* User tried to complete twice (see smode=2 below), so leave menu on */
			/* bash */
			if (!menu_jump)
				bw->parent->t->curwin=bw->parent;
			return 0;
		} else {
			/* Complete name as much as possible, turn menu off */
			unsigned char *com = mcomplete(new);

			obj_free(tab->orgnam);
			tab->orgnam = com;
			obj_perm(tab->orgnam);
			/* wabort causes tab->orgnam to be copied to prompt */
			insnam(bw, tab->orgpath, tab->orgnam, 0, tab->ofst);
			wabort(new->parent);
			smode = 2;
			/* if(joe_beep) */
				ttputc(7);
			return 0;
		}
	} else {
		/* if(joe_beep) */
			ttputc(7);
		rmtab(tab);
		return -1;
	}
}
@


1.35
log
@menu explorer bugs
@
text
@d369 1
a369 1
	if (l && (new = mkmenu((menu_above ? bw->parent->link.prev : bw->parent), bw->parent, l, tabrtn, tababrt, tabbacks, which, tab, NULL))) {
@


1.34
log
@fix option menu problem
@
text
@d210 2
d262 1
a262 1
	if (vslen(e) && vslen(tab->path)!=tab->first_len)
d264 2
a265 1
	else {
d270 1
@


1.33
log
@semiautomatic variables
@
text
@d200 1
a200 1
		unsigned char *e = endprt(tab->path);
d202 1
a202 1
		/* if (!zcmp(tab->files[cursor], USTR "..") && sLEN(e)
@


1.32
log
@UC -> USTR
@
text
@a57 1
		vsrm(tmp);
a59 1
	vsrm(tmp);
d69 1
a69 1
	if (!aLEN(files)) {
d73 1
a73 1
	tab->len = aLEN(files);
d76 1
d109 1
a109 1
	if (sLEN(path)) {
d112 1
a112 1
		if (path[sLEN(path) - 1] != '/') {
d155 2
a156 1
	tab->list = vatrunc(tab->list, aLEN(tab->files));
d161 1
a161 1
		tab->list = vaset(tab->list, x, s);
d182 2
a183 2
	vsrm(tab->orgpath);
	vsrm(tab->orgnam);
d185 2
a186 2
	vsrm(tab->path);
	vsrm(tab->pattern);
a208 1
		vsrm(e);
d212 1
a212 1
			vsrm(tab->pattern);
d214 1
a214 1
			vsrm(tab->path);
d218 2
a219 2
			vsrm(orgpattern);
			vsrm(orgpath);
d260 1
a260 1
	if (sLEN(e) && sLEN(tab->path)!=tab->first_len)
a265 1
	vsrm(e);
d270 1
a270 1
		vsrm(tab->pattern);
d272 1
a272 1
		vsrm(tab->path);
d276 2
a277 2
		vsrm(orgpattern);
		vsrm(orgpath);
d331 1
a331 1
	cline = brvs(p, (int) (q->byte - p->byte));
d339 1
d341 2
a342 1
	tab->first_len = sLEN(tab->path);
d344 1
d346 1
a347 1
	vsrm(cline);
d366 1
a366 1
		if (sLEN(tab->files) == 1)
d379 1
a379 1
			vsrm(tab->orgnam);
d381 1
@


1.31
log
@change US to UC
@
text
@d105 1
a105 1
	P *p = pdup(bw->cursor, UC "insnam");
d202 1
a202 1
		/* if (!zcmp(tab->files[cursor], UC "..") && sLEN(e)
d327 1
a327 1
	q = pdup(bw->cursor, UC "cmplt");
d329 1
a329 1
	p = pdup(q, UC "cmplt");
@


1.30
log
@gettext()
@
text
@d105 1
a105 1
	P *p = pdup(bw->cursor, US "insnam");
d202 1
a202 1
		/* if (!zcmp(tab->files[cursor], US "..") && sLEN(e)
d327 1
a327 1
	q = pdup(bw->cursor, US "cmplt");
d329 1
a329 1
	p = pdup(q, US "cmplt");
@


1.29
log
@Massive check-in: rearrange header files, fix -Wall warnings.
@
text
@d212 1
a212 1
			msgnw(m->parent, US "Couldn't read directory ");
d271 1
a271 1
		msgnw(m->parent, US "Couldn't read directory ");
@


1.28
log
@add joe_debug
@
text
@a7 1
#include "config.h"
a9 16
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_SYS_STAT_H
#include <sys/stat.h>
#endif

#include "b.h"
#include "blocks.h"
#include "menu.h"
#include "path.h"
#include "tty.h"
#include "utils.h"
#include "va.h"
#include "w.h"

a11 2
extern int smode;		/* ??? */
extern int joe_beep;
a308 1
extern int menu_above;
a315 1
	long a, b;
@


1.27
log
@fix %p range problem.  remove debug messages.
@
text
@d124 1
a124 1
	P *p = pdup(bw->cursor);
d348 1
a348 1
	q = pdup(bw->cursor);
d350 1
a350 1
	p = pdup(q);
@


1.26
log
@menu_above option
@
text
@a409 1
		printf("couldn't create menu...\n"); fflush(stdout);
@


1.25
log
@File selection menu is now above prompt instead of below it.
@
text
@d328 2
d373 10
a382 3
	if (bw->parent->link.prev->watom==&watommenu) {
		wabort(bw->parent->link.prev);
		/* smode=2; */
d385 1
a385 1
	if (l && (new = mkmenu(bw->parent->link.prev, bw->parent, l, tabrtn, tababrt, tabbacks, which, tab, NULL))) {
@


1.24
log
@fix gcc-4.0.0 warnings
@
text
@d370 3
a372 2
	if (bw->parent->link.next->watom==&watommenu) {
		wabort(bw->parent->link.next);
d376 1
a376 1
	if (l && (new = mkmenu(bw->parent, l, tabrtn, tababrt, tabbacks, which, tab, NULL))) {
d401 1
@


1.23
log
@Get joe to compile on irix
@
text
@d221 1
a221 1
		/* if (!strcmp(tab->files[cursor], "..") && sLEN(e)
@


1.22
log
@Get tab completion to work on user names.
@
text
@d30 1
a30 1
extern int beep;
d395 1
a395 1
			/* if(beep) */
d400 1
a400 1
		/* if(beep) */
@


1.21
log
@Fix ~ expansion in tab completion
@
text
@d71 1
d81 5
a85 1
	files = rexpnd(tab->pattern);
d101 2
a102 8
	for (a = 0; a != tab->len; a++) {
		struct stat buf;
		mset(&buf, 0, sizeof(struct stat));

		stat((char *)(files[a]), &buf);
		if (buf.st_ino == prv)
			which = a;
		if ((buf.st_mode & S_IFMT) == S_IFDIR)
d104 14
a117 5
		else if (buf.st_mode & (0100 | 0010 | 0001))
			tab->type[a] = F_EXEC;
		else
			tab->type[a] = F_NORMAL;
	}
@


1.20
log
@Fix syntax file warnings.
Add -jump_menu
@
text
@d70 1
d72 5
a76 1
	if (chpwd(tab->path))
d78 2
d325 1
a325 1
	unsigned char *cline, *tmp;
d344 3
a346 3
	tmp = brvs(p, (int) (q->byte - p->byte));
	cline = parsens(tmp, &a, &b);
	vsrm(tmp);
@


1.19
log
@joe a b c, now windows are in order a, b, c.

TAB completion now works on last path in prompt window:
for example '!ls foo', tab will complete the foo.

Added menu_explorer option.  When set: menu stays up when
a directory is seleted.  When clear: directory is added
to path and menu is closed.

Menus are now 40% of window size (or smaller if they are
not filled).

Cursor is now position after selected menu entry.
@
text
@d32 3
d173 2
a174 1
		insnam(bw, tab->path, tab->pattern, 0, tab->ofst);
d178 2
a179 1
		insnam(bw, tab->path, tab->pattern, 0, tab->ofst);
d288 1
d291 2
a292 1
	insnam(bw, tab->orgpath, tab->orgnam, 0, tab->ofst);
d354 6
d362 1
d364 5
a368 1
		else if (smode || isreg(tab->orgnam))
d370 2
a371 1
		else {
d376 2
@


1.18
log
@TAB key now cycles through menu entries.  This is useful
for tab completion: just keep hitting tab until you see the
file you want, then hit enter.

TAB completion is more "bash"-like: if you complete a directory
name a menu does not appear, the directory just gets added to the
prompt.
@
text
@d31 1
d34 2
d104 1
a104 1
static void insnam(BW *bw, unsigned char *path, unsigned char *nam, int dir)
d108 1
a108 1
	p_goto_bol(p);
d141 1
a141 1
static int treload(MENU *m, int flg)
a142 3
	TAB *tab = (TAB *) m->object;	/* The menu */
	W *w = m->parent;	/* Window menu is in */
	BW *bw = (BW *) w->win->object;	/* The prompt window */
d148 1
a148 1
		return -1;
d168 9
a176 3
	ldmenu(m, tab->list, which);
	insnam(bw, tab->path, tab->pattern, 0);
	return 0;
d196 1
a196 4
#if 0
	/* Old way: if tab completes a directory, bring up menu of
	   that directory. */
	if (tab->type[cursor] == F_DIR) {	/* Switch directories */
d201 1
a201 1
		if (!strcmp(tab->files[cursor], "..") && sLEN(e)
d204 1
a204 1
		else {
d210 1
a210 1
		if (treload(m, 0)) {
a222 3
#endif
	/* New way: just add directory to path */
	if (tab->type[cursor] == F_DIR) {
d225 1
a225 1
		insnam(bw, tab->path, tab->files[cursor], 1);
d231 10
a240 2
	} else {
		BW *bw = m->parent->win->object;
d242 6
a247 7
		insnam(bw, tab->path, tab->files[cursor], 0);
		rmtab(tab);
		m->object = NULL;
		m->abrt = NULL;
		wabort(m->parent);
		return 0;
	}
d249 2
d260 1
a260 1
	if (sLEN(e))
d269 1
a269 1
	if (treload(m, 1)) {
d285 1
a285 1
	insnam(bw, tab->orgpath, tab->orgnam, 0);
d289 14
d313 3
a317 6
	new = mkmenu(bw->parent, NULL, tabrtn, tababrt, tabbacks, 0, tab, NULL);
	if (!new) {
		joe_free(tab);
		return -1;
	}

a323 2
	p = pdup(bw->cursor);
	p_goto_bol(p);
d326 4
d336 1
d339 1
d345 20
a364 3
	if (treload(new, 0)) {
		wabort(new->parent);
		if(beep)
d366 1
a367 14
	} else if (sLEN(tab->files) == 1)
		return tabrtn(new, 0, tab);
	else if (smode || isreg(tab->orgnam))
		return 0;
	else {
		unsigned char *com = mcomplete(new);

		vsrm(tab->orgnam);
		tab->orgnam = com;
		wabort(new->parent);
		smode = 2;
		if(beep)
			ttputc(7);
		return 0;
@


1.17
log
@	Added -notite global option: when set, prevents screen from
	being restored on exit.

	Added -usetabs global option: when set, uses tabs for cursor
	position update (which was the default before).  Now we don't
	use tabs by default.

        Completed change to 'unsigned char *' and elimination of
        MAXINT.  What a mess.  No warnings with gcc -pedantic.

	Fix UTF-8 bugs where cursor was not correct on scrolled screen.
@
text
@d101 1
a101 1
static void insnam(BW *bw, unsigned char *path, unsigned char *nam)
d118 4
d169 1
a169 1
	insnam(bw, tab->path, tab->pattern);
d190 3
d220 12
d234 1
a234 1
		insnam(bw, tab->path, tab->files[cursor]);
d276 1
a276 1
	insnam(bw, tab->orgpath, tab->orgnam);
@


1.16
log
@don't beep when not asked
@
text
@d33 2
a34 2
	char *path;		/* current directory */
	char *pattern;		/* search pattern */
d36 3
a38 3
	char **files;		/* array of file names */
	char **list;
	char *type;		/* file type array */
d40 2
a41 2
	char *orgpath;
	char *orgnam;
d62 2
a63 2
	char *oldpwd = pwd();
	char **files;
d67 1
a67 1
	files = (char **) rexpnd(tab->pattern);
d82 1
a82 1
	tab->type = (char *) joe_malloc(tab->len);
d87 1
a87 1
		stat(files[a], &buf);
d101 1
a101 1
static void insnam(BW *bw, char *path, char *nam)
d146 1
a146 1
		stat(tab->path, &buf);
d156 1
a156 1
		char *s = vsncpy(NULL, 0, sv(tab->files[x]));
d187 3
a189 3
		char *orgpath = tab->path;
		char *orgpattern = tab->pattern;
		char *e = endprt(tab->path);
d201 1
a201 1
			msgnw(m->parent, "Couldn't read directory ");
d228 3
a230 3
	char *orgpath = tab->path;
	char *orgpattern = tab->pattern;
	char *e = endprt(tab->path);
d242 1
a242 1
		msgnw(m->parent, "Couldn't read directory ");
d269 1
a269 1
	char *cline, *tmp;
d312 1
a312 1
		char *com = mcomplete(new);
@


1.15
log
@change 0 to NULL where we're talking about pointers
@
text
@d30 1
d304 2
a305 1
		ttputc(7);
d318 2
a319 1
		ttputc(7);
@


1.14
log
@change "expr, expr" to "expr; expr" where appropriate
@
text
@d216 2
a217 2
		m->object = 0;
		m->abrt = 0;
d278 3
a280 3
	tab->files = 0;
	tab->type = 0;
	tab->list = 0;
@


1.13
log
@change (m|re|c)alloc() and free() into joe_(m|re|c)alloc() and joe_free()
(preparation for further error checking)
@
text
@d108 6
a113 3
		binsm(bw->cursor, sv(path)), p_goto_eol(bw->cursor);
		if (path[sLEN(path) - 1] != '/')
			binsm(bw->cursor, sc("/")), p_goto_eol(bw->cursor);
d191 1
a191 2
		    && !(e[0] == '.' && e[1] == '.' && (!e[2]
							|| e[2] == '/')))
@


1.12
log
@change function declaration "void a(P * p)" to "void a(P *p)"
@
text
@a16 3
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
d23 1
d80 2
a81 2
		free(tab->type);
	tab->type = (char *) malloc(tab->len);
d174 2
a175 2
		free(tab->type);
	free(tab);
d269 1
a269 1
	tab = (TAB *) malloc(sizeof(TAB));
d272 1
a272 1
		free(tab);
@


1.11
log
@include only headers which are needed
@
text
@d59 1
a59 1
static int get_entries(TAB * tab, int prv)
d102 1
a102 1
static void insnam(BW * bw, char *path, char *nam)
d132 1
a132 1
static int treload(MENU * m, int flg)
d167 1
a167 1
static void rmtab(TAB * tab)
d182 1
a182 1
static int tabrtn(MENU * m, int cursor, TAB * tab)
d225 1
a225 1
static int tabbacks(MENU * m, int cursor, TAB * tab)
d254 1
a254 1
static int tababrt(BW * bw, int cursor, TAB * tab)
d263 1
a263 1
int cmplt(BW * bw)
@


1.10
log
@put struct definitions and other goodies into types.h
@
text
@d11 1
a11 1
#include <stdio.h>
d13 2
d16 1
a16 1
#include <string.h>
d20 4
a23 6
#include "tab.h"
#include "scrn.h"
#include "kbd.h"
#include "vs.h"
#include "w.h"
#include "bw.h"
d25 1
d27 1
a27 3
#include "menu.h"
#include "tty.h"
#include "blocks.h"
@


1.9
log
@use mkmenu(W *, ...) instead of mkmenu(BASE *, ...)
@
text
@d2 6
a7 6
	File selection menu
	Copyright (C) 1992 Joseph H. Allen

	This file is part of JOE (Joe's Own Editor)
*/

d9 1
@


1.8
log
@use msgnw[t](W *, char *) instead of msgnw[t](BASE *, char *)
@
text
@d272 1
a272 1
	new = mkmenu(bw, NULL, tabrtn, tababrt, tabbacks, 0, tab, NULL);
@


1.7
log
@version 2.9.7-pre3
@
text
@d200 1
a200 1
			msgnw(m, "Couldn't read directory ");
d241 1
a241 1
		msgnw(m, "Couldn't read directory ");
@


1.6
log
@take the CVS repository to version 2.9.7-pre2
@
text
@d102 1
a102 1
void insnam(BW * bw, char *path, char *nam)
d132 1
a132 1
int treload(MENU * m, int flg)
d167 1
a167 1
void rmtab(TAB * tab)
d182 1
a182 1
int tabrtn(MENU * m, int cursor, TAB * tab)
d225 1
a225 1
int tabbacks(MENU * m, int cursor, TAB * tab)
d254 1
a254 1
int tababrt(BW * bw, int cursor, TAB * tab)
@


1.5
log
@changed as of joe-2.9.6
@
text
@d8 1
a8 1
#include "tab.h"
d14 4
a17 1
#include "config.h"
d59 2
a60 1
static int get_entries (TAB *tab, int prv) {
d63 1
a63 1
	char *oldpwd = pwd ();
d66 1
a66 1
	if (chpwd (tab->path)) {
d68 1
a68 2
	}
	files = (char **) rexpnd (tab->pattern);
d70 1
a70 1
		chpwd (oldpwd);
d73 2
a74 2
	if (!aLEN (files)) {
		chpwd (oldpwd);
d77 2
a78 2
	tab->len = aLEN (files);
	varm (tab->files);
d80 4
a83 5
	vasort (files, tab->len);
	if (tab->type) {
		free (tab->type);
	}
	tab->type = (char *) malloc (tab->len);
d86 4
a89 3
		mset (&buf, 0, sizeof (struct stat));
		stat (files[a], &buf);
		if (buf.st_ino == prv) {
d91 1
a91 2
		}
		if ((buf.st_mode & S_IFMT) == S_IFDIR) {
d93 4
a96 5
		} else if (buf.st_mode & (0100 | 0010 | 0001)) {
			  tab->type[a] = F_EXEC;
		} else {
			  tab->type[a] = F_NORMAL;
		}
d98 1
a98 1
	chpwd (oldpwd);
d102 16
a117 15
void insnam (BW *bw, char *path, char *nam) {
	P *p = pdup (bw->cursor);
	p_goto_bol (p);
	p_goto_eol (bw->cursor);
	bdel (p, bw->cursor);
	if (sLEN (path)) {
		binsm (bw->cursor, sv (path)), p_goto_eol (bw->cursor);
		if (path[sLEN (path) - 1] != '/') {
			binsm (bw->cursor, sc ("/")), p_goto_eol (bw->cursor);
		}
	}
	binsm (bw->cursor, sv (nam));
	p_goto_eol (bw->cursor);
	prm (p);
	bw->cursor->xcol = piscol (bw->cursor);
d132 2
a133 1
int treload (MENU *m, int flg) {
d141 1
a141 1
	if ((which = get_entries (tab, tab->prv)) < 0) {
d143 4
a146 6
	}
	if (tab->path && tab->path[0]) {
		stat (tab->path, &buf);
	} else {
		stat (".", &buf);
	}
d148 1
a148 1
	if (!flg) {
a149 1
	}
d151 1
a151 1
	tab->list = vatrunc (tab->list, aLEN (tab->files));
d154 7
a160 7
		char *s = vsncpy (NULL, 0, sv (tab->files[x]));
		tab->list = vaset (tab->list, x, s);
		if (tab->type[x] == F_DIR) {
			  tab->list[x] = vsadd (tab->list[x], '/');
		} else if (tab->type[x] == F_EXEC) {
			  tab->list[x] = vsadd (tab->list[x], '*');
		}
d162 2
a163 2
	ldmenu (m, tab->list, which);
	insnam (bw, tab->path, tab->pattern);
d167 11
a177 11
void rmtab (TAB *tab) {
	vsrm (tab->orgpath);
	vsrm (tab->orgnam);
	varm (tab->list);
	vsrm (tab->path);
	vsrm (tab->pattern);
	varm (tab->files);
	if (tab->type) {
		free (tab->type);
	}
	free (tab);
d179 6
a184 6

/*
 * The user hit return
 */
int tabrtn (MENU * m, int cursor, TAB * tab) {
	if (tab->type[cursor] == F_DIR) {		/* Switch directories */
d187 9
a195 6
		char *e = endprt (tab->path);
		if (!strcmp (tab->files[cursor], "..") && sLEN (e) && !(e[0] == '.' && e[1] == '.' && (!e[2] || e[2] == '/'))) {
			tab->path = begprt (tab->path);
		} else {
			tab->path = vsncpy (NULL, 0, sv (tab->path));
			tab->path = vsncpy (sv (tab->path), sv (m->list[cursor]));
d197 5
a201 5
		vsrm (e);
		tab->pattern = vsncpy (NULL, 0, sc ("*"));
		if (treload (m, 0)) {
			msgnw (m, "Couldn't read directory ");
			vsrm (tab->pattern);
d203 1
a203 1
			vsrm (tab->path);
d207 2
a208 2
			vsrm (orgpattern);
			vsrm (orgpath);
d211 1
a211 1
	} else {			/* Select name */
d213 3
a215 2
		insnam (bw, tab->path, tab->files[cursor]);
		rmtab (tab);
d218 1
a218 1
		wabort (m->parent);
d222 5
a226 5

/*
 * The user hit backspace
 */
int tabbacks (MENU * m, int cursor, TAB * tab) {
d229 1
a229 1
	char *e = endprt (tab->path);
d231 5
a235 5
	if (sLEN (e)) {
		tab->path = begprt (tab->path);
	} else {
		  wabort (m->parent);
		  return 0;
d237 2
a238 2
	vsrm (e);
	tab->pattern = vsncpy (NULL, 0, sc ("*"));
d240 3
a242 3
	if (treload (m, 1)) {
		msgnw (m, "Couldn't read directory ");
		vsrm (tab->pattern);
d244 1
a244 1
		vsrm (tab->path);
d248 2
a249 2
		vsrm (orgpattern);
		vsrm (orgpath);
d253 5
a257 3
int tababrt (BW * bw, int cursor, TAB * tab) {
	insnam (bw, tab->orgpath, tab->orgnam);
	rmtab (tab);
d260 5
a264 4
/*
 * Create a tab window
 */
int cmplt (BW * bw) {
d271 2
a272 2
	tab = (TAB *) malloc (sizeof (TAB));
	new = mkmenu (bw, NULL, tabrtn, tababrt, tabbacks, 0, tab, NULL);
d274 1
a274 1
		free (tab);
d284 20
a303 20
	p = pdup (bw->cursor);
	p_goto_bol (p);
	q = pdup (bw->cursor);
	p_goto_eol (q);
	tmp = brvs (p, (int) (q->byte - p->byte));
	cline = parsens (tmp, &a, &b);
	vsrm (tmp);
	prm (p);
	prm (q);

	tab->pattern = namprt (cline);
	tab->path = dirprt (cline);
	tab->orgnam = vsncpy (NULL, 0, sv (tab->pattern));
	tab->orgpath = vsncpy (NULL, 0, sv (tab->path));
	tab->pattern = vsadd (tab->pattern, '*');
	vsrm (cline);

	if (treload (new, 0)) {
		wabort (new->parent);
		ttputc (7);
d305 12
a316 3
	} else if (sLEN (tab->files) == 1) {
		return tabrtn (new, 0, tab);
	} else if (smode || isreg (tab->orgnam)) {
a317 8
	} else {
		  char *com = mcomplete (new);
		  vsrm (tab->orgnam);
		  tab->orgnam = com;
		  wabort (new->parent);
		  smode = 2;
		  ttputc (7);
		  return 0;
@


1.4
log
@changed as of joe-2.9.5
@
text
@a25 1

d28 1
a28 1
extern int smode;			// ???
d31 4
a34 4
	char *path;			// current directory
	char *pattern;			// search pattern
	int len;			// no. entries in files
	char **files;			// array of file names
d36 1
a36 1
	char *type;			// file type array
d42 2
a43 2
#define F_DIR		1		// type codes for file type array
#define F_NORMAL	2		 
d61 2
a62 1
	if (chpwd (tab->path))
d64 1
d78 1
a78 1
	if (tab->type)
d80 1
d86 1
a86 1
		if (buf.st_ino == prv)
d88 2
a89 1
		if ((buf.st_mode & S_IFMT) == S_IFDIR)
d91 4
a94 4
		else if (buf.st_mode & (0100 | 0010 | 0001))
			tab->type[a] = F_EXEC;
		else
			tab->type[a] = F_NORMAL;
d96 1
d103 2
a104 2
	pbol (p);
	peol (bw->cursor);
d107 4
a110 3
		binsm (bw->cursor, sv (path)), peol (bw->cursor);
		if (path[sLEN (path) - 1] != '/')
			binsm (bw->cursor, sc ("/")), peol (bw->cursor);
d113 1
a113 1
	peol (bw->cursor);
d132 1
a132 1
	W *w = m->parent;		/* Window menu is in */
d138 1
a138 1
	if ((which = get_entries (tab, tab->prv)) < 0)
d140 2
a141 1
	if (tab->path && tab->path[0])
d143 1
a143 1
	else
d145 1
d147 1
a147 1
	if (!flg)
d149 1
d156 4
a159 4
		if (tab->type[x] == F_DIR)
			tab->list[x] = vsadd (tab->list[x], '/');
		else if (tab->type[x] == F_EXEC)
			tab->list[x] = vsadd (tab->list[x], '*');
d161 1
d174 1
a174 1
	if (tab->type)
d176 1
d179 6
a184 5
/*****************************************************************************/
/****************** The user hit return **************************************/
/*****************************************************************************/
int tabrtn (MENU *m, int cursor, TAB *tab) {
	if (tab->type[cursor] == F_DIR) {	/* Switch directories */
d188 1
a188 1
		if (!strcmp (tab->files[cursor], "..") && sLEN (e) && !(e[0] == '.' && e[1] == '.' && (!e[2] || e[2] == '/')))
d190 1
a190 1
		else {
d192 1
a192 1
	  		tab->path = vsncpy (sv (tab->path), sv (m->list[cursor]));
d208 1
a208 1
	} else {				/* Select name */
d218 5
a222 4
/*****************************************************************************/
/****************** The user hit backspace ***********************************/
/*****************************************************************************/
int tabbacks (MENU *m, int cursor, TAB *tab) {
d227 1
a227 1
	if (sLEN (e))
d229 3
a231 3
	else {
		wabort (m->parent);
		return 0;
d249 1
a249 2
/*****************************************************************************/
int tababrt (BW *bw, int cursor, TAB *tab) {
d254 4
a257 4
/*****************************************************************************/
/****************** Create a tab window **************************************/
/*****************************************************************************/
int cmplt (BW *bw) {
d278 1
a278 1
	pbol (p);
d280 1
a280 1
	peol (q);
d298 1
a298 1
	} else if (sLEN (tab->files) == 1)
d300 1
a300 9
	else if (smode || isreg (tab->orgnam))
		return 0;
	else {
		char *com = mcomplete (new);
		vsrm (tab->orgnam);
		tab->orgnam = com;
		wabort (new->parent);
		smode = 2;
		ttputc (7);
d302 8
@


1.3
log
@changed as of joe-2.9.4
@
text
@a19 1
#include "zstr.h"
@


1.2
log
@changed as of joe-2.9.2
@
text
@d8 2
d26 1
a26 1
#include "tab.h"
d30 1
a30 14
extern int smode;

struct tab
 {
 char *path;	/* Current directory */
 char *pattern;	/* Search pattern */
 int len;	/* No. entries in files */
 char **files;	/* Array of file names */
 char **list;
 char *type;	/* File type array */
 int prv;
 char *orgpath;
 char *orgnam;
 };
d32 11
a42 1
/* Type codes for file type array */
d44 2
a45 2
#define F_DIR		1
#define F_NORMAL	2
d58 55
a112 55
static int get_entries(tab,prv)
TAB *tab;
 {
 int a;
 int which=0;
 char *oldpwd=pwd();
 char **files;
 if(chpwd(tab->path)) return -1;
 files=(char **)rexpnd(tab->pattern);
 if(!files)
  {
  chpwd(oldpwd);
  return -1;
  }
 if(!aLEN(files))
  {
  chpwd(oldpwd);
  return -1;
  }
 tab->len=aLEN(files);
 varm(tab->files); tab->files=files;
 vasort(files,tab->len);
 if(tab->type) free(tab->type);
 tab->type=(char *)malloc(tab->len);
 for(a=0;a!=tab->len;a++)
  {
  struct stat buf;
  mset(&buf,0,sizeof(struct stat));
  stat(files[a],&buf);
  if(buf.st_ino==prv) which=a;
  if((buf.st_mode&S_IFMT)==S_IFDIR) tab->type[a]=F_DIR;
  else if(buf.st_mode&(0100|0010|0001)) tab->type[a]=F_EXEC;
  else tab->type[a]=F_NORMAL;
  }
 chpwd(oldpwd);
 return which;
 }

void insnam(bw,path,nam)
BW *bw;
char *path, *nam;
 {
 P *p=pdup(bw->cursor); pbol(p);
 peol(bw->cursor);
 bdel(p,bw->cursor);
 if(sLEN(path))
  {
  binsm(bw->cursor,sv(path)), peol(bw->cursor);
  if(path[sLEN(path)-1]!='/')
   binsm(bw->cursor,sc("/")), peol(bw->cursor);
  }
 binsm(bw->cursor,sv(nam)); peol(bw->cursor);
 prm(p);
 bw->cursor->xcol=piscol(bw->cursor);
 }
d126 176
a301 192
int treload(m,flg)
MENU *m;
 {
 TAB *tab=(TAB *)m->object;	/* The menu */
 W *w=m->parent;		/* Window menu is in */
 BW *bw=(BW *)w->win->object;	/* The prompt window */
 int x;
 int which;
 struct stat buf;

 if((which=get_entries(tab,tab->prv))<0) return -1;
 if(tab->path && tab->path[0]) stat(tab->path,&buf);
 else stat(".",&buf);
 tab->prv=buf.st_ino;
 if(!flg) which=0;

 tab->list=vatrunc(tab->list,aLEN(tab->files));

 for(x=0;tab->files[x];++x)
  {
  char *s=vsncpy(NULL,0,sv(tab->files[x]));
  tab->list=vaset(tab->list,x,s);
  if(tab->type[x]==F_DIR)
   tab->list[x]=vsadd(tab->list[x],'/');
  else if(tab->type[x]==F_EXEC)
   tab->list[x]=vsadd(tab->list[x],'*');
  }
 ldmenu(m,tab->list,which);
 insnam(bw,tab->path,tab->pattern);
 return 0;
 }
 
void rmtab(tab)
TAB *tab;
 {
 vsrm(tab->orgpath);
 vsrm(tab->orgnam);
 varm(tab->list);
 vsrm(tab->path);
 vsrm(tab->pattern);
 varm(tab->files);
 if(tab->type) free(tab->type);
 free(tab);
 }

/* The user hit return */

int tabrtn(m,cursor,tab)
MENU *m;
TAB *tab;
 {
 if(tab->type[cursor]==F_DIR)
  { /* Switch directories */
  char *orgpath=tab->path;
  char *orgpattern=tab->pattern;
  char *e=endprt(tab->path);
  if(!strcmp(tab->files[cursor],"..") && sLEN(e) &&
     !(e[0]=='.' && e[1]=='.' && (!e[2] || e[2]=='/')))
   tab->path=begprt(tab->path);
  else
   {
   tab->path=vsncpy(NULL,0,sv(tab->path));
   tab->path=vsncpy(sv(tab->path),sv(m->list[cursor]));
   }
  vsrm(e);
  tab->pattern=vsncpy(NULL,0,sc("*"));
  if(treload(m,0))
   {
   msgnw(m,"Couldn't read directory ");
   vsrm(tab->pattern); tab->pattern=orgpattern;
   vsrm(tab->path); tab->path=orgpath;
   return -1;
   }
  else
   {
   vsrm(orgpattern);
   vsrm(orgpath);
   return 0;
   }
  }
 else
  { /* Select name */
  BW *bw=m->parent->win->object;
  insnam(bw,tab->path,tab->files[cursor]);
  rmtab(tab);
  m->object=0; m->abrt=0;
  wabort(m->parent);
  return 0;
  }
 }

/* The user hit backspace */

int tabbacks(m,cursor,tab)
MENU *m;
TAB *tab;
 {
 char *orgpath=tab->path;
 char *orgpattern=tab->pattern;
 char *e=endprt(tab->path);
 if(sLEN(e)) tab->path=begprt(tab->path);
 else
  {
  wabort(m->parent);
  return 0;
  }
 vsrm(e);
 tab->pattern=vsncpy(NULL,0,sc("*"));

 if(treload(m,1))
  {
  msgnw(m,"Couldn't read directory ");
  vsrm(tab->pattern); tab->pattern=orgpattern;
  vsrm(tab->path); tab->path=orgpath;
  return -1;
  }
 else
  {
  vsrm(orgpattern);
  vsrm(orgpath);
  return 0;
  }
 }

int tababrt(bw,cursor,tab)
BW *bw;
TAB *tab;
 {
 insnam(bw,tab->orgpath,tab->orgnam);
 rmtab(tab);
 return -1;
 }

/* Create a tab window */

int cmplt(bw)
BW *bw;
 {
 MENU *new;
 TAB *tab;
 P *p, *q;
 char *cline, *tmp;
 long a,b;

 tab=(TAB *)malloc(sizeof(TAB));
 new=mkmenu(bw,NULL,tabrtn,tababrt,tabbacks,0,tab,NULL);
 if(!new)
  {
  free(tab);
  return -1;
  }

 tab->files=0;
 tab->type=0;
 tab->list=0;
 tab->prv=0;
 tab->len=0;

 p=pdup(bw->cursor); pbol(p);
 q=pdup(bw->cursor); peol(q);
 tmp=brvs(p,(int)(q->byte-p->byte));
 cline=parsens(tmp,&a,&b);
 vsrm(tmp);
 prm(p); prm(q);

 tab->pattern=namprt(cline);
 tab->path=dirprt(cline);
 tab->orgnam=vsncpy(NULL,0,sv(tab->pattern));
 tab->orgpath=vsncpy(NULL,0,sv(tab->path));
 tab->pattern=vsadd(tab->pattern,'*');
 vsrm(cline);

 if(treload(new,0))
  {
  wabort(new->parent);
  ttputc(7);
  return -1;
  }
 else
  if(sLEN(tab->files)==1) return tabrtn(new,0,tab);
  else if(smode || isreg(tab->orgnam)) return 0;
  else
   {
   char *com=mcomplete(new);
   vsrm(tab->orgnam);
   tab->orgnam=com;
   wabort(new->parent);
   smode=2;
   ttputc(7);
   return 0;
   }
 }
@


1.1
log
@Initial revision
@
text
@d1 3
a3 2
/* File selection menu
   Copyright (C) 1992 Joseph H. Allen
d5 2
a6 14
This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */ 
d11 1
d183 1
a183 1
  if(!zcmp(tab->files[cursor],"..") && sLEN(e) &&
@


1.1.1.1
log
@First import of joe sources to cvs (as of joe-2.9)
@
text
@@
