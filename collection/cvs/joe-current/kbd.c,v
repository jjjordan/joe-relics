head	1.29;
access;
symbols
	joe_3_5:1.24
	joe-3_4:1.22
	help:1.22
	joe_3_1:1.13
	joe_3_0:1.13
	joe_2_9_8:1.12
	joe_2_9_8_pre1:1.8
	joe_2_9_7:1.5
	joe_2_9_7_pre3:1.5
	joe_2_9_7_pre2:1.4
	joe_2_9_6:1.3
	joe_2_9_5:1.2
	joe_2_9_4:1.2
	joe_2_9_2:1.2
	joe_2_9_1:1.1.1.1
	joe_2_9:1.1.1.1
	joe_source:1.1.1;
locks; strict;
comment	@ * @;


1.29
date	2008.11.02.20.20.41;	author jhallen;	state Exp;
branches;
next	1.28;

1.28
date	2007.06.04.01.13.32;	author jhallen;	state Exp;
branches;
next	1.27;

1.27
date	2007.01.29.14.26.23;	author jhallen;	state Exp;
branches;
next	1.26;

1.26
date	2007.01.23.04.16.50;	author jhallen;	state Exp;
branches;
next	1.25;

1.25
date	2006.07.20.20.56.17;	author jhallen;	state Exp;
branches;
next	1.24;

1.24
date	2006.07.19.00.27.12;	author jhallen;	state Exp;
branches;
next	1.23;

1.23
date	2006.07.18.23.31.54;	author jhallen;	state Exp;
branches;
next	1.22;

1.22
date	2006.05.22.04.15.41;	author jhallen;	state Exp;
branches;
next	1.21;

1.21
date	2006.05.14.17.14.04;	author jhallen;	state Exp;
branches;
next	1.20;

1.20
date	2005.04.24.04.30.50;	author jhallen;	state Exp;
branches;
next	1.19;

1.19
date	2005.03.22.03.22.37;	author jhallen;	state Exp;
branches;
next	1.18;

1.18
date	2005.03.21.02.15.55;	author jhallen;	state Exp;
branches;
next	1.17;

1.17
date	2005.03.16.21.37.35;	author jhallen;	state Exp;
branches;
next	1.16;

1.16
date	2005.03.02.03.31.35;	author jhallen;	state Exp;
branches;
next	1.15;

1.15
date	2005.02.27.05.29.32;	author jhallen;	state Exp;
branches;
next	1.14;

1.14
date	2004.07.08.19.09.53;	author sonic_amiga;	state Exp;
branches;
next	1.13;

1.13
date	2004.04.12.13.58.27;	author jhallen;	state Exp;
branches;
next	1.12;

1.12
date	2003.03.04.17.38.58;	author vsamel;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.20.07.18.19;	author vsamel;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.02.10.46.45;	author vsamel;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.10.12.15.16;	author vsamel;	state Exp;
branches;
next	1.8;

1.8
date	2001.12.10.14.01.27;	author vsamel;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.29.14.43.34;	author vsamel;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.27.13.27.31;	author vsamel;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.29.15.28.38;	author vsamel;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.29.14.39.51;	author vsamel;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.11.04.38.36;	author polesapart;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.11.03.57.30;	author polesapart;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.11.03.39.53;	author polesapart;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.11.03.39.53;	author polesapart;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Fix more compiler warnings.  Update builtins.c
@
text
@/*
 *	Key-map handler
 *	Copyright
 *		(C) 1992 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 */
#include "types.h"

/* Create a KBD */

KBD *mkkbd(KMAP *kmap)
{
	KBD *kbd = (KBD *) joe_malloc(sizeof(KBD));

	kbd->topmap = kmap;
	kbd->curmap = kmap;
	kbd->x = 0;
	return kbd;
}

/* Eliminate a KBD */

void rmkbd(KBD *k)
{
	joe_free(k);
}

/* Process next key for KBD */

void *dokey(KBD *kbd, int n)
{
	void *bind = NULL;

	/* If we were passed a negative character */
	if (n < 0)
		n += 256;

	/* If we're starting from scratch, clear the keymap sequence buffer */
	if (kbd->curmap == kbd->topmap)
		kbd->x = 0;

	if (kbd->curmap->keys[n].k == 1) {	/* A prefix key was found */
		kbd->seq[kbd->x++] = n;
		kbd->curmap = kbd->curmap->keys[n].value.submap;
	} else {		/* A complete key sequence was entered or an unbound key was found */
		bind = kbd->curmap->keys[n].value.bind;
/*  kbd->seq[kbd->x++]=n; */
		kbd->x = 0;
		kbd->curmap = kbd->topmap;
	}
	return bind;
}

/* Return key code for key name or -1 for syntax error */

static int keyval(unsigned char *s)
{
	if (s[0] == '^' && s[1] && !s[2])
		switch (s[1])
		{
		case '?':
			return 127;
		case '#':
			return 0x9B;
		default:
			return s[1] & 0x1F;
		}
	else if ((s[0] == 'S' || s[0] == 's')
		 && (s[1] == 'P' || s[1] == 'p') && !s[2])
		return ' ';
	else if((s[0]=='M'||s[0]=='m') && s[1]) {
		if(!zcmp(s,USTR "MDOWN")) return KEY_MDOWN;
		else if(!zcmp(s,USTR "MWDOWN")) return KEY_MWDOWN;
		else if(!zcmp(s,USTR "MWUP")) return KEY_MWUP;
		else if(!zcmp(s,USTR "MUP")) return KEY_MUP;
		else if(!zcmp(s,USTR "MDRAG")) return KEY_MDRAG;
		else if(!zcmp(s,USTR "M2DOWN")) return KEY_M2DOWN;
		else if(!zcmp(s,USTR "M2UP")) return KEY_M2UP;
		else if(!zcmp(s,USTR "M2DRAG")) return KEY_M2DRAG;
		else if(!zcmp(s,USTR "M3DOWN")) return KEY_M3DOWN;
		else if(!zcmp(s,USTR "M3UP")) return KEY_M3UP;
		else if(!zcmp(s,USTR "M3DRAG")) return KEY_M3DRAG;
		else return s[0];
	} else if (s[1] || !s[0])
		return -1;
	else
		return (unsigned char) s[0];
}

/* Create an empty keymap */

KMAP *mkkmap(void)
{
	KMAP *kmap = (KMAP *) joe_calloc(sizeof(KMAP), 1);

	return kmap;
}

/* Eliminate a keymap */

void rmkmap(KMAP *kmap)
{
	int x;

	if (!kmap)
		return;
	for (x = 0; x != KEYS; ++x)
		if (kmap->keys[x].k == 1)
			rmkmap(kmap->keys[x].value.submap);
	joe_free(kmap);
}

/* Parse a range */

static unsigned char *range(unsigned char *seq, int *vv, int *ww)
{
	unsigned char c;
	int x, v, w;

	for (x = 0; seq[x] && seq[x] != ' '; ++x) ;	/* Skip to a space */
	c = seq[x];
	seq[x] = 0;		/* Zero terminate the string */
	v = keyval(seq);	/* Get key */
	w = v;
	if (w < 0)
		return NULL;
	seq[x] = c;		/* Restore the space or 0 */
	for (seq += x; *seq == ' '; ++seq) ;	/* Skip over spaces */

	/* Check for 'TO ' */
	if ((seq[0] == 'T' || seq[0] == 't') && (seq[1] == 'O' || seq[1] == 'o') && seq[2] == ' ') {
		for (seq += 2; *seq == ' '; ++seq) ;	/* Skip over spaces */
		for (x = 0; seq[x] && seq[x] != ' '; ++x) ;	/* Skip to space */
		c = seq[x];
		seq[x] = 0;	/* Zero terminate the string */
		w = keyval(seq);	/* Get key */
		if (w < 0)
			return NULL;
		seq[x] = c;	/* Restore the space or 0 */
		for (seq += x; *seq == ' '; ++seq) ;	/* Skip over spaces */
	}

	if (v > w)
		return NULL;

	*vv = v;
	*ww = w;
	return seq;
}

/* Add a binding to a keymap */

static KMAP *kbuild(CAP *cap, KMAP *kmap, unsigned char *seq, void *bind, int *err, unsigned char *capseq, int seql)
{
	int v, w;

	if (!seql && seq[0] == '.' && seq[1]) {
		int x, c;
		unsigned char *s;

		for (x = 0; seq[x] && seq[x] != ' '; ++x) ;
		c = seq[x];
		seq[x] = 0;
#ifdef __MSDOS__
		if (!zcmp(seq + 1, "ku")) {
			capseq = "\0H";
			seql = 2;
		} else if (!zcmp(seq + 1, USTR "kd")) {
			capseq = "\0P";
			seql = 2;
		} else if (!zcmp(seq + 1, USTR "kl")) {
			capseq = "\0K";
			seql = 2;
		} else if (!zcmp(seq + 1, USTR "kr")) {
			capseq = "\0M";
			seql = 2;
		} else if (!zcmp(seq + 1, USTR "kI")) {
			capseq = "\0R";
			seql = 2;
		} else if (!zcmp(seq + 1, USTR "kD")) {
			capseq = "\0S";
			seql = 2;
		} else if (!zcmp(seq + 1, USTR "kh")) {
			capseq = "\0G";
			seql = 2;
		} else if (!zcmp(seq + 1, USTR "kH")) {
			capseq = "\0O";
			seql = 2;
		} else if (!zcmp(seq + 1, USTR "kP")) {
			capseq = "\0I";
			seql = 2;
		} else if (!zcmp(seq + 1, USTR "kN")) {
			capseq = "\0Q";
			seql = 2;
		} else if (!zcmp(seq + 1, USTR "k1")) {
			capseq = "\0;";
			seql = 2;
		} else if (!zcmp(seq + 1, USTR "k2")) {
			capseq = "\0<";
			seql = 2;
		} else if (!zcmp(seq + 1, USTR "k3")) {
			capseq = "\0=";
			seql = 2;
		} else if (!zcmp(seq + 1, USTR "k4")) {
			capseq = "\0>";
			seql = 2;
		} else if (!zcmp(seq + 1, USTR "k5")) {
			capseq = "\0?";
			seql = 2;
		} else if (!zcmp(seq + 1, USTR "k6")) {
			capseq = "\0@@";
			seql = 2;
		} else if (!zcmp(seq + 1, USTR "k7")) {
			capseq = "\0A";
			seql = 2;
		} else if (!zcmp(seq + 1, USTR "k8")) {
			capseq = "\0B";
			seql = 2;
		} else if (!zcmp(seq + 1, USTR "k9")) {
			capseq = "\0C";
			seql = 2;
		} else if (!zcmp(seq + 1, USTR "k0")) {
			capseq = "\0D";
			seql = 2;
		}
		seq[x] = c;
		if (seql) {
			for (seq += x; *seq == ' '; ++seq) ;
		}
#else
		s = jgetstr(cap, seq + 1);
		seq[x] = c;
		if (s && (s = tcompile(cap, s, 0, 0, 0, 0))
		    && (vslen(s) > 1 || (signed char)s[0] < 0)) {
			capseq = s;
			seql = vslen(s);
			for (seq += x; *seq == ' '; ++seq) ;
		}
#endif
		else {
			*err = -2;
			return kmap;
		}
	}

	if (seql) {
		v = w = (unsigned char) *capseq++;
		--seql;
	} else {
		seq = range(seq, &v, &w);
		if (!seq) {
			*err = -1;
			return kmap;
		}
	}

	if (!kmap)
		kmap = mkkmap();	/* Create new keymap if 'kmap' was NULL */

	/* Make bindings between v and w */
	while (v <= w) {
		if (*seq || seql) {
			if (kmap->keys[v].k == 0)
				kmap->keys[v].value.submap = NULL;
			kmap->keys[v].k = 1;
			kmap->keys[v].value.submap = kbuild(cap, kmap->keys[v].value.bind, seq, bind, err, capseq, seql);
		} else {
			if (kmap->keys[v].k == 1)
				rmkmap(kmap->keys[v].value.submap);
			kmap->keys[v].k = 0;
			kmap->keys[v].value.bind =
			    /* This bit of code sticks the key value in the macro */
			    (v == w ? macstk(bind, v) : dupmacro(macstk(bind, v)));
		}
		++v;
	}
	return kmap;
}

int kadd(CAP *cap, KMAP *kmap, unsigned char *seq, void *bind)
{
	int err = 0;

	kbuild(cap, kmap, seq, bind, &err, NULL, 0);
	return err;
}

void kcpy(KMAP *dest, KMAP *src)
{
	int x;

	for (x = 0; x != KEYS; ++x)
		if (src->keys[x].k == 1) {
			if (dest->keys[x].k != 1) {
				dest->keys[x].k = 1;
				dest->keys[x].value.submap = mkkmap();
			}
			kcpy(dest->keys[x].value.submap, src->keys[x].value.submap);
		} else if (src->keys[x].k == 0 && src->keys[x].value.bind) {
			if (dest->keys[x].k == 1)
				rmkmap(dest->keys[x].value.submap);
			dest->keys[x].value.bind = src->keys[x].value.bind;
			dest->keys[x].k = 0;
		}
}

/* Remove a binding from a keymap */

int kdel(KMAP *kmap, unsigned char *seq)
{
	int err = 1;
	int v, w;

	seq = range(seq, &v, &w);
	if (!seq)
		return -1;

	/* Clear bindings between v and w */
	while (v <= w) {
		if (*seq) {
			if (kmap->keys[v].k == 1) {
				int r = kdel(kmap->keys[v].value.submap, seq);

				if (err != -1)
					err = r;
			}
		} else {
			if (kmap->keys[v].k == 1)
				rmkmap(kmap->keys[v].value.submap);
			kmap->keys[v].k = 0;
			kmap->keys[v].value.bind = NULL;
			if (err != -1)
				err = 0;
		}
		++v;
	}

	return err;
}

/* JM */

B *keymaphist=0;

static unsigned char **keymap_list;

static int keymap_cmplt(BW *bw)
{
	if (!keymap_list) {
		keymap_list = get_keymap_list();
		vaperm(keymap_list);
	}

	if (!keymap_list) {
		ttputc(7);
		return 0;
	}

	return simple_cmplt(bw,keymap_list);
}

int ukeymap(BASE *bw)
{
	unsigned char *s = ask(bw->parent, joe_gettext(_("Change keymap: ")),
	&keymaphist,USTR "keymap",keymap_cmplt,locale_map,0,0,NULL);
	if (s) {
		KMAP *k=ngetcontext(s);
		if(!k) {
			msgnw(bw->parent,joe_gettext(_("No such keymap")));
			return -1;
		}
		rmkbd(bw->parent->kbd);
		bw->parent->kbd=mkkbd(k);
		return 0;
	} else {
		return -1;
	}
}
@


1.28
log
@More work on coroutine refactoring.
@
text
@a364 1
	KMAP *k;
@


1.27
log
@more refactoring
@
text
@a369 1
		/* if(notify) *notify=1; */
@


1.26
log
@fix tags.
switch more wmkpw to ask
@
text
@d367 1
a367 1
	&keymaphist,USTR "keymap",keymap_cmplt,NULL,locale_map,0,0,NULL);
@


1.25
log
@semiautomatic variables
@
text
@a345 13
int dokeymap(BW *bw,unsigned char *s,void *object,int *notify)
{
	KMAP *k=ngetcontext(s);
	if(notify) *notify=1;
	if(!k) {
		msgnw(bw->parent,joe_gettext(_("No such keymap")));
		return -1;
	}
	rmkbd(bw->parent->kbd);
	bw->parent->kbd=mkkbd(k);
	return 0;
}

d365 16
a380 2
	if (wmkpw(bw->parent,joe_gettext(_("Change keymap: ")),&keymaphist,dokeymap,USTR "keymap",NULL,keymap_cmplt,NULL,NULL,locale_map,0)) return 0;
	else return -1;
@


1.24
log
@UC -> USTR
@
text
@d235 1
a235 1
		    && (sLEN(s) > 1 || (signed char)s[0] < 0)) {
d237 1
a237 1
			seql = sLEN(s);
a348 1
	vsrm(s);
d363 1
a363 5
	/* Reload every time: we should really check date of tags file...
	  if (tag_word_list)
	  	varm(tag_word_list); */

	if (!keymap_list)
d365 2
@


1.23
log
@change US to UC
@
text
@d73 11
a83 11
		if(!zcmp(s,UC "MDOWN")) return KEY_MDOWN;
		else if(!zcmp(s,UC "MWDOWN")) return KEY_MWDOWN;
		else if(!zcmp(s,UC "MWUP")) return KEY_MWUP;
		else if(!zcmp(s,UC "MUP")) return KEY_MUP;
		else if(!zcmp(s,UC "MDRAG")) return KEY_MDRAG;
		else if(!zcmp(s,UC "M2DOWN")) return KEY_M2DOWN;
		else if(!zcmp(s,UC "M2UP")) return KEY_M2UP;
		else if(!zcmp(s,UC "M2DRAG")) return KEY_M2DRAG;
		else if(!zcmp(s,UC "M3DOWN")) return KEY_M3DOWN;
		else if(!zcmp(s,UC "M3UP")) return KEY_M3UP;
		else if(!zcmp(s,UC "M3DRAG")) return KEY_M3DRAG;
d169 1
a169 1
		} else if (!zcmp(seq + 1, UC "kd")) {
d172 1
a172 1
		} else if (!zcmp(seq + 1, UC "kl")) {
d175 1
a175 1
		} else if (!zcmp(seq + 1, UC "kr")) {
d178 1
a178 1
		} else if (!zcmp(seq + 1, UC "kI")) {
d181 1
a181 1
		} else if (!zcmp(seq + 1, UC "kD")) {
d184 1
a184 1
		} else if (!zcmp(seq + 1, UC "kh")) {
d187 1
a187 1
		} else if (!zcmp(seq + 1, UC "kH")) {
d190 1
a190 1
		} else if (!zcmp(seq + 1, UC "kP")) {
d193 1
a193 1
		} else if (!zcmp(seq + 1, UC "kN")) {
d196 1
a196 1
		} else if (!zcmp(seq + 1, UC "k1")) {
d199 1
a199 1
		} else if (!zcmp(seq + 1, UC "k2")) {
d202 1
a202 1
		} else if (!zcmp(seq + 1, UC "k3")) {
d205 1
a205 1
		} else if (!zcmp(seq + 1, UC "k4")) {
d208 1
a208 1
		} else if (!zcmp(seq + 1, UC "k5")) {
d211 1
a211 1
		} else if (!zcmp(seq + 1, UC "k6")) {
d214 1
a214 1
		} else if (!zcmp(seq + 1, UC "k7")) {
d217 1
a217 1
		} else if (!zcmp(seq + 1, UC "k8")) {
d220 1
a220 1
		} else if (!zcmp(seq + 1, UC "k9")) {
d223 1
a223 1
		} else if (!zcmp(seq + 1, UC "k0")) {
d381 1
a381 1
	if (wmkpw(bw->parent,joe_gettext(_("Change keymap: ")),&keymaphist,dokeymap,UC "keymap",NULL,keymap_cmplt,NULL,NULL,locale_map,0)) return 0;
@


1.22
log
@gettext()
@
text
@d73 11
a83 11
		if(!zcmp(s,US "MDOWN")) return KEY_MDOWN;
		else if(!zcmp(s,US "MWDOWN")) return KEY_MWDOWN;
		else if(!zcmp(s,US "MWUP")) return KEY_MWUP;
		else if(!zcmp(s,US "MUP")) return KEY_MUP;
		else if(!zcmp(s,US "MDRAG")) return KEY_MDRAG;
		else if(!zcmp(s,US "M2DOWN")) return KEY_M2DOWN;
		else if(!zcmp(s,US "M2UP")) return KEY_M2UP;
		else if(!zcmp(s,US "M2DRAG")) return KEY_M2DRAG;
		else if(!zcmp(s,US "M3DOWN")) return KEY_M3DOWN;
		else if(!zcmp(s,US "M3UP")) return KEY_M3UP;
		else if(!zcmp(s,US "M3DRAG")) return KEY_M3DRAG;
d169 1
a169 1
		} else if (!zcmp(seq + 1, US "kd")) {
d172 1
a172 1
		} else if (!zcmp(seq + 1, US "kl")) {
d175 1
a175 1
		} else if (!zcmp(seq + 1, US "kr")) {
d178 1
a178 1
		} else if (!zcmp(seq + 1, US "kI")) {
d181 1
a181 1
		} else if (!zcmp(seq + 1, US "kD")) {
d184 1
a184 1
		} else if (!zcmp(seq + 1, US "kh")) {
d187 1
a187 1
		} else if (!zcmp(seq + 1, US "kH")) {
d190 1
a190 1
		} else if (!zcmp(seq + 1, US "kP")) {
d193 1
a193 1
		} else if (!zcmp(seq + 1, US "kN")) {
d196 1
a196 1
		} else if (!zcmp(seq + 1, US "k1")) {
d199 1
a199 1
		} else if (!zcmp(seq + 1, US "k2")) {
d202 1
a202 1
		} else if (!zcmp(seq + 1, US "k3")) {
d205 1
a205 1
		} else if (!zcmp(seq + 1, US "k4")) {
d208 1
a208 1
		} else if (!zcmp(seq + 1, US "k5")) {
d211 1
a211 1
		} else if (!zcmp(seq + 1, US "k6")) {
d214 1
a214 1
		} else if (!zcmp(seq + 1, US "k7")) {
d217 1
a217 1
		} else if (!zcmp(seq + 1, US "k8")) {
d220 1
a220 1
		} else if (!zcmp(seq + 1, US "k9")) {
d223 1
a223 1
		} else if (!zcmp(seq + 1, US "k0")) {
d381 1
a381 1
	if (wmkpw(bw->parent,joe_gettext(_("Change keymap: ")),&keymaphist,dokeymap,US "keymap",NULL,keymap_cmplt,NULL,NULL,locale_map,0)) return 0;
@


1.21
log
@Massive check-in: rearrange header files, fix -Wall warnings.
@
text
@d352 1
a352 1
		msgnw(bw->parent,US "No such keymap");
d381 1
a381 1
	if (wmkpw(bw->parent,US "Change keymap: ",&keymaphist,dokeymap,US "keymap",NULL,keymap_cmplt,NULL,NULL,locale_map,0)) return 0;
@


1.20
log
@fix gcc-4.0.0 warnings
@
text
@a7 1
#include "config.h"
a9 11

#include "b.h"
#include "bw.h"
#include "macro.h"
#include "termcap.h"
#include "utils.h"
#include "rc.h"
#include "utf8.h"
#include "tty.h"
#include "vs.h"

d352 1
a352 1
		msgnw(bw->parent,"No such keymap");
d381 1
a381 1
	if (wmkpw(bw->parent,"Change keymap: ",&keymaphist,dokeymap,"keymap",NULL,keymap_cmplt,NULL,NULL,locale_map,0)) return 0;
@


1.19
log
@Fix bugs where doedit() was called and we expected the window to immediately
change.

Run -pedantic
@
text
@a10 1
#include <string.h>
d85 11
a95 11
		if(!strcmp(s,"MDOWN")) return KEY_MDOWN;
		else if(!strcmp(s,"MWDOWN")) return KEY_MWDOWN;
		else if(!strcmp(s,"MWUP")) return KEY_MWUP;
		else if(!strcmp(s,"MUP")) return KEY_MUP;
		else if(!strcmp(s,"MDRAG")) return KEY_MDRAG;
		else if(!strcmp(s,"M2DOWN")) return KEY_M2DOWN;
		else if(!strcmp(s,"M2UP")) return KEY_M2UP;
		else if(!strcmp(s,"M2DRAG")) return KEY_M2DRAG;
		else if(!strcmp(s,"M3DOWN")) return KEY_M3DOWN;
		else if(!strcmp(s,"M3UP")) return KEY_M3UP;
		else if(!strcmp(s,"M3DRAG")) return KEY_M3DRAG;
d178 1
a178 1
		if (!strcmp(seq + 1, "ku")) {
d181 1
a181 1
		} else if (!strcmp(seq + 1, "kd")) {
d184 1
a184 1
		} else if (!strcmp(seq + 1, "kl")) {
d187 1
a187 1
		} else if (!strcmp(seq + 1, "kr")) {
d190 1
a190 1
		} else if (!strcmp(seq + 1, "kI")) {
d193 1
a193 1
		} else if (!strcmp(seq + 1, "kD")) {
d196 1
a196 1
		} else if (!strcmp(seq + 1, "kh")) {
d199 1
a199 1
		} else if (!strcmp(seq + 1, "kH")) {
d202 1
a202 1
		} else if (!strcmp(seq + 1, "kP")) {
d205 1
a205 1
		} else if (!strcmp(seq + 1, "kN")) {
d208 1
a208 1
		} else if (!strcmp(seq + 1, "k1")) {
d211 1
a211 1
		} else if (!strcmp(seq + 1, "k2")) {
d214 1
a214 1
		} else if (!strcmp(seq + 1, "k3")) {
d217 1
a217 1
		} else if (!strcmp(seq + 1, "k4")) {
d220 1
a220 1
		} else if (!strcmp(seq + 1, "k5")) {
d223 1
a223 1
		} else if (!strcmp(seq + 1, "k6")) {
d226 1
a226 1
		} else if (!strcmp(seq + 1, "k7")) {
d229 1
a229 1
		} else if (!strcmp(seq + 1, "k8")) {
d232 1
a232 1
		} else if (!strcmp(seq + 1, "k9")) {
d235 1
a235 1
		} else if (!strcmp(seq + 1, "k0")) {
@


1.18
log
@Add wheel mouse support
@
text
@d377 3
a379 3
	// Reload every time: we should really check date of tags file...
	//if (tag_word_list)
	//	varm(tag_word_list);
@


1.17
log
@Fix ~ expansion insanity
@
text
@d87 2
@


1.16
log
@Fix keymap command.  Add name command.
@
text
@d392 1
a392 1
	if (wmkpw(bw->parent,"Change keymap: ",&keymaphist,dokeymap,"keymap",NULL,keymap_cmplt,NULL,NULL,locale_map)) return 0;
@


1.15
log
@Jesse McGrew's xterm mouse support.
@
text
@d18 3
d354 1
d363 1
a363 1
		msgnw(bw,"No such keymap");
d371 19
d392 1
a392 1
	if (wmkpw(bw,"Change keymap: ",&keymaphist,dokeymap,"keymap",NULL,NULL,NULL,NULL)) return 0;
@


1.14
log
@
AmigaOS is now supported. See "README.AMIGA" file for details
@
text
@d13 2
d82 12
a93 1
	else if (s[1] || !s[0])
d349 23
@


1.13
log
@	Added -notite global option: when set, prevents screen from
	being restored on exit.

	Added -usetabs global option: when set, uses tabs for cursor
	position update (which was the default before).  Now we don't
	use tabs by default.

        Completed change to 'unsigned char *' and elimination of
        MAXINT.  What a mess.  No warnings with gcc -pedantic.

	Fix UTF-8 bugs where cursor was not correct on scrolled screen.
@
text
@d68 3
a70 1
		if (s[1] == '?')
d72 3
a74 1
		else
d76 1
@


1.12
log
@change 0 to NULL where we're talking about pointers
@
text
@d65 1
a65 1
static int keyval(char *s)
d106 1
a106 1
static char *range(char *seq, int *vv, int *ww)
d108 1
a108 1
	char c;
d144 1
a144 1
static KMAP *kbuild(CAP *cap, KMAP *kmap, char *seq, void *bind, int *err, char *capseq, int seql)
@


1.11
log
@change type of variables holding string to unsigned char *
@
text
@d41 1
a41 1
	void *bind = 0;
d117 1
a117 1
		return 0;
d129 1
a129 1
			return 0;
d135 1
a135 1
		return 0;
d255 1
a255 1
				kmap->keys[v].value.submap = 0;
d322 1
a322 1
			kmap->keys[v].value.bind = 0;
@


1.10
log
@don't expect all archs have "char == signed char" by default
@
text
@d271 1
a271 1
int kadd(CAP *cap, KMAP *kmap, char *seq, void *bind)
d300 1
a300 1
int kdel(KMAP *kmap, char *seq)
@


1.9
log
@change "expr, expr" to "expr; expr" where appropriate (take 2)
@
text
@d150 1
a150 1
		char *s;
d225 1
a225 1
		    && (sLEN(s) > 1 || s[0] < 0)) {
@


1.8
log
@change (m|re|c)alloc() and free() into joe_(m|re|c)alloc() and joe_free()
(preparation for further error checking)
@
text
@d156 61
a216 40
		if (!strcmp(seq + 1, "ku"))
			capseq = "\0H", seql = 2;
		else if (!strcmp(seq + 1, "kd"))
			capseq = "\0P", seql = 2;
		else if (!strcmp(seq + 1, "kl"))
			capseq = "\0K", seql = 2;
		else if (!strcmp(seq + 1, "kr"))
			capseq = "\0M", seql = 2;
		else if (!strcmp(seq + 1, "kI"))
			capseq = "\0R", seql = 2;
		else if (!strcmp(seq + 1, "kD"))
			capseq = "\0S", seql = 2;
		else if (!strcmp(seq + 1, "kh"))
			capseq = "\0G", seql = 2;
		else if (!strcmp(seq + 1, "kH"))
			capseq = "\0O", seql = 2;
		else if (!strcmp(seq + 1, "kP"))
			capseq = "\0I", seql = 2;
		else if (!strcmp(seq + 1, "kN"))
			capseq = "\0Q", seql = 2;
		else if (!strcmp(seq + 1, "k1"))
			capseq = "\0;", seql = 2;
		else if (!strcmp(seq + 1, "k2"))
			capseq = "\0<", seql = 2;
		else if (!strcmp(seq + 1, "k3"))
			capseq = "\0=", seql = 2;
		else if (!strcmp(seq + 1, "k4"))
			capseq = "\0>", seql = 2;
		else if (!strcmp(seq + 1, "k5"))
			capseq = "\0?", seql = 2;
		else if (!strcmp(seq + 1, "k6"))
			capseq = "\0@@", seql = 2;
		else if (!strcmp(seq + 1, "k7"))
			capseq = "\0A", seql = 2;
		else if (!strcmp(seq + 1, "k8"))
			capseq = "\0B", seql = 2;
		else if (!strcmp(seq + 1, "k9"))
			capseq = "\0C", seql = 2;
		else if (!strcmp(seq + 1, "k0"))
			capseq = "\0D", seql = 2;
@


1.7
log
@include only headers which are needed
@
text
@a11 3
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
d15 1
d22 1
a22 1
	KBD *kbd = (KBD *) malloc(sizeof(KBD));
d34 1
a34 1
	free(k);
d85 1
a85 1
	KMAP *kmap = (KMAP *) calloc(sizeof(KMAP), 1);
d101 1
a101 1
	free(kmap);
@


1.6
log
@put struct definitions and other goodies into types.h
@
text
@a18 1
#include "kbd.h"
@


1.5
log
@version 2.9.7-pre3
@
text
@d1 7
a7 18
/* Key-map handler
   Copyright (C) 1992 Joseph H. Allen

This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */

d9 1
@


1.4
log
@take the CVS repository to version 2.9.7-pre2
@
text
@d33 1
a33 2
KBD *mkkbd(kmap)
KMAP *kmap;
d45 1
a45 2
void rmkbd(k)
KBD *k;
d52 1
a52 2
void *dokey(kbd, n)
KBD *kbd;
d78 1
a78 2
static int keyval(s)
char *s;
d96 1
a96 1
KMAP *mkkmap()
d105 1
a105 2
void rmkmap(kmap)
KMAP *kmap;
d119 1
a119 3
static char *range(seq, vv, ww)
char *seq;
int *vv, *ww;
d157 1
a157 7
static KMAP *kbuild(cap, kmap, seq, bind, err, capseq, seql)
CAP *cap;
KMAP *kmap;
char *seq;
void *bind;
int *err;
char *capseq;
d216 1
a216 1
		if (s && (s = tcompile(cap, s))
d263 1
a263 5
int kadd(cap, kmap, seq, bind)
CAP *cap;
KMAP *kmap;
char *seq;
void *bind;
d271 1
a271 2
void kcpy(dest, src)
KMAP *dest, *src;
d292 1
a292 3
int kdel(kmap, seq)
KMAP *kmap;
char *seq;
@


1.3
log
@changed as of joe-2.9.6
@
text
@d1 2
a2 3
/*
	Key-map handler
	Copyright (C) 1992 Joseph H. Allen
d4 16
a19 2
	This file is part of JOE (Joe's Own Editor)
 */
d22 4
a25 1
#include "config.h"
d33 2
a34 3
KBD *
mkkbd (kmap)
     KMAP *kmap;
d36 2
a37 1
	KBD *kbd = (KBD *) malloc (sizeof (KBD));
d46 2
a47 3
void
rmkbd (k)
     KBD *k;
d49 1
a49 1
	free (k);
d54 2
a55 3
void *
dokey (kbd, n)
     KBD *kbd;
d67 5
a71 8
	if (kbd->curmap->keys[n].k == 1)
	  {			/* A prefix key was found */
		  kbd->seq[kbd->x++] = n;
		  kbd->curmap = kbd->curmap->keys[n].value.submap;
	  }
	else
	  {			/* A complete key sequence was entered or an unbound key was found */
		  bind = kbd->curmap->keys[n].value.bind;
d73 3
a75 3
		  kbd->x = 0;
		  kbd->curmap = kbd->topmap;
	  }
d81 2
a82 3
static int
keyval (s)
     char *s;
d89 2
a90 2
	else if ((s[0] == 'S' || s[0] == 's') && (s[1] == 'P' || s[1] == 'p')
		 && !s[2])
d100 1
a100 2
KMAP *
mkkmap ()
d102 2
a103 1
	KMAP *kmap = (KMAP *) calloc (sizeof (KMAP), 1);
d109 2
a110 3
void
rmkmap (kmap)
     KMAP *kmap;
d113 1
d118 2
a119 2
			rmkmap (kmap->keys[x].value.submap);
	free (kmap);
d124 3
a126 4
static char *
range (seq, vv, ww)
     char *seq;
     int *vv, *ww;
d130 2
a131 1
	for (x = 0; seq[x] && seq[x] != ' '; ++x);	/* Skip to a space */
d134 1
a134 1
	v = keyval (seq);	/* Get key */
d139 1
a139 1
	for (seq += x; *seq == ' '; ++seq);	/* Skip over spaces */
d142 11
a152 13
	if ((seq[0] == 'T' || seq[0] == 't') &&
	    (seq[1] == 'O' || seq[1] == 'o') && seq[2] == ' ')
	  {
		  for (seq += 2; *seq == ' '; ++seq);	/* Skip over spaces */
		  for (x = 0; seq[x] && seq[x] != ' '; ++x);	/* Skip to space */
		  c = seq[x];
		  seq[x] = 0;	/* Zero terminate the string */
		  w = keyval (seq);	/* Get key */
		  if (w < 0)
			  return 0;
		  seq[x] = c;	/* Restore the space or 0 */
		  for (seq += x; *seq == ' '; ++seq);	/* Skip over spaces */
	  }
d164 7
a170 8
static KMAP *
kbuild (cap, kmap, seq, bind, err, capseq, seql)
     CAP *cap;
     KMAP *kmap;
     char *seq;
     void *bind;
     int *err;
     char *capseq;
d174 7
a180 7
	if (!seql && seq[0] == '.' && seq[1])
	  {
		  int x, c;
		  char *s;
		  for (x = 0; seq[x] && seq[x] != ' '; ++x);
		  c = seq[x];
		  seq[x] = 0;
d182 44
a225 45
		  if (!strcmp (seq + 1, "ku"))
			  capseq = "\0H", seql = 2;
		  else if (!strcmp (seq + 1, "kd"))
			  capseq = "\0P", seql = 2;
		  else if (!strcmp (seq + 1, "kl"))
			  capseq = "\0K", seql = 2;
		  else if (!strcmp (seq + 1, "kr"))
			  capseq = "\0M", seql = 2;
		  else if (!strcmp (seq + 1, "kI"))
			  capseq = "\0R", seql = 2;
		  else if (!strcmp (seq + 1, "kD"))
			  capseq = "\0S", seql = 2;
		  else if (!strcmp (seq + 1, "kh"))
			  capseq = "\0G", seql = 2;
		  else if (!strcmp (seq + 1, "kH"))
			  capseq = "\0O", seql = 2;
		  else if (!strcmp (seq + 1, "kP"))
			  capseq = "\0I", seql = 2;
		  else if (!strcmp (seq + 1, "kN"))
			  capseq = "\0Q", seql = 2;
		  else if (!strcmp (seq + 1, "k1"))
			  capseq = "\0;", seql = 2;
		  else if (!strcmp (seq + 1, "k2"))
			  capseq = "\0<", seql = 2;
		  else if (!strcmp (seq + 1, "k3"))
			  capseq = "\0=", seql = 2;
		  else if (!strcmp (seq + 1, "k4"))
			  capseq = "\0>", seql = 2;
		  else if (!strcmp (seq + 1, "k5"))
			  capseq = "\0?", seql = 2;
		  else if (!strcmp (seq + 1, "k6"))
			  capseq = "\0@@", seql = 2;
		  else if (!strcmp (seq + 1, "k7"))
			  capseq = "\0A", seql = 2;
		  else if (!strcmp (seq + 1, "k8"))
			  capseq = "\0B", seql = 2;
		  else if (!strcmp (seq + 1, "k9"))
			  capseq = "\0C", seql = 2;
		  else if (!strcmp (seq + 1, "k0"))
			  capseq = "\0D", seql = 2;
		  seq[x] = c;
		  if (seql)
		    {
			    for (seq += x; *seq == ' '; ++seq);
		    }
d227 8
a234 9
		  s = jgetstr (cap, seq + 1);
		  seq[x] = c;
		  if (s && (s = tcompile (cap, s))
		      && (sLEN (s) > 1 || s[0] < 0))
		    {
			    capseq = s;
			    seql = sLEN (s);
			    for (seq += x; *seq == ' '; ++seq);
		    }
d236 16
a251 21
		  else
		    {
			    *err = -2;
			    return kmap;
		    }
	  }

	if (seql)
	  {
		  v = w = (unsigned char) *capseq++;
		  --seql;
	  }
	else
	  {
		  seq = range (seq, &v, &w);
		  if (!seq)
		    {
			    *err = -1;
			    return kmap;
		    }
	  }
d254 1
a254 1
		kmap = mkkmap ();	/* Create new keymap if 'kmap' was NULL */
d257 16
a272 26
	while (v <= w)
	  {
		  if (*seq || seql)
		    {
			    if (kmap->keys[v].k == 0)
				    kmap->keys[v].value.submap = 0;
			    kmap->keys[v].k = 1;
			    kmap->keys[v].value.submap =
				    kbuild (cap, kmap->keys[v].value.bind,
					    seq, bind, err, capseq, seql);
		    }
		  else
		    {
			    if (kmap->keys[v].k == 1)
				    rmkmap (kmap->keys[v].value.submap);
			    kmap->keys[v].k = 0;
			    kmap->keys[v].value.bind =
				    /* This bit of code sticks the key value in the macro */
				    
				    (v ==
				     w ? macstk (bind,
						 v) : dupmacro (macstk (bind,
									v)));
		    }
		  ++v;
	  }
d276 5
a280 6
int
kadd (cap, kmap, seq, bind)
     CAP *cap;
     KMAP *kmap;
     char *seq;
     void *bind;
d283 2
a284 1
	kbuild (cap, kmap, seq, bind, &err, NULL, 0);
d288 2
a289 3
void
kcpy (dest, src)
     KMAP *dest, *src;
d292 1
d294 12
a305 17
		if (src->keys[x].k == 1)
		  {
			  if (dest->keys[x].k != 1)
			    {
				    dest->keys[x].k = 1;
				    dest->keys[x].value.submap = mkkmap ();
			    }
			  kcpy (dest->keys[x].value.submap,
				src->keys[x].value.submap);
		  }
		else if (src->keys[x].k == 0 && src->keys[x].value.bind)
		  {
			  if (dest->keys[x].k == 1)
				  rmkmap (dest->keys[x].value.submap);
			  dest->keys[x].value.bind = src->keys[x].value.bind;
			  dest->keys[x].k = 0;
		  }
d310 3
a312 4
int
kdel (kmap, seq)
     KMAP *kmap;
     char *seq;
d317 1
a317 1
	seq = range (seq, &v, &w);
d322 18
a339 24
	while (v <= w)
	  {
		  if (*seq)
		    {
			    if (kmap->keys[v].k == 1)
			      {
				      int r =
					      kdel (kmap->keys[v].value.
						    submap, seq);
				      if (err != -1)
					      err = r;
			      }
		    }
		  else
		    {
			    if (kmap->keys[v].k == 1)
				    rmkmap (kmap->keys[v].value.submap);
			    kmap->keys[v].k = 0;
			    kmap->keys[v].value.bind = 0;
			    if (err != -1)
				    err = 0;
		    }
		  ++v;
	  }
@


1.2
log
@changed as of joe-2.9.2
@
text
@d1 3
a3 2
/* Key-map handler
   Copyright (C) 1992 Joseph H. Allen
d5 2
a6 14
This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */ 
d17 10
a26 9
KBD *mkkbd(kmap)
KMAP *kmap;
 {
 KBD *kbd=(KBD *)malloc(sizeof(KBD));
 kbd->topmap=kmap;
 kbd->curmap=kmap;
 kbd->x=0;
 return kbd;
 }
d30 6
a35 5
void rmkbd(k)
KBD *k;
 {
 free(k);
 }
d39 22
a60 19
void *dokey(kbd,n)
KBD *kbd;
 {
 void *bind=0;

 /* If we were passed a negative character */
 if(n<0) n+=256;

 /* If we're starting from scratch, clear the keymap sequence buffer */
 if(kbd->curmap==kbd->topmap) kbd->x=0;

 if(kbd->curmap->keys[n].k==1)
  { /* A prefix key was found */
  kbd->seq[kbd->x++]=n;
  kbd->curmap=kbd->curmap->keys[n].value.submap;
  }
 else
  { /* A complete key sequence was entered or an unbound key was found */
  bind=kbd->curmap->keys[n].value.bind;
d62 5
a66 5
  kbd->x=0;
  kbd->curmap=kbd->topmap;
  }
 return bind;
 }
d70 17
a86 10
static int keyval(s)
char *s;
 {
 if(s[0]=='^' && s[1] && !s[2])
  if(s[1]=='?') return 127;
  else return s[1]&0x1F;
 else if((s[0]=='S'||s[0]=='s') && (s[1]=='P'||s[1]=='p') && !s[2]) return ' ';
 else if(s[1] || !s[0]) return -1;
 else return (unsigned char)s[0];
 }
d90 6
a95 5
KMAP *mkkmap()
 {
 KMAP *kmap=(KMAP *)calloc(sizeof(KMAP),1);
 return kmap;
 }
d99 12
a110 8
void rmkmap(kmap)
KMAP *kmap;
 {
 int x;
 if(!kmap) return;
 for(x=0;x!=KEYS;++x) if(kmap->keys[x].k==1) rmkmap(kmap->keys[x].value.submap);
 free(kmap);
 }
d114 39
a152 32
static char *range(seq,vv,ww)
char *seq;
int *vv, *ww;
 {
 char c;
 int x, v, w;
 for(x=0;seq[x] && seq[x]!=' ';++x);	/* Skip to a space */
 c=seq[x]; seq[x]=0;			/* Zero terminate the string */
 v=keyval(seq);				/* Get key */
 w=v;
 if(w<0) return 0;
 seq[x]=c;				/* Restore the space or 0 */
 for(seq+=x;*seq==' ';++seq);		/* Skip over spaces */

 /* Check for 'TO ' */
 if((seq[0]=='T' || seq[0]=='t') &&
    (seq[1]=='O' || seq[1]=='o') && seq[2]==' ')
  {
  for(seq+=2;*seq==' ';++seq);			/* Skip over spaces */
  for(x=0;seq[x] && seq[x]!=' ';++x);		/* Skip to space */
  c=seq[x]; seq[x]=0;				/* Zero terminate the string */
  w=keyval(seq);				/* Get key */
  if(w<0) return 0;
  seq[x]=c;					/* Restore the space or 0 */
  for(seq+=x;*seq==' ';++seq);			/* Skip over spaces */
  }

 if(v>w) return 0;

 *vv=v; *ww=w;
 return seq;
 }
d156 18
a173 16
static KMAP *kbuild(cap,kmap,seq,bind,err,capseq,seql)
CAP *cap;
KMAP *kmap;
char *seq;
void *bind;
int *err;
char *capseq;
 {
 int v, w;

 if(!seql && seq[0]=='.' && seq[1])
  {
  int x, c;
  char *s;
  for(x=0;seq[x] && seq[x]!=' ';++x);
  c=seq[x]; seq[x]=0;
d175 45
a219 25
  if(!strcmp(seq+1,"ku")) capseq="\0H", seql=2;
  else if(!strcmp(seq+1,"kd")) capseq="\0P", seql=2;
  else if(!strcmp(seq+1,"kl")) capseq="\0K", seql=2;
  else if(!strcmp(seq+1,"kr")) capseq="\0M", seql=2;
  else if(!strcmp(seq+1,"kI")) capseq="\0R", seql=2;
  else if(!strcmp(seq+1,"kD")) capseq="\0S", seql=2;
  else if(!strcmp(seq+1,"kh")) capseq="\0G", seql=2;
  else if(!strcmp(seq+1,"kH")) capseq="\0O", seql=2;
  else if(!strcmp(seq+1,"kP")) capseq="\0I", seql=2;
  else if(!strcmp(seq+1,"kN")) capseq="\0Q", seql=2;
  else if(!strcmp(seq+1,"k1")) capseq="\0;", seql=2;
  else if(!strcmp(seq+1,"k2")) capseq="\0<", seql=2;
  else if(!strcmp(seq+1,"k3")) capseq="\0=", seql=2;
  else if(!strcmp(seq+1,"k4")) capseq="\0>", seql=2;
  else if(!strcmp(seq+1,"k5")) capseq="\0?", seql=2;
  else if(!strcmp(seq+1,"k6")) capseq="\0@@", seql=2;
  else if(!strcmp(seq+1,"k7")) capseq="\0A", seql=2;
  else if(!strcmp(seq+1,"k8")) capseq="\0B", seql=2;
  else if(!strcmp(seq+1,"k9")) capseq="\0C", seql=2;
  else if(!strcmp(seq+1,"k0")) capseq="\0D", seql=2;
  seq[x]=c;
  if(seql)
   {
   for(seq+=x;*seq==' ';++seq);
   }
d221 9
a229 8
  s=jgetstr(cap,seq+1);
  seq[x]=c;
  if(s && (s=tcompile(cap,s)) && (sLEN(s)>1 || s[0]<0))
   {
   capseq=s;
   seql=sLEN(s);
   for(seq+=x;*seq==' ';++seq);
   }
d231 91
a321 78
  else
   {
   *err= -2;
   return kmap;
   }
  }

 if(seql)
  {
  v=w= (unsigned char)*capseq++;
  --seql;
  }
 else
  {
  seq=range(seq,&v,&w);
  if(!seq)
   {
   *err= -1;
   return kmap;
   }
  }

 if(!kmap) kmap=mkkmap();	/* Create new keymap if 'kmap' was NULL */

 /* Make bindings between v and w */
 while(v<=w)
  {
  if(*seq || seql)
   {
   if(kmap->keys[v].k==0) kmap->keys[v].value.submap=0;
   kmap->keys[v].k=1;
   kmap->keys[v].value.submap=kbuild(cap,kmap->keys[v].value.bind,seq,bind,err,capseq,seql);
   }
  else
   {
   if(kmap->keys[v].k==1) rmkmap(kmap->keys[v].value.submap);
   kmap->keys[v].k=0;
   kmap->keys[v].value.bind=
    /* This bit of code sticks the key value in the macro */
    (v==w?macstk(bind,v):dupmacro(macstk(bind,v)));
   }
  ++v;
  }
 return kmap;
 }

int kadd(cap,kmap,seq,bind)
CAP *cap;
KMAP *kmap;
char *seq;
void *bind;
 {
 int err=0;
 kbuild(cap,kmap,seq,bind,&err,NULL,0);
 return err;
 }

void kcpy(dest,src)
KMAP *dest, *src;
 {
 int x;
 for(x=0;x!=KEYS;++x)
  if(src->keys[x].k==1)
   {
   if(dest->keys[x].k!=1)
    {
    dest->keys[x].k=1;
    dest->keys[x].value.submap=mkkmap();
    }
   kcpy(dest->keys[x].value.submap,src->keys[x].value.submap);
   }
  else if(src->keys[x].k==0 && src->keys[x].value.bind)
   {
   if(dest->keys[x].k==1) rmkmap(dest->keys[x].value.submap);
   dest->keys[x].value.bind=src->keys[x].value.bind;
   dest->keys[x].k=0;
   }
 }
d325 37
a361 30
int kdel(kmap,seq)
KMAP *kmap;
char *seq;
 {
 int err=1;
 int v, w;

 seq=range(seq,&v,&w);
 if(!seq) return -1;

 /* Clear bindings between v and w */
 while(v<=w)
  {
  if(*seq)
   {
   if(kmap->keys[v].k==1)
    {
    int r=kdel(kmap->keys[v].value.submap,seq);
    if(err!= -1) err=r;
    }
   }
  else
   {
   if(kmap->keys[v].k==1) rmkmap(kmap->keys[v].value.submap);
   kmap->keys[v].k=0;
   kmap->keys[v].value.bind=0;
   if(err!= -1) err=0;
   }
  ++v;
  }
d363 2
a364 2
 return err;
 }
@


1.1
log
@Initial revision
@
text
@d19 1
d160 20
a179 20
  if(!zcmp(seq+1,"ku")) capseq="\0H", seql=2;
  else if(!zcmp(seq+1,"kd")) capseq="\0P", seql=2;
  else if(!zcmp(seq+1,"kl")) capseq="\0K", seql=2;
  else if(!zcmp(seq+1,"kr")) capseq="\0M", seql=2;
  else if(!zcmp(seq+1,"kI")) capseq="\0R", seql=2;
  else if(!zcmp(seq+1,"kD")) capseq="\0S", seql=2;
  else if(!zcmp(seq+1,"kh")) capseq="\0G", seql=2;
  else if(!zcmp(seq+1,"kH")) capseq="\0O", seql=2;
  else if(!zcmp(seq+1,"kP")) capseq="\0I", seql=2;
  else if(!zcmp(seq+1,"kN")) capseq="\0Q", seql=2;
  else if(!zcmp(seq+1,"k1")) capseq="\0;", seql=2;
  else if(!zcmp(seq+1,"k2")) capseq="\0<", seql=2;
  else if(!zcmp(seq+1,"k3")) capseq="\0=", seql=2;
  else if(!zcmp(seq+1,"k4")) capseq="\0>", seql=2;
  else if(!zcmp(seq+1,"k5")) capseq="\0?", seql=2;
  else if(!zcmp(seq+1,"k6")) capseq="\0@@", seql=2;
  else if(!zcmp(seq+1,"k7")) capseq="\0A", seql=2;
  else if(!zcmp(seq+1,"k8")) capseq="\0B", seql=2;
  else if(!zcmp(seq+1,"k9")) capseq="\0C", seql=2;
  else if(!zcmp(seq+1,"k0")) capseq="\0D", seql=2;
@


1.1.1.1
log
@First import of joe sources to cvs (as of joe-2.9)
@
text
@@
