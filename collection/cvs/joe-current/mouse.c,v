head	1.18;
access;
symbols
	joe_3_5:1.17
	joe-3_4:1.15
	help:1.15;
locks; strict;
comment	@ * @;


1.18
date	2008.10.31.15.05.31;	author jhallen;	state Exp;
branches;
next	1.17;

1.17
date	2006.07.19.00.27.12;	author jhallen;	state Exp;
branches;
next	1.16;

1.16
date	2006.07.18.23.31.54;	author jhallen;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.14.17.14.04;	author jhallen;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.08.03.00.57;	author jhallen;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.01.15.23.23;	author jhallen;	state Exp;
branches;
next	1.12;

1.12
date	2005.04.06.16.40.31;	author jhallen;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.06.16.37.30;	author jhallen;	state Exp;
branches;
next	1.10;

1.10
date	2005.04.02.06.47.52;	author jhallen;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.30.06.29.42;	author jhallen;	state Exp;
branches;
next	1.8;

1.8
date	2005.03.30.04.40.47;	author jhallen;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.30.00.39.17;	author jhallen;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.29.06.26.57;	author jhallen;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.26.13.55.53;	author jhallen;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.26.05.47.32;	author jhallen;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.22.03.22.38;	author jhallen;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.21.02.15.55;	author jhallen;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.27.05.29.32;	author jhallen;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Fix 64-bit problems
@
text
@/* GPM/xterm mouse functions
   Copyright (C) 1999 Jesse McGrew

This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */ 

#include "types.h"

#ifdef HAVE_SYS_TIME_H
#include <sys/time.h>
#endif

int auto_scroll = 0;		/* Set for autoscroll */
int auto_rate;			/* Rate */
int auto_trig_time;		/* Time of next scroll */

int rtbutton=0;			/* use button 3 instead of 1 */
int floatmouse=0;		/* don't fix xcol after tomouse */
int joexterm=0;			/* set if we're using Joe's modified xterm */

static int selecting = 0;	/* Set if we did any selecting */

static int Cb, Cx, Cy;
static int last_msec=0;		/* time in ms when event occurred */
static int clicks;

static void fake_key(int c)
{
	MACRO *m=dokey(maint->curwin->kbd,c);
	int x=maint->curwin->kbd->x;
	maint->curwin->main->kbd->x=x;
	if(x)
		maint->curwin->main->kbd->seq[x-1]=maint->curwin->kbd->seq[x-1];
	if(m)
		co_call(exemac,m);
}

/* Translate mouse coordinates */

int mcoord(int x)
{
	if (x>=33 && x<=240)
		return x - 33 + 1;
	else if (x==32)
		return -1 + 1;
	else if (x>240)
		return x - 257 + 1;
	else
		return 0; /* This should not happen */
}

int uxtmouse(BW *bw)
{
	Cb = ttgetc()-32;
	if (Cb < 0)
		return -1;
	Cx = ttgetc();
	if (Cx < 32)
		return -1;
	Cy = ttgetc();
	if (Cy < 32)
		return -1;

	Cx = mcoord(Cx);
	Cy = mcoord(Cy);

	if ((Cb & 0x41) == 0x40) {
		fake_key(KEY_MWUP);
		return 0;
	}

	if ((Cb & 0x41) == 0x41) {
		fake_key(KEY_MWDOWN);
		return 0;
	}

	if ((Cb & 3) == 3)
		/* button released */
		mouseup(Cx,Cy);
	else if ((Cb & 3) == (rtbutton ? 2 : 0))	/* preferred button */
		if ((Cb & 32) == 0)
			/* button pressed */
			mousedn(Cx,Cy);
		else
			/* drag */
			mousedrag(Cx,Cy);
	else if ((maint->curwin->watom->what & TYPETW ||
	          maint->curwin->watom->what & TYPEPW) &&
	          joexterm && (Cb & 3) == 1)		/* Paste */
		ttputs(USTR "\33]52;;?\33\\");
	return 0;
}

int mnow()
{
	struct timeval tv;
	gettimeofday(&tv, NULL);
	return tv.tv_sec * 1000 + tv.tv_usec / 1000;
}

void mousedn(int x,int y)
{
	Cx = x, Cy = y;
	if (last_msec == 0 || mnow() - last_msec > MOUSE_MULTI_THRESH) {
		/* not a multiple click */
		clicks=1;
		fake_key(KEY_MDOWN);
	} else if(clicks==1) {
		/* double click */
		clicks=2;
		fake_key(KEY_M2DOWN);
	} else if(clicks==2) {
		/* triple click */
		clicks=3;
		fake_key(KEY_M3DOWN);
	} else {
		/* start over */
		clicks=1;
		fake_key(KEY_MDOWN);
	}
}

/* Return base64 code character given 6-bit number */

char base64_code[]="\
ABCDEFGHIJKLMNOPQRSTUVWXYZ\
abcdefghijklmnopqrstuvwxyz\
0123456789+/";

int base64_accu = 0;
int base64_count = 0;
int base64_pad = 0;

static void ttputs64(unsigned char *p, unsigned length)
{
        unsigned char buf[65];
        unsigned x = 0;
        while (length--) {
            switch (base64_count) {
                case 0:
                    buf[x++] = base64_code[*p >> 2];
                    base64_accu = (*p & 0x3);
                    base64_count = 2;
                    ++p;
                    break;
                case 2:
                    buf[x++] = base64_code[(base64_accu << 4) + (*p >> 4)];
                    base64_accu = (*p & 0xF);
                    base64_count = 4;
                    ++p;
                    break;
                case 4:
                    buf[x++] = base64_code[(base64_accu << 2) + (*p >> 6)];
                    buf[x++] = base64_code[*p & 0x3F];
                    base64_accu = 0;
                    base64_count = 0;
                    ++p;
                    break;
            }
            if (x >= 63) {
                /* Write 63 or 64 characters */
                base64_pad += x;
                buf[x] = 0;
                ttputs(buf);
                x = 0;
            }
        }
        if (x != 0) {
            base64_pad += x;
            buf[x] = 0;
            ttputs(buf);
        }
}

static void ttputs64_flush()
{
    unsigned char x;
    switch (base64_count) {
        case 0:
            break;
        case 2:
            x = base64_code[base64_accu << 4];
            ttputc(x);
            break;
        case 4:
            x = base64_code[base64_accu << 2];
            ttputc(x);
            break;
    }
    if (base64_pad & 3) {
        x = 4 - (base64_pad & 3);
        while (x--)
        	ttputc('=');
    }
    base64_count = 0;
    base64_accu = 0;
    base64_pad = 0;
}

void select_done(struct charmap *map)
{
	/* Feed text to xterm */
	if (joexterm && markv(1)) {
		long left = markb->xcol;
		long right = markk->xcol;
		P *q = pdup(markb, USTR "select_done");
		int c;
		/* ttputs(USTR "\33[?2P"); JOE's xterm */
		ttputs(USTR "\33]52;;"); /* New xterm */
		while (q->byte < markk->byte) {
			unsigned char buf[16];
			int len;
			/* Skip until we're within columns */
			while (q->byte < markk->byte && square && (piscol(q) < left || piscol(q) >= right))
				pgetc(q);

			/* Copy text into buffer */
			while (q->byte < markk->byte && (!square || (piscol(q) >= left && piscol(q) < right))) {
				c = pgetc(q);
				if (map->type)
					if (locale_map->type) {
						/* UTF-8 char to UTF-8 terminal */
						len = utf8_encode(buf,c);
						ttputs64(buf, len);
					} else {
						/* UTF-8 char to non-UTF-8 terminal */
						c = from_uni(locale_map,c);
						if (c == -1)
							c = '?';
						buf[0] = c;
						ttputs64(buf, 1);
					}
				else
					if (locale_map->type) {
						/* Non-UTF-8 to UTF-8 terminal */
						c = to_uni(map, c);
						if (c == -1)
							c = '?';
						len = utf8_encode(buf,c);
						ttputs64(buf, len);
					} else {
						/* Non-UTF-8 to non-UTF-8 terminal */
						buf[0] = c;
						ttputs64(buf, 1);
					}
			}
			/* Add a new line if we went past right edge of column */
			if (square && q->byte<markk->byte && piscol(q) >= right) {
				buf[0] = 10;
				ttputs64(buf, 1);
			}
		}
		ttputs64_flush();
		ttputs(USTR "\33\\");
		prm(q);
	}
}

void mouseup(int x,int y)
{
	auto_scroll = 0;
	Cx = x, Cy = y;
	if (selecting) {
		select_done(((BW *)maint->curwin->object)->b->o.charmap);
		selecting = 0;
	}
	switch(clicks) {
		case 1:
			fake_key(KEY_MUP);
			break;
  
		case 2:
			fake_key(KEY_M2UP);
			break;
  
		case 3:
			fake_key(KEY_M3UP);
			break;
	}
	last_msec = mnow();
}

void mousedrag(int x,int y)
{
	Cx = x, Cy = y;
	switch(clicks) {
		case 1:
			fake_key(KEY_MDRAG);
			break;
  
		case 2:
			fake_key(KEY_M2DRAG);
			break;
  
		case 3:
			fake_key(KEY_M3DRAG);
			break;
	}
}

int drag_size; /* Set if we are resizing a window */

int utomouse(BW *xx)
{
	BW *bw;
	int x = Cx - 1, y = Cy - 1;
	W *w = watpos(maint,x,y);
	if (!w)
		return -1;
	maint->curwin = w;
	bw = w->object;
	drag_size = 0;
	if (w->watom->what == TYPETW) {
		if (bw->o.hex) {
			int goal_col = x - w->x + bw->offset - 60;
			int goal_line;
			long goal_byte;
			if (goal_col < 0)
				goal_col = 0;
			if (goal_col >15)
				goal_col = 15;
			/* window has a status line? */
			if (((TW *)bw->object)->staon)
				/* clicked on it? */
				if (y == w->y) {
					if (y != maint->wind)
						drag_size = y;
					return -1;
				} else
					goal_line = y - w->y + bw->top->byte/16 - 1;
			else
				goal_line = y - w->y + bw->top->byte/16;
			goal_byte = goal_line*16L + goal_col;
			if (goal_byte > bw->b->eof->byte)
				goal_byte = bw->b->eof->byte;
			pgoto(bw->cursor, goal_byte);
			return 0;
		} else {
			int goal_col = x - w->x + bw->offset - (bw->o.linums ? LINCOLS : 0);
			int goal_line;
			if (goal_col < 0)
				goal_col = 0;
			/* window has a status line? */
			if (((TW *)bw->object)->staon)
				/* clicked on it? */
				if (y == w->y) {
					if (y != maint->wind)
						drag_size = y;
					return -1;
				} else
					goal_line = y - w->y + bw->top->line - 1;
			else
				goal_line = y - w->y + bw->top->line;
			pline(bw->cursor, goal_line);
			pcol(bw->cursor, goal_col);
			if (floatmouse)
				bw->cursor->xcol = goal_col;
			else
				bw->cursor->xcol = piscol(bw->cursor);
			return 0;
		}
	} else if (w->watom->what == TYPEPW) {
		PW *pw = (PW *)bw->object;
		/* only one line in prompt windows */
		pcol(bw->cursor,x - w->x + bw->offset - pw->promptlen + pw->promptofst);
		bw->cursor->xcol = piscol(bw->cursor);
		return 0;
	} else if (w->watom->what == TYPEMENU) {
		menujump((MENU *)w->object, x - w->x, y - w->y);
		return 0;
	} else return -1;
}

/* same as utomouse but won't change windows, and always floats. puts the
 * position that utomouse would use into tmspos. */
static int tmspos;

static int tomousestay()
{
	BW *bw;
	int x = Cx - 1,y = Cy - 1;
	W *w;
	/*
	w = watpos(maint,x,y);
	if(!w || w != maint->curwin)
		return -1;
	*/
	w = maint->curwin;
	bw = w->object;
	if (w->watom->what == TYPETW) {
		if (bw->o.hex) {
			int goal_col = x - w->x + bw->offset - 60;
			int goal_line;
			long goal_byte;
			if (goal_col < 0)
				goal_col = 0;
			if (goal_col > 15)
				goal_col = 15;
			/* window has a status line? */
			if (((TW *)bw->object)->staon)
				if (y <= w->y) {
					goal_col = 0;
					goal_line = bw->top->byte/16;
				} else if (y >= w->y + w->h) {
					goal_line = bw->top->byte/16 + w->h - 2;
					goal_col = 15;
				} else
					goal_line = y - w->y + bw->top->byte/16 - 1;
			else
				if (y < w->y) {
					goal_col = 0;
					goal_line = bw->top->byte/16;
				} else if (y >= w->y + w->h) {
					goal_line = bw->top->byte/16 + w->h - 1;
					goal_col = 15;
				} else
					goal_line = y - w->y + bw->top->byte/16;
			goal_byte = goal_line*16L + goal_col;
			if (goal_byte > bw->b->eof->byte)
				goal_byte = bw->b->eof->byte;
			pgoto(bw->cursor, goal_byte);
			/* This is not right... */
			tmspos = bw->cursor->xcol = piscol(bw->cursor);
			return 0;
		} else {
			int goal_col = x - w->x + bw->offset - (bw->o.linums ? LINCOLS : 0);
			int goal_line;
			if (goal_col < 0)
				goal_col = 0;
			/* window has a status line? */
			if (((TW *)bw->object)->staon)
				if (y <= w->y) {
					goal_col = 0;
					goal_line = bw->top->line;
				} else if (y >= w->y + w->h) {
					goal_col = 1000;
					goal_line = w->h + bw->top->line - 2;
				} else
					goal_line = y - w->y + bw->top->line - 1;
			else
				if (y < w->y) {
					goal_col = 0;
					goal_line = bw->top->line;
				} else if (y >= w->y + w->h) {
					goal_col = 1000;
					goal_line = w->h + bw->top->line - 1;
				} else
					goal_line = y - w->y + bw->top->line;
			pline(bw->cursor, goal_line);
			pcol(bw->cursor, goal_col);
			tmspos = bw->cursor->xcol = goal_col;
			if (!floatmouse)
				tmspos = piscol(bw->cursor);
			return 0;
		}
	} else if (w->watom->what == TYPEPW) {
		PW *pw = (PW *)bw->object;
		/* only one line in prompt windows */
		pcol(bw->cursor,x - w->x + bw->offset - pw->promptlen + pw->promptofst);
		tmspos = bw->cursor->xcol = piscol(bw->cursor);
		return 0;
	} else return -1;
}

static long anchor;		/* byte where mouse was originally pressed */
static long anchorn;		/* near side of the anchored word */
static int marked;		/* mark was set by defmdrag? */
static int reversed;		/* mouse was dragged above the anchor? */

int udefmdown(BW *xx)
{
	BW *bw;
	if (utomouse(xx))
		return -1;
	if ((maint->curwin->watom->what & (TYPEPW | TYPETW)) == 0)
		return 0;
	bw = (BW *)maint->curwin->object;
	anchor = bw->cursor->byte;
	marked = reversed = 0;
	return 0;
}

void reset_trig_time()
{
	if (!auto_rate)
		auto_rate = 1;
	auto_trig_time = mnow() + 300 / (1 + auto_rate);
}

int udefmdrag(BW *xx)
{
	BW *bw = (BW *)maint->curwin->object;
	int ay = Cy - 1;
	int new_scroll;
	int new_rate;
	if (drag_size) {
		while (ay > bw->parent->y) {
			int y = bw->parent->y;
			wgrowdown(bw->parent);
			if (y == bw->parent->y)
				return -1;
		}
		while (ay < bw->parent->y) {
			int y = bw->parent->y;
			wgrowup(bw->parent);
			if (y == bw->parent->y)
				return -1;
		}
		return 0;
	}

	if (ay < bw->y) {
		new_scroll = -1;
		new_rate = bw->y - ay;
	}
	else if (ay >= bw->y + bw->h) {
		new_scroll = 1;
		new_rate = ay - (bw->y + bw->h) + 1;
	} else {
		new_scroll = 0;
		new_rate = 1;
	}

	if (new_rate > 10)
		new_rate = 10;

	if (!new_scroll)
		auto_scroll = 0;
	else if (new_scroll != auto_scroll) {
		auto_scroll = new_scroll;
		auto_rate = new_rate;
		reset_trig_time();
	} else if (new_rate != auto_rate) {
/*
		int left = auto_trig_time - mnow();
		if (left > 0) {
			left = left * auto_rate / new_rate;
		}
*/
		auto_rate = new_rate;
	}

	if (!marked)
		marked++, umarkb(bw);
	if (tomousestay())
		return -1;
	selecting = 1;
	if (reversed)
		umarkb(bw);
	else
		umarkk(bw);
	if ((!reversed && bw->cursor->byte < anchor) || (reversed && bw->cursor->byte > anchor)) {
		P *q = pdup(markb, USTR "udefmdrag");
		int tmp = markb->xcol;
		pset(markb,markk);
		pset(markk,q);
		markb->xcol = markk->xcol;
		markk->xcol = tmp;
		prm(q);
		reversed = !reversed;
	}
	bw->cursor->xcol = tmspos;
	return 0;
}

int udefmup(BW *bw)
{
	return 0;
}

int udefm2down(BW *xx)
{
	BW *bw;
	if (utomouse(xx))
		return -1;
	if (maint->curwin->watom->what & TYPEMENU) {
		return maint->curwin->watom->rtn((MENU *)maint->curwin->object);
	}
	if ((maint->curwin->watom->what & (TYPEPW | TYPETW)) == 0)
		return 0;
	bw = (BW *)maint->curwin->object;
	/* set anchor to left side, anchorn to right side */
	u_goto_prev(bw); anchor = bw->cursor->byte; umarkb(bw); markb->xcol = piscol(markb);
	u_goto_next(bw); anchorn = bw->cursor->byte; umarkk(bw); markk->xcol = piscol(markk);
	reversed = 0;
	bw->cursor->xcol = piscol(bw->cursor);
	selecting = 1;
	return 0;
}

int udefm2drag(BW *xx)
{
	BW *bw=(BW *)maint->curwin->object;
	if (tomousestay())
		return -1;
	if (!reversed && bw->cursor->byte < anchor) {
		pgoto(markk,anchorn);
		markk->xcol = piscol(markk);
		reversed = 1;
	} else if(reversed && bw->cursor->byte > anchorn) {
		pgoto(markb,anchor);
		markb->xcol = piscol(markb);
		reversed = 0;
	}
	bw->cursor->xcol = piscol(bw->cursor);
	if(reversed) {
		if (!pisbol(bw->cursor))
			u_goto_prev(bw), bw->cursor->xcol = piscol(bw->cursor);
		umarkb(bw);
	} else {
		if (!piseol(bw->cursor))
			u_goto_next(bw), bw->cursor->xcol = piscol(bw->cursor);
		umarkk(bw);
	}
	return 0;
}

int udefm2up(BW *bw)
{
	return 0;
}

int udefm3down(BW *xx)
{
	BW *bw;
	if (utomouse(xx))
		return -1;
	if ((maint->curwin->watom->what & (TYPEPW | TYPETW)) == 0)
		return 0;
	bw = (BW *)maint->curwin->object;
	/* set anchor to beginning of line, anchorn to beginning of next line */
	p_goto_bol(bw->cursor); bw->cursor->xcol = piscol(bw->cursor);
	anchor = bw->cursor->byte; umarkb(bw);
	umarkk(bw); pnextl(markk); anchorn = markk->byte;
	reversed = 0;
	bw->cursor->xcol = piscol(bw->cursor);
	selecting = 1;
	return 0;
}

int udefm3drag(BW *xx)
{
	BW *bw = (BW *)maint->curwin->object;
	if (tomousestay())
		return -1;
	if (!reversed && bw->cursor->byte < anchor) {
		pgoto(markk,anchorn);
		markk->xcol = piscol(markk);
		reversed = 1;
	} else if (reversed && bw->cursor->byte > anchorn) {
		pgoto(markb,anchor);
		markb->xcol = piscol(markb);
		reversed = 0;
	}
	p_goto_bol(bw->cursor);
	bw->cursor->xcol = piscol(bw->cursor);
	if(reversed)
		umarkb(bw), markb->xcol = piscol(markb);
	else
		umarkk(bw), pnextl(markk), markk->xcol = markk->xcol = piscol(markk);
	return 0;
}

int udefm3up(BW *bw)
{
	return 0;
}

void mouseopen()
{
#ifdef MOUSE_XTERM
	if (usexmouse) {
		ttputs(USTR "\33[?1002h");
		if (joexterm)
			ttputs(USTR "\33[?2007h");
		ttflsh();
	}
#endif
}

void mouseclose()
{
#ifdef MOUSE_XTERM
	if (usexmouse) {
		if (joexterm)
			ttputs(USTR "\33[?2007l");
		ttputs(USTR "\33[?1002l");
		ttflsh();
	}
#endif
}
@


1.17
log
@UC -> USTR
@
text
@d47 1
a47 1
		exemac(m);
@


1.16
log
@change US to UC
@
text
@d102 1
a102 1
		ttputs(UC "\33]52;;?\33\\");
d218 1
a218 1
		P *q = pdup(markb, UC "select_done");
d220 2
a221 2
		/* ttputs(UC "\33[?2P"); JOE's xterm */
		ttputs(UC "\33]52;;"); /* New xterm */
d266 1
a266 1
		ttputs(UC "\33\\");
d565 1
a565 1
		P *q = pdup(markb, UC "udefmdrag");
d685 1
a685 1
		ttputs(UC "\33[?1002h");
d687 1
a687 1
			ttputs(UC "\33[?2007h");
d698 2
a699 2
			ttputs(UC "\33[?2007l");
		ttputs(UC "\33[?1002l");
@


1.15
log
@Massive check-in: rearrange header files, fix -Wall warnings.
@
text
@d102 1
a102 1
		ttputs(US "\33]52;;?\33\\");
d218 1
a218 1
		P *q = pdup(markb, US "select_done");
d220 2
a221 2
		/* ttputs(US "\33[?2P"); JOE's xterm */
		ttputs(US "\33]52;;"); /* New xterm */
d266 1
a266 1
		ttputs(US "\33\\");
d565 1
a565 1
		P *q = pdup(markb, US "udefmdrag");
d685 1
a685 1
		ttputs(US "\33[?1002h");
d687 1
a687 1
			ttputs(US "\33[?2007h");
d698 2
a699 2
			ttputs(US "\33[?2007l");
		ttputs(US "\33[?1002l");
@


1.14
log
@add joe_debug
@
text
@d19 3
d23 1
a23 18

#include "config.h"
#include "b.h"
#include "bw.h"
#include "w.h"
#include "qw.h"
#include "tw.h"
#include "pw.h"
#include "vs.h"
#include "kbd.h"
#include "macro.h"
#include "main.h"
#include "ublock.h"
#include "menu.h"
#include "tty.h"
#include "charmap.h"
#include "utf8.h"
#include "mouse.h"
a34 1
static int xtmstate;
d60 2
d124 1
a124 1
	} else if(clicks=2) {
a272 1
	struct timeval tv;
d492 1
a504 1
	int ax = Cx - 1;
d575 1
d580 1
d600 1
d627 1
d632 1
d650 1
d673 1
d678 1
@


1.13
log
@Match to xterm's base64 patch
@
text
@d231 1
a231 1
		P *q = pdup(markb);
d579 1
a579 1
		P *q = pdup(markb);
@


1.12
log
@one more thing
@
text
@d115 1
a115 1
		ttputs(US "\33[?P");
d233 2
a234 1
		ttputs(US "\33[?2P");
d279 1
a279 1
		ttputs(US "\33");
@


1.11
log
@new base64 encoded xterm-patch
@
text
@d692 1
a692 1
			ttputs(US "\33[?2004h\33[?2007h");
d703 1
a703 1
			ttputs(US "\33[?2007l\33[?2004l");
@


1.10
log
@Autoscroll
@
text
@d115 1
a115 1
		ttputs(US "\33[y");
d148 77
d233 1
a233 1
		ttputs(US "\33[1y");
d235 2
d247 2
a248 3
						unsigned char buf[16];
						utf8_encode(buf,c);
						ttputs(buf);
d252 1
a252 1
						if (c ==-1)
d254 2
a255 1
						ttputc(c);
a259 1
						unsigned char buf[16];
d263 2
a264 2
						utf8_encode(buf,c);
						ttputs(buf);
d267 2
a268 1
						ttputc(c);
d272 4
a275 2
			if (square && q->byte<markk->byte && piscol(q) >= right)
				ttputc(10);
d277 2
a278 1
		ttputs(US "\33\33");
@


1.9
log
@Fix some mouse related i18n issues
@
text
@d39 4
d119 1
a119 1
static int mnow()
d204 1
d325 3
a327 1
	W *w = watpos(maint,x,y);
d330 2
d340 1
a340 1
			if (goal_col >15)
d344 6
a349 3
				/* clicked on it? */
				if (y == w->y) {
					return -1;
d353 8
a360 1
				goal_line = y - w->y + bw->top->byte/16;
d375 7
a381 4
				/* clicked on it? */
				if (y == w->y)
					return -1;
				else
d384 8
a391 1
				goal_line = y - w->y + bw->top->line;
d425 7
d437 2
d454 32
d610 1
a610 1
			ttputs(US "\33[?2004h");
d621 1
a621 1
			ttputs(US "\33[?2004l");
@


1.8
log
@fix mouse & hex bugs
@
text
@d35 2
d144 1
a144 1
void select_done()
d161 26
a186 1
				ttputc(c);
d202 1
a202 1
		select_done();
@


1.7
log
@Mnior mouse fixes
@
text
@d163 1
a163 1
				ttputc(13);
d225 48
a272 17
		/* window has a status line? */
		if (((TW *)bw->object)->staon)
			/* clicked on it? */
			if (y == w->y) {
				if (y != maint->wind)
					drag_size = y;
				return -1;
			} else
				pline(bw->cursor,y-w->y+bw->top->line-1);
		else
			pline(bw->cursor,y-w->y+bw->top->line);
		pcol(bw->cursor,x-w->x+bw->offset);
		if (floatmouse)
			bw->cursor->xcol = x - w->x + bw->offset;
		else
			bw->cursor->xcol = piscol(bw->cursor);
		return 0;
d278 1
d280 1
a280 1
		menujump((MENU *)w->object,x - w->x,y - w->y);
d298 36
a333 5
		/* window has a status line? */
		if (((TW *)bw->object)->staon)
			/* clicked on it? */
			if (y == w->y)
				return -1;
d335 8
a342 8
				pline(bw->cursor,y - w->y + bw->top->line - 1);
		else
			pline(bw->cursor,y - w->y + bw->top->line);
		pcol(bw->cursor,x - w->x + bw->offset);
		tmspos = bw->cursor->xcol = x-w->x + bw->offset;
		if (!floatmouse)
			tmspos = piscol(bw->cursor);
		return 0;
d348 1
@


1.6
log
@XTerm hack.
@
text
@d41 1
a41 1
static int dragging = 0;	/* Set if we did any dragging */
d59 2
d106 3
a108 1
	else if (joexterm && (Cb & 3) == 1)		/* Paste */
d142 28
d174 3
a176 26
	if (dragging) {
		/* Feed text to xterm */
		if (joexterm && markv(1)) {
			long left = markb->xcol;
			long right = markk->xcol;
			P *q = pdup(markb);
			int c;
			ttputs(US "\33[1y");
			while (q->byte < markk->byte) {
				/* Skip until we're within columns */
				while (q->byte < markk->byte && square && (piscol(q) < left || piscol(q) >= right))
					pgetc(q);

				/* Copy text into buffer */
				while (q->byte < markk->byte && (!square || (piscol(q) >= left && piscol(q) < right))) {
					c = pgetc(q);
					ttputc(c);
				}
				/* Add a new line if we went past right edge of column */
				if (square && q->byte<markk->byte && piscol(q) >= right)
					ttputc(13);
			}
			ttputs(US "\33\33");
			prm(q);
		}
		dragging = 0;
d329 1
a329 1
	dragging = 1;
d367 1
a374 1
	dragging = 1;
d414 1
a421 1
	dragging = 1;
@


1.5
log
@fix some resize bugs
@
text
@d34 1
d39 3
d59 10
d72 1
a72 1
	if(Cb < 0)
d74 2
a75 2
	Cx = ttgetc() - 32;
	if (Cx <= 0)
d77 2
a78 2
	Cy = ttgetc() - 32;
	if (Cy <= 0)
d81 3
d104 2
d142 27
d320 1
d365 1
d412 1
d439 2
d450 2
@


1.4
log
@        Reformat mouse.c

        Apply diff patch

        Apply vpath patch

        Apply electrum's mouse patch (send mouse off code during
        shell escape)

        Mouse can now resize windows

        Mouse can position cursor in menus.  Double-click selects
        an item.  Need to add scroll.

@
text
@d174 2
a175 1
				drag_size = y;
d253 2
d256 1
a256 1
		while (Cy > bw->parent->y) {
d262 1
a262 1
		while (Cy < bw->parent->y) {
@


1.3
log
@Fix bugs where doedit() was called and we expected the window to immediately
change.

Run -pedantic
@
text
@d33 1
d45 9
a53 9
 {
 MACRO *m=dokey(maint->curwin->kbd,c);
 int x=maint->curwin->kbd->x;
 maint->curwin->main->kbd->x=x;
 if(x)
  maint->curwin->main->kbd->seq[x-1]=maint->curwin->kbd->seq[x-1];
 if(m)
  exemac(m);
 }
d56 33
a88 32
 {
 Cb=ttgetc()-32;
 if(Cb<0) return -1;
 Cx=ttgetc()-32;
 if(Cx<=0) return -1;
 Cy=ttgetc()-32;
 if(Cy<=0) return -1;

 if((Cb&0x41)==0x40)
  {
  fake_key(KEY_MWUP);
  return 0;
  }

 if((Cb&0x41)==0x41)
  {
  fake_key(KEY_MWDOWN);
  return 0;
  }

 if((Cb&3)==3)
  /* button released */
  mouseup(Cx,Cy);
 else if((Cb&3)==(rtbutton?2:0))	/* preferred button */
  if((Cb&32)==0)
   /* button pressed */
   mousedn(Cx,Cy);
  else
   /* drag */
   mousedrag(Cx,Cy);
 return 0;
 }
d91 5
a95 5
 {
 struct timeval tv;
 gettimeofday(&tv, NULL);
 return tv.tv_sec * 1000 + tv.tv_usec / 1000;
 }
d98 19
a116 26
 {
 Cx=x, Cy=y;
 if(last_msec==0 || mnow()-last_msec>MOUSE_MULTI_THRESH)
  {
  /* not a multiple click */
  clicks=1;
  fake_key(KEY_MDOWN);
  }
 else if(clicks==1)
  {
  /* double click */
  clicks=2;
  fake_key(KEY_M2DOWN);
  }
 else if(clicks=2)
  {
  /* triple click */
  clicks=3;
  fake_key(KEY_M3DOWN);
  }
 else
  {
  /* start over */
  clicks=1;
  fake_key(KEY_MDOWN);
  }
d120 7
a126 8
 {
 struct timeval tv;
 Cx=x, Cy=y;
 switch(clicks)
  {
  case 1:
  fake_key(KEY_MUP);
  break;
d128 3
a130 3
  case 2:
  fake_key(KEY_M2UP);
  break;
d132 6
a137 6
  case 3:
  fake_key(KEY_M3UP);
  break;
  }
 last_msec=mnow();
 }
d140 6
a145 7
 {
 Cx=x, Cy=y;
 switch(clicks)
  {
  case 1:
  fake_key(KEY_MDRAG);
  break;
d147 3
a149 3
  case 2:
  fake_key(KEY_M2DRAG);
  break;
d151 7
a157 5
  case 3:
  fake_key(KEY_M3DRAG);
  break;
  }
 }
d160 36
a195 29
 {
 BW *bw;
 int x=Cx-1,y=Cy-1;
 W *w=watpos(maint,x,y);
 if(!w) return -1;
 maint->curwin=w;
 bw=w->object;
 if(w->watom->what==TYPETW)
  {
  /* window has a status line? */
  if(((TW *)bw->object)->staon)
   /* clicked on it? */
   if(y==w->y) return -1;
   else pline(bw->cursor,y-w->y+bw->top->line-1);
  else pline(bw->cursor,y-w->y+bw->top->line);
  pcol(bw->cursor,x-w->x+bw->offset);
  if(floatmouse) bw->cursor->xcol=x-w->x+bw->offset;
  else bw->cursor->xcol=piscol(bw->cursor);
  return 0;
  }
 else if(w->watom->what==TYPEPW)
  {
  PW *pw=(PW *)bw->object;
  /* only one line in prompt windows */
  pcol(bw->cursor,x-w->x+bw->offset-pw->promptlen+pw->promptofst);
  bw->cursor->xcol=piscol(bw->cursor);
  }
 else return -1;
 }
d202 29
a230 28
 {
 BW *bw;
 int x=Cx-1,y=Cy-1;
 W *w=watpos(maint,x,y);
 if(!w || w!=maint->curwin) return -1;
 bw=w->object;
 if(w->watom->what==TYPETW)
  {
  /* window has a status line? */
  if(((TW *)bw->object)->staon)
   /* clicked on it? */
   if(y==w->y) return -1;
   else pline(bw->cursor,y-w->y+bw->top->line-1);
  else pline(bw->cursor,y-w->y+bw->top->line);
  pcol(bw->cursor,x-w->x+bw->offset);
  tmspos=bw->cursor->xcol=x-w->x+bw->offset;
  if(!floatmouse) tmspos=piscol(bw->cursor);
  return 0;
  }
 else if(w->watom->what==TYPEPW)
  {
  PW *pw=(PW *)bw->object;
  /* only one line in prompt windows */
  pcol(bw->cursor,x-w->x+bw->offset-pw->promptlen+pw->promptofst);
  tmspos=bw->cursor->xcol=piscol(bw->cursor);
  }
 else return -1;
 }
d238 10
a247 8
 {
 BW *bw;
 if(utomouse(xx)) return -1;
 if((maint->curwin->watom->what&(TYPEPW|TYPETW))==0) return 0;
 bw=(BW *)maint->curwin->object;
 anchor=bw->cursor->byte;
 marked=reversed=0;
 }
d250 37
a286 20
 {
 BW *bw=(BW *)maint->curwin->object;
 if(!marked) marked++, umarkb(bw);
 if(tomousestay()) return -1;
 if(reversed) umarkb(bw);
 else umarkk(bw);
 if((!reversed && bw->cursor->byte<anchor) ||
    (reversed && bw->cursor->byte>anchor))
  {
  P *q=pdup(markb);
  int tmp=markb->xcol;
  pset(markb,markk);
  pset(markk,q);
  markb->xcol=markk->xcol;
  markk->xcol=tmp;
  prm(q);
  reversed=!reversed;
  }
 bw->cursor->xcol=tmspos;
 }
d289 2
a290 2
 {
 }
d293 16
a308 11
 {
 BW *bw;
 if(utomouse(xx)) return -1;
 if((maint->curwin->watom->what&(TYPEPW|TYPETW))==0) return 0;
 bw=(BW *)maint->curwin->object;
 /* set anchor to left side, anchorn to right side */
 u_goto_prev(bw); anchor=bw->cursor->byte; umarkb(bw); markb->xcol=piscol(markb);
 u_goto_next(bw); anchorn=bw->cursor->byte; umarkk(bw); markk->xcol=piscol(markk);
 reversed=0;
 bw->cursor->xcol=piscol(bw->cursor);
 }
d313 21
a333 24
	if(tomousestay()) return -1;
	if(!reversed && bw->cursor->byte<anchor)
	 {
	 pgoto(markk,anchorn);
	 markk->xcol=piscol(markk);
	 reversed=1;
	 }
	else if(reversed && bw->cursor->byte>anchorn)
	 {
	 pgoto(markb,anchor);
	 markb->xcol=piscol(markb);
	 reversed=0;
	 }
	bw->cursor->xcol=piscol(bw->cursor);
	if(reversed)
	 {
	 if(!pisbol(bw->cursor)) u_goto_prev(bw), bw->cursor->xcol=piscol(bw->cursor);
	 umarkb(bw);
	 }
	else
	 {
	 if(!piseol(bw->cursor)) u_goto_next(bw), bw->cursor->xcol=piscol(bw->cursor);
	 umarkk(bw);
	 }
d343 5
a347 3
	if(utomouse(xx)) return -1;
	if((maint->curwin->watom->what&(TYPEPW|TYPETW))==0) return 0;
	bw=(BW *)maint->curwin->object;
d349 5
a353 5
	p_goto_bol(bw->cursor); bw->cursor->xcol=piscol(bw->cursor);
	anchor=bw->cursor->byte; umarkb(bw);
	umarkk(bw); pnextl(markk); anchorn=markk->byte;
	reversed=0;
	bw->cursor->xcol=piscol(bw->cursor);
d358 4
a361 3
	BW *bw=(BW *)maint->curwin->object;
	if(tomousestay()) return -1;
	if(!reversed && bw->cursor->byte<anchor) {
d363 3
a365 3
		markk->xcol=piscol(markk);
		reversed=1;
	} else if(reversed && bw->cursor->byte>anchorn) {
d367 2
a368 2
		markb->xcol=piscol(markb);
		reversed=0;
d371 5
a375 3
	bw->cursor->xcol=piscol(bw->cursor);
	if(reversed) umarkb(bw), markb->xcol=piscol(markb);
	else umarkk(bw), pnextl(markk), markk->xcol=markk->xcol=piscol(markk);
d381 20
@


1.2
log
@Add wheel mouse support
@
text
@d43 11
a87 11
static void fake_key(int c)
 {
 MACRO *m=dokey(maint->curwin->kbd,c);
 int x=maint->curwin->kbd->x;
 maint->curwin->main->kbd->x=x;
 if(x)
  maint->curwin->main->kbd->seq[x-1]=maint->curwin->kbd->seq[x-1];
 if(m)
  exemac(m);
 }

@


1.1
log
@Jesse McGrew's xterm mouse support.
@
text
@d52 12
d74 1
@

