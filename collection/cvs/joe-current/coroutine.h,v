head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2007.06.04.01.13.32;	author jhallen;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.31.02.31.55;	author jhallen;	state Exp;
branches;
next	1.2;

1.2
date	2007.03.20.12.48.57;	author jhallen;	state Exp;
branches;
next	1.1;

1.1
date	2006.07.26.03.59.18;	author jhallen;	state Exp;
branches;
next	;


desc
@@


1.4
log
@More work on coroutine refactoring.
@
text
@/*
 *	Co-routine library
 *	Copyright
 *		(C) 2006 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 */

/* A stack */

#define STACK_SIZE (sizeof(void *) * 32768)

struct stack {
	struct stack *next;			/* Next free stack */
	Coroutine *chain;			/* Resume this coroutine in place of caller when
	                                           the coroutine associated with the stack returns.  The chained
	                                           coroutine will eventually continue caller. */
	Coroutine *caller;			/* Most recent coroutine which continued us (the
	                                           calling co-routine if this is the first execution) */
	int (*func)(va_list args);		/* Function to call */
	va_list args;

	/* initial PC, SP to use for call to func */
#ifdef USE_UCONTEXT
	ucontext_t uc[1];
#else
	jmp_buf go;
	char *stk;
#endif
};

/* A suspended co-routine */

struct coroutine {
	struct stack *stack;		/* To restore current stack */
	Obj saved_obj_stack;		/* To restore obj stack */
	int override;			/* To use override_val instead of normal return value */
	int override_val;
	/* To restore PC, SP, regs... */
#ifdef USE_UCONTEXT
	ucontext_t uc[1];
#else
	jmp_buf cont;
#endif
};

/* Call a function as a co-routine (it runs with its own stack).  co_call
 * returns when the specified function returns (in which case the function's
 * return value is returned) or when the co-routine yields (in which case
 * the second argument to co_yield() is returned.
 */

int co_call(int (*func)(va_list args), ...);

/* Suspend current co-routine and return to calling co-routine with
 * specified return value.  t points to a Coroutine structure which gets
 * filled in with data about the suspended Coroutine.  The address of this
 * structure is used by co_resume to resume the suspended co-routine. */

int co_yield(Coroutine *t, int val);

/* Suspend the current co-routine and resume a previously suspended
 * co-routine.  co_resume() returns (and the co-routine which called
 * co_resume() is resumed) when the specified co-routine either completes
 * (the function specified in co_call() returns) or yields (it calls
 * co_yield).  The return value is the second argument to co_yield or the
 * return value of the function specified in co_call().
 */

int co_resume(Coroutine *t, int val);

/* Suspend current task: that is, suspend current co-routines and its chain
 * chain of invoking co-routines all the way back to the top level.  The top
 * level is resumed with the given return value.  The task is saved in t. 
 * The task can later be scheduled for continuation.
 */

int co_suspend(Coroutine *t, int val);

/* Schedule a task to resume after the current task completes: in other
 * words, the task is continued with the given return value after the next
 * time we return to the top level.  This function returns immediately:
 * it just schedules the task for execution.
 */

void co_sched(Coroutine *t, int val);

/* Suspend current task and stick a pointer to it in 'u', which should point
 * to a previously yielded co-routine.  The top level is resumed with the
 * return value given in 'val'.  The task will be scheduled when the
 * co-routine in 'u' returns.  It will be resumed with u's return value.
 * Note that the scheduling happens on return, and not on yield.
 *
 * This function is for macro query suspend, where a dialog is to get all of
 * its user input from the user and not from a macro.  When the dialog
 * function is done (which is indicated by the co-routine u returning) the
 * macro player is scheduled to continue.
 */

int co_query_suspend(Coroutine *u, int val);
@


1.3
log
@get uquery to use coroutines: eliminates recursive edloop calls.
@
text
@d19 1
a19 1
	                                           co_calling co-routine if this is the first execution) */
a31 4
/* Stack of currently running co-routine */

extern struct stack *current_stack;

d37 2
d47 8
d72 7
a78 5
/* Suspend current co-routine (remember its chain of invokers) and resume top-level.
 * 'u' points to a previously yielded coroutine.  The suspended
 * co-routine will be placed in 'u'.  When u returns (when it is resumed, and
 * then it returns), the suspended co-routine chain will be resumed (this
 * function will return). */
d80 5
a84 1
int co_suspend(Coroutine *u, int val);
d86 12
a97 4
/* Call a function as a co-routine (it runs with its own stack).  co_call
 * returns when the specified function returns (in which case the function's
 * return value is returned) or when the co-routine yields (in which case
 * the second argument to co_yield() is returned.
d100 1
a100 1
int co_call(int (*func)(va_list args), ...);
@


1.2
log
@add co_suspend
@
text
@d68 2
a69 2
 * co-routine will be placed in 't'.  When t returns (when it is resumed, and
 * then it returns), the suspended co-routine chain will be resume (this
@


1.1
log
@coroutines
@
text
@d9 2
d15 5
a19 1
	Coroutine *caller;			/* Calling co-routine */
d23 1
d32 2
d36 2
d41 1
d66 8
@

