head	1.16;
access;
symbols
	joe_3_5:1.14
	joe-3_4:1.12
	help:1.12
	joe_3_1:1.8
	joe_3_0:1.7
	joe_2_9_8:1.6
	joe_2_9_8_pre1:1.6
	joe_2_9_7:1.4
	joe_2_9_7_pre3:1.4
	joe_2_9_7_pre2:1.3
	joe_2_9_6:1.2
	joe_2_9_5:1.1.1.1
	joe_2_9_4:1.1.1.1
	joe_2_9_2:1.1.1.1
	joe_2_9_1:1.1.1.1
	joe_2_9:1.1.1.1
	joe_source:1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2007.06.04.01.13.33;	author jhallen;	state Exp;
branches;
next	1.15;

1.15
date	2007.01.23.05.27.50;	author jhallen;	state Exp;
branches;
next	1.14;

1.14
date	2006.06.05.01.26.32;	author jhallen;	state Exp;
branches;
next	1.13;

1.13
date	2006.06.02.15.01.26;	author jhallen;	state Exp;
branches;
next	1.12;

1.12
date	2006.05.21.01.58.58;	author jhallen;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.14.17.14.04;	author jhallen;	state Exp;
branches;
next	1.10;

1.10
date	2005.02.25.20.04.46;	author jhallen;	state Exp;
branches;
next	1.9;

1.9
date	2004.07.08.21.16.11;	author jhallen;	state Exp;
branches;
next	1.8;

1.8
date	2004.05.08.04.42.41;	author jhallen;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.12.13.58.27;	author jhallen;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.29.14.43.34;	author vsamel;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.27.13.27.32;	author vsamel;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.29.15.28.38;	author vsamel;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.29.14.39.52;	author vsamel;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.11.04.38.37;	author polesapart;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.11.03.40.19;	author polesapart;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.11.03.40.19;	author polesapart;	state Exp;
branches;
next	;


desc
@@


1.16
log
@More work on coroutine refactoring.
@
text
@/*
 *	Search & Replace system
 *	Copyright
 *		(C) 1992 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 */
#ifndef _JOE_USEARCH_H
#define _JOE_USEARCH_H 1

struct srchrec {
	LINK(SRCHREC)	link;	/* Linked list of search & replace locations */
	int	yn;		/* Did we replace? */
	int	wrap_flag;	/* Did we wrap? */
	long	addr;		/* Where we were */
	B *b;			/* Buffer address is in */
	long	last_repl;
};

struct search {
	unsigned char	*pattern;	/* Search pattern */
	unsigned char	*replacement;	/* Replacement string */
	int	backwards;	/* Set if search should go backwards */
	int	ignore;		/* Set if we should ignore case */
	int	repeat;		/* Set with repeat count (or -1 for no repeat count) */
	int	replace;	/* Set if this is search & replace */
	int	rest;		/* Set to do remainder of search & replace w/o query */
	unsigned char	*entire;	/* Entire matched string */
	unsigned char	*pieces[26];	/* Peices of the matched string */
	int	flg;		/* Set after prompted for first replace */
	SRCHREC	recs;		/* Search & replace position history */
	P	*markb, *markk;	/* Original marks */
	P	*wrap_p;	/* Wrap point */
	int	wrap_flag;	/* Set if we've wrapped */
	int	allow_wrap;	/* Set to allow wrapping */
	int	valid;		/* Set if original marks are a valid block */
	long	addr;		/* Where to place cursor after failed restruct_to_block() test */
	long	last_repl;	/* Address of last replacement (prevents infinite loops) */
	int	block_restrict;	/* Search restricted to marked block */
	int	all;		/* Set to continue in other windows */
	B	*first;		/* Starting buffer */
	B	*current;	/* Current buffer */
};

SRCH *mksrch PARAMS((unsigned char *pattern, unsigned char *replacement, int ignore, int backwards, int repeat, int replace, int rest, int all));
void rmsrch PARAMS((SRCH *srch));

int dopfnext PARAMS((BW *bw, SRCH *srch));

int pffirst PARAMS((BW *bw));
int pfnext PARAMS((BW *bw));

int pqrepl PARAMS((BW *bw));
int prfirst PARAMS((BW *bw));

int ufinish PARAMS((BW *bw));
int dofirst PARAMS((BW *bw, int back, int repl, unsigned char *hint));

extern B *findhist; /* Search history buffer */
extern B *replhist; /* Replace history buffer */

void save_srch PARAMS((FILE *f));
void load_srch PARAMS((FILE *f));

extern int smode;
extern int csmode;
extern int icase;
extern int wrap;
extern int pico;
extern unsigned char srchstr[];
extern SRCH *globalsrch;

extern unsigned char *rest_key;
extern unsigned char *backup_key;

#endif
@


1.15
log
@more wmkpw elimination
@
text
@d48 1
a48 1
int dopfnext PARAMS((BW *bw, SRCH *srch, int *notify));
@


1.14
log
@fix bugs: missing joe_gettext, core dump on re
@
text
@a75 2
int fwrd_c PARAMS((unsigned char **s));

@


1.13
log
@i18n yes/no
@
text
@d73 4
a76 2
extern unsigned char *rest_string;
extern unsigned char *backup_string;
@


1.12
log
@A option for search
Restore cursor to old position
@
text
@d73 3
@


1.11
log
@Massive check-in: rearrange header files, fix -Wall warnings.
@
text
@d16 1
d40 3
d45 1
a45 1
SRCH *mksrch PARAMS((unsigned char *pattern, unsigned char *replacement, int ignore, int backwards, int repeat, int replace, int rest));
@


1.10
log
@Ctrl-G starts a search if it doesn't know word under cursor.
@
text
@d11 29
a39 2
#include "config.h"
#include "types.h"
d55 13
a67 2
extern B *findhist;
extern B *replhist;
@


1.9
log
@Thu Jul  8 2004  Joe Allen <jhallen@@world.std.com>

	Merge last two changes (described below...)


Tue Jul  6 2004  Pavel Fedin <sonimiga@@rambler.ru>

     Changed some fork()s to vfork()s.
	Added ^# (CSI = 0x9B) control character.
	Added Amiga CSI sequences to keys definitions in joerc files.
	Added some #ifdef's to compile properly on AmigaOS.

Tue Jun 22 2004  Joe Allen <jhallen@@world.std.com>

	~/.joe_state file.

	Saves macros, yanks records, and file name history in a file.
@
text
@d26 1
@


1.8
log
@Tab completion insanity!  Completion in ^K F plus ESC-TAB in text windows.
@
text
@d27 3
@


1.7
log
@	Added -notite global option: when set, prevents screen from
	being restored on exit.

	Added -usetabs global option: when set, uses tabs for cursor
	position update (which was the default before).  Now we don't
	use tabs by default.

        Completed change to 'unsigned char *' and elimination of
        MAXINT.  What a mess.  No warnings with gcc -pedantic.

	Fix UTF-8 bugs where cursor was not correct on scrolled screen.
@
text
@d25 2
@


1.6
log
@include only headers which are needed
@
text
@d14 1
a14 1
SRCH *mksrch PARAMS((char *pattern, char *replacement, int ignore, int backwards, int repeat, int replace, int rest));
@


1.5
log
@put struct definitions and other goodies into types.h
@
text
@a13 4
#include "queue.h"	/* for LINK() macro */
#include "b.h"


@


1.4
log
@version 2.9.7-pre3
@
text
@d1 9
a9 2
#ifndef _Isrch
#define _Isrch 1
d12 2
a16 26
typedef struct search SRCH;
typedef struct srchrec SRCHREC;

struct srchrec {
	LINK(SRCHREC) link;	/* Linked list of search & replace locations */
	int yn;			/* Did we replace? */
	long addr;		/* Where we were */
};

struct search {
	char *pattern;		/* Search pattern */
	char *replacement;	/* Replacement string */
	int backwards;		/* Set if search should go backwards */
	int ignore;		/* Set if we should ignore case */
	int repeat;		/* Set with repeat count (or -1 for no repeat count) */
	int replace;		/* Set if this is search & replace */
	int rest;		/* Set to do remainder of search & replace w/o query */
	char *entire;		/* Entire matched string */
	char *pieces[26];	/* Peices of the matched string */
	int flg;		/* Set after prompted for first replace */
	SRCHREC recs;		/* Search & replace position history */
	P *markb, *markk;	/* Original marks */
	int valid;		/* Set if original marks are a valid block */
	long addr;		/* Addr of last replacement or -1 for none */
	int restrict;		/* Search restricted to marked block */
};
@


1.3
log
@take the CVS repository to version 2.9.7-pre2
@
text
@d5 1
a5 1
#include "queue.h"
d35 2
a36 2
SRCH *mksrch();
void rmsrch();
d38 1
a38 1
int dopfnext();
d40 2
a41 2
int pffirst();
int pfnext();
d43 2
a44 2
int pqrepl();
int prfirst();
@


1.2
log
@changed as of joe-2.9.6
@
text
@d11 2
a12 3
struct srchrec
{
	LINK (SRCHREC) link;	/* Linked list of search & replace locations */
d17 1
a17 2
struct search
{
d35 2
a36 2
SRCH *mksrch ();
void rmsrch ();
d38 1
a38 1
int dopfnext ();
d40 2
a41 2
int pffirst ();
int pfnext ();
d43 2
a44 2
int pqrepl ();
int prfirst ();
@


1.1
log
@Initial revision
@
text
@d12 5
a16 5
 {
 LINK(SRCHREC) link;	/* Linked list of search & replace locations */
 int yn;		/* Did we replace? */
 long addr;		/* Where we were */
 };
d19 17
a35 17
 {
 char *pattern;		/* Search pattern */
 char *replacement;	/* Replacement string */
 int backwards;		/* Set if search should go backwards */
 int ignore;		/* Set if we should ignore case */
 int repeat;		/* Set with repeat count (or -1 for no repeat count) */
 int replace;		/* Set if this is search & replace */
 int rest;		/* Set to do remainder of search & replace w/o query */
 char *entire;		/* Entire matched string */
 char *pieces[26];	/* Peices of the matched string */
 int flg;		/* Set after prompted for first replace */
 SRCHREC recs;		/* Search & replace position history */
 P *markb, *markk;	/* Original marks */
 int valid;		/* Set if original marks are a valid block */
 long addr;		/* Addr of last replacement or -1 for none */
 int restrict;		/* Search restricted to marked block */
 };
d37 2
a38 2
SRCH *mksrch();
void rmsrch();
d40 1
a40 1
int dopfnext();
d42 2
a43 2
int pffirst();
int pfnext();
d45 2
a46 2
int pqrepl();
int prfirst();
@


1.1.1.1
log
@First import of joe sources to cvs (as of joe-2.9)
@
text
@@
