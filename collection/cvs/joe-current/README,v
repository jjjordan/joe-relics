head	1.9;
access;
symbols
	joe_3_5:1.8
	joe-3_4:1.8
	help:1.8
	joe_3_1:1.4
	joe_3_0:1.2
	joe_2_9_8:1.2
	joe_2_9_8_pre1:1.1.1.1
	joe_2_9_7:1.1.1.1
	joe_2_9_7_pre3:1.1.1.1
	joe_2_9_7_pre2:1.1.1.1
	joe_2_9_6:1.1.1.1
	joe_2_9_5:1.1.1.1
	joe_2_9_4:1.1.1.1
	joe_2_9_2:1.1.1.1
	joe_2_9_1:1.1.1.1
	joe_2_9:1.1.1.1
	joe_source:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2008.10.27.01.47.14;	author jhallen;	state Exp;
branches;
next	1.8;

1.8
date	2005.03.15.19.20.37;	author jhallen;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.15.14.43.16;	author jhallen;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.15.14.42.35;	author jhallen;	state dead;
branches;
next	1.5;

1.5
date	2005.03.15.05.33.58;	author jhallen;	state Exp;
branches;
next	1.4;

1.4
date	2004.05.13.15.13.51;	author jhallen;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.13.04.16.02;	author jhallen;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.05.07.11.41;	author vsamel;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.11.03.39.59;	author polesapart;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.11.03.39.59;	author polesapart;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Add some documentation about txt command
@
text
@

                            Joe's Own Editor 3.6

                  A Free ASCII-Text Screen Editor for UNIX
                          by Joseph Allen (<= 2.8)
                         Marek 'Marx' Grac (=> 2.9)
                        by Joseph Allen again (=>3.0)

Get it from:
	http://sourceforge.net/projects/joe-editor

If you have questions, problems or suggestions, 
	Use sourceforge: mailing list, bug tracker, discussion groups.

	JOE is the professional freeware ASCII text screen editor for UNIX. 
It makes full use of the power and versatility of UNIX, but lacks the steep
learning curve and basic nonsense you have to deal with in every other UNIX
editor. JOE has the feel of most IBM PC text editors: The key-sequences are
reminiscent of WordStar and Turbo-C.  JOE is much more powerful than those
editors, however.  JOE has all of the features a UNIX user should expect:
full use of termcap/terminfo, excellent screen update optimizations (JOE is
fully usable at 2400 baud), simple installation, and all of the
UNIX-integration features of VI.

	JOE's initialization file determines much of JOE's personality and
the name of the initialization file is simply the name of the editor
executable followed by "rc".  JOE comes with four "rc" files in addition to
the basic "joerc", which allow it to emulate these editors:

	JPICO	- An enhanced version of the Pine mailer system's PICO
		  editor.

	JSTAR	- A complete imitation of WordStar including many "JOE"
		  extensions.

	RJOE	- A restricted version of JOE which allowed you to edit
		  only the files specified on the command line.

	JMACS	- A GNU-EMACS imitation which is about one order of
		  magnitude smaller than real GNU-EMACS.

Features:

	JOE has a well thought-out user-interface with great attention to
detail.  The Page Up and Page Down functions do not move the cursor relative
to the edges of the screen.  Left and Right arrow keys work at the beginning
and ends of lines.  The cursor can move past the ends of lines without
jumping, but also without inserting or deleting extra spaces at the ends of
lines. Control characters and characters above 127 can be displayed and
entered- even ^Q and ^S.  The cursor's row and column number can be
displayed in the status line.

	The key layout is made to reduce terminal incompatibility nonsense. 
^Q and ^S are not used and both ^H and DEL are mapped to backspace.  Case
does not matter in key sequences- ^K E, ^K e, and ^K ^E are each mapped to
the same function.  The arrow keys and PageUp, PageDown, Home, End, Insert
and Delete keypad keys are read from the termcap entry and are assigned to
the proper functions.  A simple initialization file, similar to Semware's
Q-EDIT, allows key-bindings, simple macros and help windows to be defined.

	JOE has full termcap/terminfo support and will work on any terminal. 
JOE has the best screen update optimization algorithm available.  It uses
VT100-style scrolling regions the way they are supposed to be used (I.E.,
without building insert and delete line functions out of them) and has a
powerful line shifting (insert/delete character) algorithm which works even
if text goes past the ends of lines.  JOE has deferred screen update to
handle typeahead and uses the baud rate reported by 'stty' to ensure that
deferral is not bypassed by tty buffering.

	JOE has multiple windows and lacks the confusing notion of a named
buffers.  You just have files and windows.  When there are more windows than
can fit on the screen, the Goto-Next-Window function scrolls through them. 
The same file can have multiple windows opened on it.

	JOE has VI-style unix integration.  You can filter a highlighted
block through a UNIX command.  Also, each place in joe which accepts a file
name (including the command line) will also accept:

		!command		to pipe into or out of a command
		>>filename		to append to a file
		filename,start,size	to edit a portion of a file/device
		-			to use stdin or stdout

	File names on the command line may be preceded by +nnn to start
editing at a specified line.

	JOE has shell windows.  You can run a shell in a window and any
output from commands run in the shell gets stored in a buffer.

	JOE has an orthogonal event-driven design.  Each prompt is actually
a normal edit buffer containing a history of all of the responses entered
for that prompt.  You can use all of the normal edit commands to create file
names and search strings.  You can use the up arrow key (or search backwards
and any other appropriate edit command) to go back through the history of
previous responses.  Prompts are reentrant- meaning that edit commands which
require prompts can still be used inside of prompts.

	JOE has TAB-completion and file selection menus.  If you hit tab in
a file name prompt, the name is either completed or a menu of possible
matches appears.

	JOE stores edit files in a doubly linked list of gap buffers which
can spill into a temporary file.  You can edit files of any size up to the
amount of free disk space and there are no line-length restrictions.  Since
the buffering system is block-based, JOE will incur only a minimum of
swapping on heavily loaded systems.

	When you ask for help, one of six small help reference cards appears
on the screen and remains while you continue to use the editor.  Here is the
first help card:

CURSOR           GO TO            BLOCK      DELETE   MISC         EXIT
^B left ^F right ^U  prev. screen ^KB begin  ^D char. ^KJ reformat ^KX save
^P up   ^N down  ^V  next screen  ^KK end    ^Y line  ^T  options  ^C  abort
^Z previous word ^A  beg. of line ^KM move   ^W >word ^@@  insert   ^KZ shell
^X next word     ^E  end of line  ^KC copy   ^O word< ^R  retype   FILE
SEARCH           ^KU top of file  ^KW file   ^J >line SPELL        ^KE new
^KF find text    ^KV end of file  ^KY delete ^_ undo  ^[N word     ^KR insert
^L  find next    ^KL to line No.  ^K/ filter ^^ redo  ^[L file     ^KD save

	JOE has a powerful set of editing commands suitable for editing both
text files and programs:

		- UTF-8 support

		- Syntax highlighting

		- search and replace system, including powerful regular 
		  expressions (including matching of balanced C expressions).

		- tags file search

		- paragraph format

		- undo and redo

		- position history allows you to get back to previous
		  editing contexts and allows you to quickly flip between
		  editing contexts

		- multiple keyboard macros

		- block move/copy/delete/filter

		- rectangle (columnar) mode

		- overtype/insert modes

		- indent/unindent

		- goto matching ( [ {

		- auto-indent mode

	Plus many options can be set:

		- can have EMACS-style cursor re-centering on scrolls

		- characters between 128-255 can be shown as-is for
		  non-English character sets

		- Final newline can be forced on end of file

		- Can start with a help screen on

		- Left/Right margin settings

		- Tab width

		- Indentation step and fill character

/*  jhallen@@world.std.com */                              /* Joseph H. Allen */
int a[1817];main(z,p,q,r){for(p=80;q+p-80;p-=2*a[p])for(z=9;z--;)q=3&(r=time(0)
+r*57)/7,q=q?q-1?q-2?1-p%79?-1:0:p%79-77?1:0:p<1659?79:0:p>158?-79:0,q?!a[p+q*2
]?a[p+=a[p+=q]=q]=q:0:0;for(;q++-1817;)printf(q%79?"%c":"%c\n"," #"[!a[q-1]]);}
@


1.8
log
@fix automake process
@
text
@d3 1
a3 1
                            Joe's Own Editor 3.2
@


1.7
log
@move around some files
@
text
@d3 1
a3 1
                            Joe's Own Editor 3.0
@


1.6
log
@Move around some files
@
text
@a0 1
This is Joe's Own Editor.  See the INFO file if you don't know what this is.
a1 3
=-=-=-=-=-=-=-=-=-=-=-
Installation procedure
=-=-=-=-=-=-=-=-=-=-=-
d3 1
a3 1
  JOE uses the GNU Automake and Autoconf suites to build itself.
d5 4
a8 1
  Run configure script, type one of these:
d10 2
a11 1
	./configure --prefix=/usr --sysconfdir=/etc
d13 2
a14 4
	  (normal system installation)
		- executables in /usr/bin
		- man pages in /usr/man
		- configuration files in /etc/joe
d16 9
a24 1
	./configure --prefix=$HOME
d26 4
a29 4
	  (install into your home directory)
		- executables in ~/bin
		- man pages in ~/man
		- configuration files in ~/etc/joe
d31 2
a32 1
	./configure
d34 2
a35 4
	  (install into /local)
		- executables in /usr/local/bin
		- man pages in /usr/local/man
		- configuration files in /usr/local/etc
d37 2
a38 1
  Build JOE, type:
d40 2
a41 1
	make
d43 1
a43 1
  Install JOE, type:
d45 8
a52 2
	su root (leave out if installing into home directory)
	make install
d54 7
a60 2
  Delete or update user custom configuration files (otherwise new features
  will not work):
d62 8
a69 6
	rm ~/.joerc
	rm ~/.jmacsrc
	rm ~/.rjoerc
	rm ~/.jstarrc
	rm ~/.jpicorc
	rm -r ~/.joe
d71 4
a74 1
  Try running JOE:
d76 3
a78 1
	joe
d80 4
a83 3
=-=-=-=-=-=-=-=-=-=-=-=-=-
Common ./configure options
=-=-=-=-=-=-=-=-=-=-=-=-=-
d85 2
a86 3
  To force JOE to use /etc/termcap file using its built-in termcap file parser
  (which is useful if you want to compile JOE so that it doesn't depend on any
  libraries other than libc and libm):
d88 2
a89 1
	./configure --disable-curses --disable-termcap
d91 7
a97 3
  (--disable-termcap prevents JOE from using the termcap emulation functions
   in the -ltermcap library.  --disable-curses prevents JOE from using the
   termcap emulation functions in the -lcurses library).
d99 3
a101 4
  Otherwise, JOE tries to use the terminfo database via termcap
  emulation routines: see man tgetent, tgetstr, tgoto, etc.  (JOE has its
  own implementation of "curses", so curses is not required except to get
  access to the terminfo database).
d103 5
a107 4
  Note that even if you don't have an /etc/termcap file, JOE will run: it
  will assume that the terminal is "ANSI" (but you need to compile it this
  way for it to be able to use the builtin ANSI termcap entry- if it's
  compiled for terminfo, it can not use its built-in termcap entry).
d109 3
a111 3
=-=-=-=-=-=-=-=-=-=-=-=
Verify the installation
=-=-=-=-=-=-=-=-=-=-=-=
d113 8
a120 1
A number of features should be tested:
d122 2
a123 2
Shell windows:
--------------
d125 1
a125 3
Please test the installation by trying the shell command: ^K '  A shell
prompt should appear in the window and you should be able to type "ls".  If
not, two things could be broken:
d127 1
a127 5
   JOE could not open a pseudo terminal (pty), which is unfortunately one of
the two most incompatible parts of the UNIX API.  Take a look at tty.c-
there are several methods for opening the pty: mess with the "#ifdefs" until
you find a method which works (and send a bug report for your operating
system).
d129 2
a130 2
   The SHELL environment variable is not set or exported (Cygwin has this
problem).  Put:
d132 1
a132 2
	export SHELL=/bin/bash
    or  setenv SHELL /bin/bash
d134 1
a134 2
   In you .profile or .cshrc file and send mail to the Cygwin mailing list
so that they fix this problem.
d136 1
a136 2
Process groups:
---------------
d138 3
a140 6
Once you have a shell window open, try to suspend JOE: ^K Z.  Then resume
it: "fg".  The shell window should still be active.  If not, your operating
system is not handling process groups properly.  Look for the setsid() or
setprgp() system calls in tty.c (this is the other most incompatible part of
the UNIX API).  Currently process groups appear to be broken in Cygwin (so
if you suspend JOE, any shells get killed).
d142 1
a142 2
Resize windows:
---------------
d144 1
a144 4
Try resizing the terminal emulator window: JOE should resize itself to
properly fit.  If this doesn't work, either ttgtsz() (in tty.c) is not
reading the size properly, or the SIGWINCH signal is not being received
by JOE (the handler is winchd() in tty.c).
d146 1
a146 2
Baud rate:
----------
d148 1
a148 1
JOE cares about the baud rate as reported by "stty":
d150 1
a150 1
	38400 or above:		Joe does not issue scrolling commands
d152 1
a152 2
	9600 - 19200:		Joe issues scrolling commands, but does
				not delay.
d154 1
a154 11
	0 - 4800:		Joe defeats output buffering by sleeping
				after every chunk of data is sent to the
				screen, by the amount of time that the data
				should take to get there as determined by
				the baud rate.  This allows typeahead to
				interrupt the screen update process: If you
				hit Page Down 100 times, only the final
				contents of the screen get sent to the
				terminal, otherwise you have to wait for all
				100 pages to get to the screen before you
				can do anything.
d156 1
a156 4
Sleeping should really be used at 9600 baud, but too many systems use 9600
as the default speed for terminal emulators.  If you are using a real serial
link to a real terminal, you may want to adjust these thresholds: search for
"9600" in tty.c.
d158 1
a158 2
Padding:
--------
d160 2
a161 3
Ideally either terminals can keep up with the baud rate or they backpressure
the computer using hardware flow control (RTS and CTS pins on RS-232
connector).
d163 1
a163 1
If not, there are two options, both bad:
d165 1
a165 2
Use XON/XOFF (^S/^Q) flow control: this works, but ^S causes the screen to
freeze, which freaks out new users, plus ^S is the search key in "jmacs".
d167 1
a167 4
Use padding: the termcap database indicates how long each command should
take.  If padding is enabled, JOE will send enough NUL characters after each
command to account for this time.  You need set the DOPADDING environment
variable or use the -dopadding option.
d169 1
a169 1
You should just buy a modern terminal :-)
d171 1
a171 3
=-=-=
Usage
=-=-=
d173 4
a176 242
USAGE:	joe filename [filename ...]

  Optionally precede each filename with +nnn to start at specified line number.

  Options:

 -mid		Cursor is recentered when scrolling is necessary
 -marking	Text between ^KB and cursor is highlighted (use with -lightoff)
 -asis		Characters 128 - 255 shown as-is
 -force		Force final newline when files are saved
 -nobackups	If you don't want backup files to be created
 -lightoff	Turn off highlighting after block copy or move
 -exask		^KX always confirms file name
 -beep		Beep on errors and when cursor goes past extremes
 -nosta		Disable top-most status line
 -keepup	%k and %c status line escape sequences updated frequently
 -pg nnn	No. lines to keep for PgUp/PgDn
 -csmode	^KF after a previous search does a ^L instead
 -backpath path Directory to store backup files
 -nonotice	Disable copyright notice
 -noxon		Attempt to turn off ^S/^Q processing
 -orphan	Put extra files given on command line in orphaned buffers
		instead of in windows
 -dopadding	Output pad characters (for when there is no tty handshaking)
 -lines nnn	Set no. screen lines
 -baud nnn	Set baud rate for terminal optimizations
 -columns nnn	Set no. screen columns
 -help		Start with help on
 -skiptop nnn	Don't use top nnn lines of the screen

  Options before each file name:

 -wordwrap		Wordwrap
 -autoindent		Auto indent
 -overwrite		Overtype mode
 -lmargin nnn		Left margin
 -rmargin nnn		Right margin
 -tab nnn		Tab width
 -indentc nnn		Indentation character (32 for space, 9 for tab)
 -istep nnn		Number of indentation columns
 -french		One space after '.', '?' and '!' for wordwrap
			and paragraph reformat instead of two.  Joe
			does not change the spacing you give, but
			sometimes it must put spacing in itself.  This
			selects how much is inserted.
 -spaces		TAB inserts spaces instead of tabs.
 -linums		Enable line numbers on each line
 -rdonly		File is read-only
 -crlf			File is uses CR-LF at ends of lines (MS-DOS files)

	These options can also be set in the joerc file.  The NOXON, LINES,
COLUMNS, DOPADDING and BAUD options can also be set with environment
variables.

	The JOETERM environment variable can be set to override the TERM
environment variable.

** IMPORTANT **

The baud rate must be correctly set or either typeahead will not interrupt 
the screen update and scrolling wont be used or there will be annoying 
delays in the screen update.  If you can't set the baud rate correctly with 
'stty', give a numeric value in the environment variable 'BAUD' or to the
command line options '-baud'.

The baud rate '38400' or 'extb' means infinite to joe.  Use it for X windows
and hardware console ttys.  No delays will be generated and scrolling will
not be used.

The baud rate '19200' or 'exta' means that joe will use scrolling, but will
not delay.

Use the LINES and COLUMNS environment variables or the -lines and -columns
command line options if you need the terminal size to be different than
whatever the termcap entry or stty reports.

Since most people use terminal emulators, JOE does not send out pad 
characters.  If you're using a real terminal and the padding matters, set 
the environment variable DOPADDING or give the command line option
-dopadding.

If you want joe to try to disable ^S/^Q processing, set the environment
variable NOXON or command line option -noxon.

A termcap file is included with JOE.  You might consider updating your own 
termcap file with the entries in it, particularly if you use ANSI/VT100ish 
terminals.  JOE understands some capabilities which are not usually supplied 
in normal termcap (see below).

                                 VARIATIONS
                                 =-=-=-=-=-

Termcap/Terminfo
=-=-=-=-=-=-=-=-

	JOE prefers to use the termcap terminal capability database.  It
attempts to find this file in:

	$HOME/.termcap		Personal .termcap in your home directory
	/etc/joe/termcap	Joe's termcap file
	/etc/termcap		Normal system termcap file

	Joe copies its own termcap file to /usr/local/lib/termcap (or
wherever the system-wide joerc file is going to go) when 'make install' is
run.

	Termcap is better than terminfo because it is a more open standard. 
Programs can directly access the termcap database and future versions of
terminfo may require programs to use curses.  The only argument in
terminfo's favor is that it is faster than termcap.  To fix this problem,
JOE will use a termcap index file if it exists and if it is up to date.

	This is the procedure to make the termcap index file:

		make termidx
		./termidx </etc/termcap >/etc/termcap.idx

	The /etc/termcap.idx is a text file which you can look at if you're
curious.

	JOE supports the GNU extensions to the termcap language and also
understands several new capabilities:

		AL DL IC DC RI LE UP DO SF SR

			Versions of the standard capabilities which accept
			an argument.  For example, RI with and argument of
			7 should move the cursor 7 positions to the right.

		rr

			Set this flag if the cursor is restricted to move
			only within the scrolling regions.  This is an optional
			mode on vt220s and several clones assume that this
			mode is always on.

		cV

			Like the 'cv' capability, but the cursor goes to the
			beginning of the specified line.  Like 'ESC [ n H' in
			ansi/vt100.

BROKEN TERMINALS
=-=-=-=-=-=-=-=-
"Joe does not update the screen correctly in Procomm"
"My Xenix console does not scroll correctly"

Old versions of Procomm, many other DOS comm programs and nearly every
PC-UNIX console (with the exception of Linux) does not emulate VT100s
properly.  There are usually one or more problems:

	1) Tabs are destructive

	2) Tabs are destructive when inverse mode is set

	3) Scrolling regions are not supported

	4) Cursor positioning is scrolling region relative instead of
	   screen relative.

	5) Some other program set the tab-stops to something other than
	   one tab stop every 8 columns.

	6) The erase commands (ESC [ J and ESC [ K) fill with inverse
	   video blanks instead of plain blanks when inverse mode is set.

	7) Backspace is destructive

Procomm 2.3 works fine- but make sure you have DEC VT100 selected, not 'ANSI
BBS' and also that backspace (BS) is set to 'non-destructive'.  If you must
use an old version of Procomm, try using the 'ansisys' or 'nansisys' termcap
entry.  Unix consoles usually do not have scrolling regions, but instead
have insert and delete line commands.  The 'fansi' entry and ones derived
from it will work correctly.  These termcap entries are provided in the
termcap file which came with joe.  If at all possible have your sysadmin
install these entries in '/etc/termcap'.  Even if your system normally uses
the terminfo database, you can copy Joe's termcap file into
/etc/termcap.

"I don't have root access and can't update the system's termcap file.  How
 do I get only Joe to use a different termcap entry?"

"My system uses terminfo.  How do I get only Joe to use a different termcap
 entry?"

What you should do is copy the termcap file which is provided with joe into
'.termcap' of your home directory.  Now suppose you want Joe to use the
'fansi' termcap entry:

If you use csh or tcsh, place this in your .cshrc file:

	setenv JOETERM fansi

If you use sh, ksh or bash, place this in your .profile file:

	JOETERM=fansi; export JOETERM

"I don't have root access and can't update the system's termcap file.  How
 do I get all of my programs to use one of Joe's termcap entries?"

Again, copy termcap into '.termcap' in your home directory, but set the
environment variables like this:

	setenv TERMCAP $HOME/.termcap
	setenv TERM fansi

"My system uses terminfo... how do I get all of my programs to use one of
 Joe's termcap entries?"

First, compile joe for terminfo.  You then have to 'tic' the terminfo
version of joe's termcap file into your account.  These are the commands for
doing this:

	1)	cd
	2)	mkdir .info
	3)	setenv TERMINFO $HOME/.info

		(or

		TERMINFO=$HOME/.info; export TERMINFO

		if you use bash, sh or ksh)

	4)	tic joe/terminfo

Then put the 'setenv TERMINFO $HOME/.info' line into your .login file or
'TERMINFO=$HOME/.info; export TERMINFO' in your .profile.  Now all of your
programs should look up the 'TERM' in your own personal terminfo database.

USING JOE IN A SHELL SCRIPT
=-=-=-=-=-=-=-=-=-=-=-=-=-=

Joe used to use /dev/tty to access the terminal.  This caused a problem with
idle-session killers (they would kill joe because the real tty device was
not being accessed for a long time), so now joe only uses /dev/tty if you
need to pipe a file into joe, as in:  echo "hi" | joe -

If you want to use joe in a shell script which has its stdin/stdout
redirected, but you don't need to do 'joe -', you should simply redirect
joe's stdin/stdout to /dev/tty:

	joe filename  </dev/tty >/dev/tty
@


1.5
log
@Change configure script to process *rc.in with sed script
@
text
@@


1.4
log
@Update readme, add some keywords to c.jsf.in
@
text
@d3 1
a3 1
=-=-=-=-=-=-=-=-=-=-=-=
d5 14
a18 1
=-=-=-=-=-=-=-=-=-=-=-=
d20 4
a23 1
  Joe uses automake and autoconf suites to build itself. Type:
d26 8
d36 22
a57 2
At this point you can try JOE without fully installing it by typing "./joe".
However, you need to copy a few files into your home directory first:
d59 3
a61 2
	# This is required for JOE to start:
	cp joerc ~/.joerc
d63 1
a63 4
	# The following are needed if you want syntax highlighting to work:
	mkdir ~/.joe
	mkdir ~/.joe/syntax
	cp syntax/*.jsf ~/.joe/syntax
d65 3
a67 2
Otherwise you need to do a real install, which generally requires root
privileges:
d69 4
a72 2
	su root
	make install
d74 4
a77 2
This will copy the executables to /usr/local/bin and runtime files to
/usr/local/etc.  After installation, you can then try it by typing "joe".
a170 40
=-=-=-=-=-=-=-=-=-=-=-=-=-
Common ./configure options
=-=-=-=-=-=-=-=-=-=-=-=-=-

Here are some common ./configure options:

  To have "make intall" install JOE into your home directory:

	./configure --prefix=$HOME

	The executables will end up in $HOME/bin and the runtime
	files will end up in $HOME/etc.  You need to have $HOME/bin in
	your path for this to work.


  For other install options:

	./configure --help


  To force JOE to use /etc/termcap file using its built-in termcap file parser
  (which is useful if you want to compile JOE so that it doesn't depend on any
  libraries other than libc):

	./configure --disable-curses --disable-termcap

  (--disable-termcap prevents JOE from using the termcap emulation functions
   in the -ltermcap library.  --disable-curses prevents JOE from using the
   termcap emulation functions in the -lcurses library).

  Otherwise, JOE tries to use the terminfo database via termcap
  emulation routines: see man tgetent, tgetstr, tgoto, etc.  (JOE has its
  own implementation of "curses", so curses is not required except to get
  access to the terminfo database).

  Note that even if you don't have an /etc/termcap file, JOE will run: it
  will assume that the terminal is "ANSI" (but you need to compile it this
  way for it to be able to use the builtin ANSI termcap entry).


d274 1
a274 1
	/usr/local/lib/termcap	Joe's termcap file
a316 12
JPICO
=-=-=

If you want JPICO to act more like real pico when you hit ^X (I.E., to have
it ask before saving), change the line:

exsave		^X		Exit

to:

ask,query,lose,query,abortbuf	^X	Exit

@


1.3
log
@Fix spelling errors in documentation.
@
text
@d11 16
d29 43
a71 3
  to build and install joe. The installation step may need increased
privileges to install into default places (/usr/local). You can then try it
by typing "joe".
d73 4
d78 53
a130 1
  To install in your home directory:
d134 4
d144 3
a146 1
  To force JOE to use /etc/termcap file using its built-in termcap file parser:
d154 8
a161 2
  Otherwise, JOE tries to use the terminfo database via the termcap
  emulation routines: see man tgetent, tgetstr, tgoto, etc.
@


1.2
log
@README update
@
text
@d4 1
a4 1
Installation proceedure
d7 1
a7 1
  Joe uses automake and autocnf suites to build itself. Type:
d14 1
a14 1
priviledges to install into default places (/usr/local). You can then try it
d17 23
d46 1
a46 1
  Optionally preceed each filename with +nnn to start at specified line number.
d61 1
a61 1
 -csmode	^KF after a pervious search does a ^L instead
d146 1
a146 1
	Joe coppies its own termcap file to /usr/local/lib/termcap (or
d153 1
a153 1
terminfo's favour is that it is faster than termcap.  To fix this problem,
d156 1
a156 1
	This is the proceedure to make the termcap index file:
@


1.1
log
@Initial revision
@
text
@a0 1

a2 3
A preformatted man page is in joe.man.  Joe.1 is an nroff formatted man
page.

d7 1
a7 1
	Edit the Makefile to change the following options:
d9 7
a15 2
	  Where joe's keymap initialization files, global termcap file and
	  terminfo source file will go if not /usr/local/lib.
d17 3
a19 15
	  Where joe will be placed when you do 'make install'
	  if not /usr/local/bin.

	  Where joe's man page will be placed, if not /usr/man/man1.

	  If you want to use the terminfo database instead of termcap.

	  Some systems require a few other changes (notably Xenix).  Check
	  out the comments in the Makefile.

	Type 'make' to create joe.  You can then try it by typing ./joe.

	Then log into root and type 'make install' to install joe.

	Type 'make clean' eliminate the .o files
d21 1
a21 1
	Set the baud rate properly (see below).
d23 1
a23 15
	See special notes below for dealing with broken terminals.

	See special notes below for 'JPICO'

	See special notes below for using joe within shell scripts.

	If you want 8-bit characters to get through, you will have to play
	with your stty settings:

	On Posix/SysV try this command: stty -istrip -iexten -inpck

USEAGE:	joe filenames

	Optionally preceed each filename with +nnn to start at specified 
line number.  
a162 11
	But if you really must use the terminfo database see the
instructions in the Makefile.  Also a terminfo version of the included
termcap file is provided, in case you want it added to the terminfo database
with 'tic'.

VOID trouble
=-=-=-=-=-=-

	If you're using an old C compiler which doesn't like the 'void'
type, uncomment the '#define void int' line from the config.h file.

a274 1

@


1.1.1.1
log
@First import of joe sources to cvs (as of joe-2.9)
@
text
@@
