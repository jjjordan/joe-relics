head	1.14;
access;
symbols
	joe_3_5:1.14
	joe-3_4:1.12
	help:1.12
	joe_3_1:1.10
	joe_3_0:1.10
	joe_2_9_8:1.10
	joe_2_9_8_pre1:1.8
	joe_2_9_7:1.6
	joe_2_9_7_pre3:1.6
	joe_2_9_7_pre2:1.5
	joe_2_9_6:1.4
	joe_2_9_5:1.3
	joe_2_9_4:1.2
	joe_2_9_2:1.2
	joe_2_9_1:1.2
	joe_2_9:1.1.1.1
	joe_source:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2006.07.19.00.27.12;	author jhallen;	state Exp;
branches;
next	1.13;

1.13
date	2006.07.18.23.31.54;	author jhallen;	state Exp;
branches;
next	1.12;

1.12
date	2006.05.14.17.14.04;	author jhallen;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.08.03.00.57;	author jhallen;	state Exp;
branches;
next	1.10;

1.10
date	2003.03.04.17.39.05;	author vsamel;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.21.11.23.05;	author vsamel;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.29.14.43.34;	author vsamel;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.27.13.27.32;	author vsamel;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.29.15.28.38;	author vsamel;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.29.14.39.51;	author vsamel;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.11.04.38.37;	author polesapart;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.11.04.06.35;	author polesapart;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.11.03.48.08;	author polesapart;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.11.03.39.55;	author polesapart;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.11.03.39.55;	author polesapart;	state Exp;
branches;
next	;


desc
@@


1.14
log
@UC -> USTR
@
text
@/*
 *	Position history
 *	Copyright
 *		(C) 1992 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 */
#include "types.h"

typedef struct pos POS;

struct pos {
	LINK(POS) link;
	P *p;
	W *w;
};

POS pos = { {&pos, &pos} };
POS frpos = { {&frpos, &frpos} };
POS *curpos = &pos;
int npos = 0;

static void markpos(W *w, P *p)
{
	POS *new = alitem(&frpos, sizeof(POS));

	new->p = NULL;
	pdupown(p, &new->p, USTR "markpos");
	poffline(new->p);
	new->w = w;
	enqueb(POS, link, &pos, new);
	if (npos == 20) {
		new = pos.link.next;
		prm(new->p);
		demote(POS, link, &frpos, new);
	} else {
		++npos;
	}
}

void afterpos(void)
{
	if (curpos != &pos) {
		demote(POS, link, &pos, curpos);
		curpos = &pos;
	}
}

void aftermove(W *w, P *p)
{
	if (pos.link.prev != &pos && pos.link.prev->w == w && pos.link.prev->p && labs(pos.link.prev->p->line - p->line) < 3) {
		poffline(pset(pos.link.prev->p, p));
	} else {
		markpos(w, p);
	}
}

void windie(W *w)
{
	POS *n;

	for (n = pos.link.prev; n != &pos; n = n->link.prev) {
		if (n->w == w) {
			n->w = NULL;
		}
	}
}

int unextpos(BW *bw)
{
	W *w = bw->parent;

      lp:
	if (curpos->link.next != &pos && curpos != &pos) {
		curpos = curpos->link.next;
		if (!curpos->p || !curpos->w) {
			goto lp;
		}
		if (w->t->curwin == curpos->w && curpos->p->byte == ((BW *) w->t->curwin->object)->cursor->byte) {
			goto lp;
		}
		if (w->t->curwin != curpos->w) {
			w->t->curwin = curpos->w;
			if (w->t->curwin->y == -1) {
				wfit(w->t);
			}
		}
		w = w->t->curwin;
		bw = (BW *) w->object;
		if (bw->cursor->byte != curpos->p->byte) {
			pset(bw->cursor, curpos->p);
		}
		return 0;
	} else {
		return -1;
	}
}

int uprevpos(BW *bw)
{
	W *w = bw->parent;

      lp:
	if (curpos->link.prev != &pos) {
		curpos = curpos->link.prev;
		if (!curpos->p || !curpos->w) {
			goto lp;
		}
		if (w->t->curwin == curpos->w && curpos->p->byte == ((BW *) w->t->curwin->object)->cursor->byte) {
			goto lp;
		}
		if (w->t->curwin != curpos->w) {
			w->t->curwin = curpos->w;
			if (w->t->curwin->y == -1) {
				wfit(w->t);
			}
		}
		w = w->t->curwin;
		bw = (BW *) w->object;
		if (bw->cursor->byte != curpos->p->byte) {
			pset(bw->cursor, curpos->p);
		}
		return 0;
	} else {
		return -1;
	}
}
@


1.13
log
@change US to UC
@
text
@d28 1
a28 1
	pdupown(p, &new->p, UC "markpos");
@


1.12
log
@Massive check-in: rearrange header files, fix -Wall warnings.
@
text
@d28 1
a28 1
	pdupown(p, &new->p, US "markpos");
@


1.11
log
@add joe_debug
@
text
@a7 1
#include "config.h"
a9 8
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif

#include "b.h"
#include "queue.h"
#include "w.h"

@


1.10
log
@change 0 to NULL where we're talking about pointers
@
text
@d37 1
a37 1
	pdupown(p, &new->p);
@


1.9
log
@include headers needed to compile without implicit function declarations warnings
@
text
@d36 1
a36 1
	new->p = 0;
d73 1
a73 1
			n->w = 0;
@


1.8
log
@include only headers which are needed
@
text
@d11 4
@


1.7
log
@put struct definitions and other goodies into types.h
@
text
@d11 1
a11 2
#include <stdlib.h>
#include "poshist.h"
a12 1
#include "b.h"
a13 1
#include "bw.h"
@


1.6
log
@version 2.9.7-pre3
@
text
@d2 8
a9 5
	Position history
	Copyright (C) 1992 Joseph H. Allen

	This file is part of JOE (Joe's Own Editor)
*/
@


1.5
log
@take the CVS repository to version 2.9.7-pre2
@
text
@d28 1
a28 1
void markpos(W * w, P * p)
d54 1
a54 1
void aftermove(W * w, P * p)
d63 1
a63 1
void windie(W * w)
d74 1
a74 1
int unextpos(BW * bw)
d104 1
a104 1
int uprevpos(BW * bw)
@


1.4
log
@changed as of joe-2.9.6
@
text
@d18 1
a18 1
	LINK (POS) link;
d28 3
a30 2
void markpos (W *w, P *p) {
	POS *new = alitem (&frpos, sizeof (POS));
d33 2
a34 2
	pdupown (p, &new->p);
	poffline (new->p);
d36 1
a36 1
	enqueb (POS, link, &pos, new);
d39 2
a40 2
		prm (new->p);
		demote (POS, link, &frpos, new);
d46 2
a47 1
void afterpos (void) {
d49 2
a50 2
		  demote (POS, link, &pos, curpos);
		  curpos = &pos;
d54 4
a57 3
void aftermove (W *w, P *p) {
	if (pos.link.prev != &pos && pos.link.prev->w == w && pos.link.prev->p && labs (pos.link.prev->p->line - p->line) < 3) {
		poffline (pset (pos.link.prev->p, p));
d59 1
a59 1
		markpos (w, p);
d63 2
a64 1
void windie (W *w) {
d74 2
a75 1
int unextpos (BW *bw) {
d82 1
a82 1
			  goto lp;
d86 1
a86 1
		}	
d90 1
a90 1
				wfit (w->t);
d96 1
a96 1
			pset (bw->cursor, curpos->p);
d104 2
a105 1
int uprevpos (BW *bw) {
d112 1
a112 1
			  goto lp;
d114 1
a114 1
		if (w->t->curwin == curpos->w && curpos->p->byte == ((BW *) w->t->curwin->object)->cursor->byte) { 
d120 1
a120 1
				wfit (w->t);
d126 1
a126 1
			pset (bw->cursor, curpos->p);
d129 1
a129 1
	} else { 
@


1.3
log
@changed as of joe-2.9.5
@
text
@d1 3
a3 2
/* Position history
   Copyright (C) 1992 Joseph H. Allen
d5 2
a6 14
This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */ 
d17 110
a126 109
struct pos
 {
 LINK(POS) link;
 P *p;
 W *w;
 };

POS pos={{&pos,&pos}};
POS frpos={{&frpos,&frpos}};
POS *curpos= &pos;
int npos=0;

void markpos(w,p)
W *w;
P *p;
 {
 POS *new=alitem(&frpos,sizeof(POS));
 new->p=0;
 pdupown(p,&new->p);
 poffline(new->p);
 new->w=w;
 enqueb(POS,link,&pos,new);
 if(npos==20)
  {
  new=pos.link.next;
  prm(new->p);
  demote(POS,link,&frpos,new);
  }
 else ++npos;
 }

void afterpos()
 {
 if(curpos!= &pos)
  {
  demote(POS,link,&pos,curpos);
  curpos= &pos;
  }
 }

void aftermove(w,p)
W *w;
P *p;
 {
 if(pos.link.prev!=&pos &&
    pos.link.prev->w==w &&
    pos.link.prev->p &&
    labs(pos.link.prev->p->line-p->line)<3
   )
  poffline(pset(pos.link.prev->p,p));
 else markpos(w,p);
 }

void windie(w)
W *w;
 {
 POS *n;
 for(n=pos.link.prev;n!=&pos;n=n->link.prev) if(n->w==w) n->w=0;
 }

int unextpos(bw)
BW *bw;
 {
 W *w=bw->parent;
 lp:
 if(curpos->link.next!=&pos && curpos!=&pos)
  {
  curpos=curpos->link.next;
  if(!curpos->p || !curpos->w) goto lp;
  if(w->t->curwin==curpos->w &&
     curpos->p->byte==((BW *)w->t->curwin->object)->cursor->byte) goto lp;
  if(w->t->curwin!=curpos->w)
   {
   w->t->curwin=curpos->w;
   if(w->t->curwin->y== -1) wfit(w->t);
   }
  w=w->t->curwin;
  bw=(BW *)w->object;
  if(bw->cursor->byte!=curpos->p->byte)
   pset(bw->cursor,curpos->p);
  return 0;
  }
 else return -1;
 }

int uprevpos(bw)
BW *bw;
 {
 W *w=bw->parent;
 lp:
 if(curpos->link.prev!=&pos)
  {
  curpos=curpos->link.prev;
  if(!curpos->p || !curpos->w) goto lp;
  if(w->t->curwin==curpos->w &&
     curpos->p->byte==((BW *)w->t->curwin->object)->cursor->byte) goto lp;
  if(w->t->curwin!=curpos->w)
   {
   w->t->curwin=curpos->w;
   if(w->t->curwin->y== -1) wfit(w->t);
   }
  w=w->t->curwin;
  bw=(BW *)w->object;
  if(bw->cursor->byte!=curpos->p->byte)
   pset(bw->cursor,curpos->p);
  return 0;
  }
 else return -1;
 }
@


1.2
log
@changes for joe-2.9.1
@
text
@a23 1
#include "zstr.h"
@


1.1
log
@Initial revision
@
text
@d19 1
d76 1
a76 1
    Labs(pos.link.prev->p->line-p->line)<3
@


1.1.1.1
log
@First import of joe sources to cvs (as of joe-2.9)
@
text
@@
