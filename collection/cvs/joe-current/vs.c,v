head	1.17;
access;
symbols
	joe_3_5:1.17
	joe-3_4:1.17
	help:1.17
	joe_3_1:1.16
	joe_3_0:1.16
	joe_2_9_8:1.15
	joe_2_9_8_pre1:1.11
	joe_2_9_7:1.5
	joe_2_9_7_pre3:1.5
	joe_2_9_7_pre2:1.4
	joe_2_9_6:1.3
	joe_2_9_5:1.2
	joe_2_9_4:1.1.1.1
	joe_2_9_2:1.1.1.1
	joe_2_9_1:1.1.1.1
	joe_2_9:1.1.1.1
	joe_source:1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2006.05.14.17.14.04;	author jhallen;	state Exp;
branches;
next	1.16;

1.16
date	2004.04.12.13.58.28;	author jhallen;	state Exp;
branches;
next	1.15;

1.15
date	2003.03.04.17.39.35;	author vsamel;	state Exp;
branches;
next	1.14;

1.14
date	2003.03.04.17.37.41;	author vsamel;	state Exp;
branches;
next	1.13;

1.13
date	2002.06.10.12.09.40;	author vsamel;	state Exp;
branches;
next	1.12;

1.12
date	2002.01.15.09.25.11;	author vsamel;	state Exp;
branches;
next	1.11;

1.11
date	2001.12.10.14.01.27;	author vsamel;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.04.13.17.42;	author vsamel;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.04.13.14.16;	author vsamel;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.29.14.43.34;	author vsamel;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.27.13.27.32;	author vsamel;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.12.15.35.52;	author vsamel;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.29.15.28.38;	author vsamel;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.29.14.39.52;	author vsamel;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.11.04.38.37;	author polesapart;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.11.04.06.35;	author polesapart;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.11.03.40.25;	author polesapart;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.11.03.40.25;	author polesapart;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Massive check-in: rearrange header files, fix -Wall warnings.
@
text
@/*
 *	Variable length strings
 *	Copyright
 *		(C) 1992 Joseph H. Allen
 *
 *	This file is part of JOE (Joe's Own Editor)
 */
#include "types.h"

int sicmp(unsigned char a, unsigned char b)
{
	if (a >= 'A' || a <= 'Z')
		a += 'a' - 'A';
	if (b >= 'A' || b <= 'Z')
		b += 'a' - 'A';
	return scmp(a, b);
}

sELEMENT *vsmk(int len)
{
	int *new = (int *) joe_malloc((1 + len) * sizeof(sELEMENT) + 2 * sizeof(int));

	new[0] = len;
	new[1] = 0;
	((sELEMENT *)(new + 2))[0] = sdup(sterm);
	return (sELEMENT *)(new + 2);
}

void vsrm(sELEMENT *vary)
{
	if (vary)
		joe_free((int *) vary - 2);
}

int slen(sELEMENT *ary)
{
	if (ary) {
		sELEMENT *beg = ary;
		while (scmp(*ary, sterm))
			++ary;
		return ary - beg;
	} else
		return 0;
}

sELEMENT *vsensure(sELEMENT *vary, int len)
{
	if (!vary)
		vary = vsmk(len);
	else if (len > sSiz(vary)) {
		len += (len >> 2);
		vary = (sELEMENT *)(2 + (int *) joe_realloc((int *) vary - 2, (len + 1) * sizeof(sELEMENT) + 2 * sizeof(int)));

		sSiz(vary) = len;
	}
	return vary;
}

sELEMENT *vstrunc(sELEMENT *vary, int len)
{
	if (!vary || len > sLEN(vary))
		vary = vsensure(vary, len + 16);
	if (len < sLen(vary)) {
		vary[len] = vary[sLen(vary)];
		sLen(vary) = len;
	} else if (len > sLen(vary)) {
		vary = vsfill(vary, sLen(vary), sblank, len - sLen(vary));
	}
	return vary;
}

sELEMENT *vsfill(sELEMENT *vary, int pos, sELEMENT el, int len)
{
	int olen = sLEN(vary), x;

	if (!vary || pos + len > sSIZ(vary))
		vary = vsensure(vary, pos + len);
	if (pos + len > olen) {
		vary[pos + len] = vary[olen];
		sLen(vary) = pos + len;
	}
	for (x = pos; x != pos + len; ++x)
		vary[x] = sdup(el);
	if (pos > olen)
		vary = vsfill(vary, pos, sblank, pos - olen);
	return vary;
}

sELEMENT *vsncpy(sELEMENT *vary, int pos, sELEMENT *array, int len)
{
	int olen = sLEN(vary);

	if (!vary || pos + len > sSIZ(vary))
		vary = vsensure(vary, pos + len);
	if (pos + len > olen) {
		vary[pos + len] = vary[olen];
		sLen(vary) = pos + len;
	}
	if (pos > olen)
		vary = vsfill(vary, olen, sblank, pos - olen);
	mmove(vary + pos, array, len * sizeof(sELEMENT));
	return vary;
}

sELEMENT *vsndup(sELEMENT *vary, int pos, sELEMENT *array, int len)
{
	int olen = sLEN(vary), x;

	if (!vary || pos + len > sSIZ(vary))
		vary = vsensure(vary, pos + len);
	if (pos + len > olen) {
		vary[pos + len] = vary[olen];
		sLen(vary) = pos + len;
	}
	if (pos > olen)
		vary = vsfill(vary, olen, sblank, pos - olen);
	for (x = pos; x != len; ++x)
		vary[x] = sdup(array[x]);
	return vary;
}

sELEMENT *vsdup(sELEMENT *vary)
{
	return vsndup(NULL, 0, vary, sLEN(vary));
}

sELEMENT *_vsset(sELEMENT *vary, int pos, sELEMENT el)
{
	if (!vary || pos + 1 > sSIZ(vary))
		vary = vsensure(vary, pos + 1);
	if (pos > sLen(vary)) {
		vary = vsfill(vary, sLen(vary), sblank, pos - sLen(vary));
		vary[pos + 1] = vary[pos];
		vary[pos] = el;
		sLen(vary) = pos + 1;
	} else if (pos == sLen(vary)) {
		vary[pos + 1] = vary[pos];
		vary[pos] = el;
		sLen(vary) = pos + 1;
	} else {
		sdel(vary[pos]);
		vary[pos] = el;
	}
	return vary;
}

#ifdef junk

sELEMENT *vsins(sELEMENT *vary, int pos, int n)
{
	if (!vary || sLEN(vary) + n > sSIZ(vary))
		vary = vsensure(vary, sLEN(vary) + n);
	if (pos >= sLen(vary))
		vary = vstrunc(vary, pos + n);
	else {
		mmove(vary + pos + n, vary + pos, sLen(vary) - (pos + n) + 1);
		sLen(vary) += n;
	}
	return vary;
}

sELEMENT *vsdel(sELEMENT *vary, int pos, int n)
{
	if (pos >= sLEN(vary))
		return vary;
	if (pos + n >= sLen(vary))
		return vstrunc(vary, pos);
	mmove(vary + pos, vary + pos + n, sLen(vary) - (pos + n) + 1);
	sLen(vary) -= n;
	return vary;
}

int _scmp(sELEMENT a, sELEMENT b)
{
	return scmp(a, b);
}

sELEMENT *vssort(sELEMENT *ary, int len)
{
	if (!ary || !len)
		return ary;
	qsort(ary, len, sizeof(sELEMENT), _scmp);
	return ary;
}

#endif

int vsbsearch(sELEMENT *ary, int len, sELEMENT el)
{
	int x, y, z;

	if (!ary || !len)
		return 0;
	y = len;
	x = 0;
	z = ~0;
	while (z != (x + y) / 2) {
		z = (x + y) / 2;
		switch (scmp(el, ary[z])) {
		case 1:
			x = z;
			break;
		case -1:
			y = z;
			break;
		case 0:
			return z;
		}
	}
	return y;
}

#ifdef junk

int vsfirst(sELEMENT *ary, int len, sELEMENT el)
{
	int x;

	if (!ary || !len)
		return ~0;
	for (x = 0; x != len; ++x)
		if (!scmp(ary[x], el))
			return x;
	return ~0;
}

int vslast(sELEMENT *ary, int len, sELEMENT el)
{
	int x = len;

	if (!ary || !len)
		return ~0;
	do {
		--x;
		if (!scmp(ary[x], el))
			return x;
	} while (x);
	return ~0;
}

#endif

int vscmpn(sELEMENT *a, int alen, sELEMENT *b, int blen)
{
	int x, l;
	int t;

	if (!a && !b)
		return 0;
	if (!a)
		return -1;
	if (!b)
		return 1;
	if (alen > blen)
		l = sLen(a);
	else
		l = blen;
	for (x = 0; x != l; ++x)
		if ((t = scmp(a[x], b[x])) != 0)
			return t;
	if (alen > blen)
		return 1;
	if (alen < blen)
		return -1;
	return 0;
}

int vscmp(sELEMENT *a, sELEMENT *b)
{
	return vscmpn(sv(a), sv(b));
}
#ifdef junk
int vsicmpn(sELEMENT *a, int alen, sELEMENT *b, int blen)
{
	int x, l;
	int t;

	if (!a && !b)
		return 0;
	if (!a)
		return -1;
	if (!b)
		return 1;
	if (alen > blen)
		l = sLen(a);
	else
		l = blen;
	for (x = 0; x != l; ++x)
		if (t = sicmp(a[x], b[x]))
			return t;
	if (alen > blen)
		return 1;
	if (alen < blen)
		return -1;
	return 0;
}

int vss(sELEMENT *a, int alen, sELEMENT *b, int blen)
{
	int x;

	if (!a && !b)
		return 0;
	if (!a || !b)
		return ~0;
	if (alen < blen)
		return ~0;
	if (!blen)
		return 0;
	for (x = 0; x != alen - blen; ++x)
		if (!vscmpn(a, blen, b, blen))
			return x;
	return ~0;
}

#endif

int vsscan(sELEMENT *a, int alen, sELEMENT *b, int blen)
{
	int x;

	for (x = 0; x != alen; ++x) {
		int z = vsbsearch(b, blen, a[x]);

		if (z < blen && !scmp(b[z], a[x]))
			return x;
	}
	return ~0;
}

int vsspan(sELEMENT *a, int alen, sELEMENT *b, int blen)
{
	int x;

	for (x = 0; x != alen; ++x) {
		int z = vsbsearch(b, blen, a[x]);

		if (z == blen || scmp(b[z], a[x]))
			break;
	}
	return x;
}

#ifdef junk

sELEMENT *vsread(sELEMENT d, int p, int (*getC)(), void *ptr)
{
	int c;

	if (!d)
		d = vsmk(10);
	c = getC(ptr);
	if (c == NO_MORE_DATA) {
		vsrm(d);
		return NULL;
	} else if (c == '\n')
		return d;
	else {
		d = vsset(d, p, c);
		p++;
	}
	while (c = getC(ptr), c != NO_MORE_DATA && c != '\n') {
		d = vsset(d, p, c);
		p++;
	}
	return d;
}

sELEMENT *vwords(sELEMENT *s, sELEMENT **a, int len, sELEMENT t)
{
	int x;

	if (!s)
		s = vsmk(32);
	else
		s = vstrunc(s, 0);
	for (x = 0; x != len; ++x) {
		s = vsncpy(s, sLEN(s), sz(a[x]));
		if (a[1])
			s = vsadd(s, t);
	}
	return s;
}

#endif
@


1.16
log
@	Added -notite global option: when set, prevents screen from
	being restored on exit.

	Added -usetabs global option: when set, uses tabs for cursor
	position update (which was the default before).  Now we don't
	use tabs by default.

        Completed change to 'unsigned char *' and elimination of
        MAXINT.  What a mess.  No warnings with gcc -pedantic.

	Fix UTF-8 bugs where cursor was not correct on scrolled screen.
@
text
@a7 1
#include "config.h"
a9 4
#include "blocks.h"
#include "utils.h"
#include "vs.h"

@


1.15
log
@change 0 to NULL where we're talking about pointers
@
text
@d15 1
a15 1
int sicmp(char a, char b)
d358 1
a358 1
	if (c == MAXINT) {
d367 1
a367 1
	while (c = getC(ptr), c != MAXINT && c != '\n') {
@


1.14
log
@make vsrm() and slen() of type sELEMENT *
@
text
@d360 1
a360 1
		return 0;
@


1.13
log
@change "expr, expr" to "expr; expr" where appropriate
@
text
@d34 1
a34 1
void vsrm(char *vary)
d40 1
a40 1
int slen(char *ary)
@


1.12
log
@change sELEMENT #define to typedef
@
text
@d363 8
a370 4
	else
		d = vsset(d, p, c), p++;
	while (c = getC(ptr), c != MAXINT && c != '\n')
		d = vsset(d, p, c), p++;
@


1.11
log
@change (m|re|c)alloc() and free() into joe_(m|re|c)alloc() and joe_free()
(preparation for further error checking)
@
text
@d24 1
a24 2
sELEMENT(*vsmk(len))
int len;
d26 1
a26 1
	int *new = (int *) joe_malloc((1 + len) * sizeof(sCAST) + 2 * sizeof(int));
d30 2
a31 2
	((sELEMENT(*))(new + 2))[0] = sdup(sterm);
	return (sELEMENT(*))(new + 2);
d43 1
a43 1
		sELEMENT(*beg) = ary;
d51 1
a51 2
sELEMENT(*vsensure(vary, len)) sELEMENT(*vary);
int len;
d57 1
a57 1
		vary = (sELEMENT(*))(2 + (int *) joe_realloc((int *) vary - 2, (len + 1) * sizeof(sCAST) + 2 * sizeof(int)));
d64 1
a64 2
sELEMENT(*vstrunc(vary, len)) sELEMENT(*vary);
int len;
d77 1
a77 3
sELEMENT(*vsfill(vary, pos, el, len)) sELEMENT(*vary);
sELEMENT(el);
int pos, len;
d94 1
a94 3
sELEMENT(*vsncpy(vary, pos, array, len)) sELEMENT(*vary);
sELEMENT(*array);
int pos, len;
d106 1
a106 1
	mmove(vary + pos, array, len * sizeof(sCAST));
d110 1
a110 3
sELEMENT(*vsndup(vary, pos, array, len)) sELEMENT(*vary);
sELEMENT(*array);
int pos, len;
d127 1
a127 1
sELEMENT(*vsdup(vary)) sELEMENT(*vary);
d132 1
a132 3
sELEMENT(*_vsset(vary, pos, el)) sELEMENT(*vary);
sELEMENT(el);
int pos;
d154 1
a154 2
sELEMENT(*vsins(vary, pos, n)) sELEMENT(*vary);
int pos, n;
d167 1
a167 2
sELEMENT(*vsdel(vary, pos, n)) sELEMENT(*vary);
int pos, n;
d178 1
a178 3
int _scmp(a, b) sELEMENT(a);

sELEMENT(b);
d183 1
a183 2
sELEMENT(*vssort(ary, len)) sELEMENT(*ary);
int len;
d187 1
a187 1
	qsort(ary, len, sizeof(sCAST), _scmp);
d193 1
a193 1
int vsbsearch(char *ary, int len, char el)
d220 1
a220 4
int vsfirst(ary, len, el) sELEMENT(*ary);

sELEMENT(el);
int len;
d232 1
a232 4
int vslast(ary, len, el) sELEMENT(*ary);

sELEMENT(el);
int len;
d248 1
a248 1
int vscmpn(char *a, int alen, char *b, int blen)
d273 1
a273 1
int vscmp(char *a, char *b)
d278 1
a278 4
int vsicmpn(a, alen, b, blen) sELEMENT(*a);

sELEMENT(*b);
int alen, blen;
d303 1
a303 4
int vss(a, alen, b, blen) sELEMENT(*a);

sELEMENT(*b);
int alen, blen;
d323 1
a323 1
int vsscan(char *a, int alen, char *b, int blen)
d336 1
a336 1
int vsspan(char *a, int alen, char *b, int blen)
d351 1
a351 4
sELEMENT(*vsread(d, p, getC, ptr)) sELEMENT(*d);
int (*getC) ();
int p;
void *ptr;
d370 1
a370 3
sELEMENT(*vwords(s, a, len, t))
char **a, *s, t;
int len;
@


1.10
log
@change indentation of cases in the switch() statement
@
text
@a10 4
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif

d12 1
d27 1
a27 1
	int *new = (int *) malloc((1 + len) * sizeof(sCAST) + 2 * sizeof(int));
d38 1
a38 1
		free((int *) vary - 2);
d59 1
a59 1
		vary = (sELEMENT(*))(2 + (int *) realloc((int *) vary - 2, (len + 1) * sizeof(sCAST) + 2 * sizeof(int)));
@


1.9
log
@change indentation of do {} while() cycles
@
text
@d224 1
a224 1
			case 1:
d227 1
a227 1
			case -1:
d230 1
a230 1
			case 0:
@


1.8
log
@include only headers which are needed
@
text
@d267 1
a267 2
	}
	while (x);
@


1.7
log
@put struct definitions and other goodies into types.h
@
text
@d14 1
a14 1
#include <varargs.h>
@


1.6
log
@use mfwrd() and mbkwd() only as internal functions to mmove()
@
text
@d2 8
a9 5
	Variable length strings
	Copyright (C) 1992 Joseph H. Allen

	This file is part of JOE (Joe's Own Editor)
*/
a10 1
#include "config.h"
@


1.5
log
@version 2.9.7-pre3
@
text
@d114 1
a114 1
	mfwrd(vary + pos, array, len * sizeof(sCAST));
d174 1
a174 1
		mbkwd(vary + pos + n, vary + pos, sLen(vary) - (pos + n) + 1);
d187 1
a187 1
	mfwrd(vary + pos, vary + pos + n, sLen(vary) - (pos + n) + 1);
@


1.4
log
@take the CVS repository to version 2.9.7-pre2
@
text
@d16 1
a16 2
int sicmp(a, b)
char a, b;
d36 1
a36 1
void vsrm(vary) sELEMENT(*vary);
d42 1
a42 1
int slen(ary) sELEMENT(*ary);
d210 1
a210 4
int vsbsearch(ary, len, el) sELEMENT(*ary);

sELEMENT(el);
int len;
d272 1
a272 4
int vscmpn(a, alen, b, blen) sELEMENT(*a);

sELEMENT(*b);
int alen, blen;
d297 1
a297 3
int vscmp(a, b) sELEMENT(*a);

sELEMENT(*b);
d353 1
a353 4
int vsscan(a, alen, b, blen) sELEMENT(*a);

sELEMENT(*b);
int alen, blen;
d366 1
a366 4
int vsspan(a, alen, b, blen) sELEMENT(*a);

sELEMENT(*b);
int alen, blen;
@


1.3
log
@changed as of joe-2.9.6
@
text
@d8 4
a12 1
#include "config.h"
d16 2
a17 3
int
sicmp (a, b)
     char a, b;
d23 1
a23 1
	return scmp (a, b);
d26 2
a27 2
sELEMENT (*vsmk (len))
     int len;
d29 2
a30 3
	int *new =
		(int *) malloc ((1 + len) * sizeof (sCAST) +
				2 * sizeof (int));
d33 2
a34 2
	((sELEMENT (*))(new + 2))[0] = sdup (sterm);
	return (sELEMENT (*))(new + 2);
d37 1
a37 2
void
vsrm (vary) sELEMENT (*vary);
d40 1
a40 1
		free ((int *) vary - 2);
d43 1
a43 2
int
slen (ary) sELEMENT (*ary);
d45 6
a50 8
	if (ary)
	  {
		  sELEMENT (*beg) = ary;
		  while (scmp (*ary, sterm))
			  ++ary;
		  return ary - beg;
	  }
	else
d54 2
a55 3
sELEMENT (*vsensure (vary, len)) sELEMENT (*vary);
     int
	     len;
d58 7
a64 13
		vary = vsmk (len);
	else if (len > sSiz (vary))
	  {
		  len += (len >> 2);
		  vary = (sELEMENT (*))(2 + (int *) realloc (
							     (int *) vary - 2,
							     (len +
							      1) *
							     sizeof (sCAST) +
							     2 *
							     sizeof (int)));
		  sSiz (vary) = len;
	  }
d68 11
a78 17
sELEMENT (*vstrunc (vary, len)) sELEMENT (*vary);
     int
	     len;
{
	if (!vary || len > sLEN (vary))
		vary = vsensure (vary, len + 16);
	if (len < sLen (vary))
	  {
		  vary[len] = vary[sLen (vary)];
		  sLen (vary) = len;
	  }
	else if (len > sLen (vary))
	  {
		  vary =
			  vsfill (vary, sLen (vary), sblank,
				  len - sLen (vary));
	  }
d82 12
a93 12
sELEMENT (*vsfill (vary, pos, el, len)) sELEMENT (*vary);
sELEMENT (el);
     int pos, len;
{
	int olen = sLEN (vary), x;
	if (!vary || pos + len > sSIZ (vary))
		vary = vsensure (vary, pos + len);
	if (pos + len > olen)
	  {
		  vary[pos + len] = vary[olen];
		  sLen (vary) = pos + len;
	  }
d95 1
a95 1
		vary[x] = sdup (el);
d97 1
a97 1
		vary = vsfill (vary, pos, sblank, pos - olen);
d101 12
a112 12
sELEMENT (*vsncpy (vary, pos, array, len)) sELEMENT (*vary);
sELEMENT (*array);
     int pos, len;
{
	int olen = sLEN (vary);
	if (!vary || pos + len > sSIZ (vary))
		vary = vsensure (vary, pos + len);
	if (pos + len > olen)
	  {
		  vary[pos + len] = vary[olen];
		  sLen (vary) = pos + len;
	  }
d114 2
a115 2
		vary = vsfill (vary, olen, sblank, pos - olen);
	mfwrd (vary + pos, array, len * sizeof (sCAST));
d119 12
a130 12
sELEMENT (*vsndup (vary, pos, array, len)) sELEMENT (*vary);
sELEMENT (*array);
     int pos, len;
{
	int olen = sLEN (vary), x;
	if (!vary || pos + len > sSIZ (vary))
		vary = vsensure (vary, pos + len);
	if (pos + len > olen)
	  {
		  vary[pos + len] = vary[olen];
		  sLen (vary) = pos + len;
	  }
d132 1
a132 1
		vary = vsfill (vary, olen, sblank, pos - olen);
d134 1
a134 1
		vary[x] = sdup (array[x]);
d138 1
a138 1
sELEMENT (*vsdup (vary)) sELEMENT (*vary);
d140 1
a140 1
	return vsndup (NULL, 0, vary, sLEN (vary));
d143 19
a161 26
sELEMENT (*_vsset (vary, pos, el)) sELEMENT (*vary);
sELEMENT (el);
     int pos;
{
	if (!vary || pos + 1 > sSIZ (vary))
		vary = vsensure (vary, pos + 1);
	if (pos > sLen (vary))
	  {
		  vary =
			  vsfill (vary, sLen (vary), sblank,
				  pos - sLen (vary));
		  vary[pos + 1] = vary[pos];
		  vary[pos] = el;
		  sLen (vary) = pos + 1;
	  }
	else if (pos == sLen (vary))
	  {
		  vary[pos + 1] = vary[pos];
		  vary[pos] = el;
		  sLen (vary) = pos + 1;
	  }
	else
	  {
		  sdel (vary[pos]);
		  vary[pos] = el;
	  }
d167 11
a177 14
sELEMENT (*vsins (vary, pos, n)) sELEMENT (*vary);
     int
	     pos, n;
{
	if (!vary || sLEN (vary) + n > sSIZ (vary))
		vary = vsensure (vary, sLEN (vary) + n);
	if (pos >= sLen (vary))
		vary = vstrunc (vary, pos + n);
	else
	  {
		  mbkwd (vary + pos + n, vary + pos,
			 sLen (vary) - (pos + n) + 1);
		  sLen (vary) += n;
	  }
d181 2
a182 3
sELEMENT (*vsdel (vary, pos, n)) sELEMENT (*vary);
     int
	     pos, n;
d184 1
a184 1
	if (pos >= sLEN (vary))
d186 4
a189 4
	if (pos + n >= sLen (vary))
		return vstrunc (vary, pos);
	mfwrd (vary + pos, vary + pos + n, sLen (vary) - (pos + n) + 1);
	sLen (vary) -= n;
d193 3
a195 3
int
_scmp (a, b) sELEMENT (a);
sELEMENT (b);
d197 1
a197 1
	return scmp (a, b);
d200 2
a201 3
sELEMENT (*vssort (ary, len)) sELEMENT (*ary);
     int
	     len;
d205 1
a205 1
	qsort (ary, len, sizeof (sCAST), _scmp);
d211 4
a214 4
int
vsbsearch (ary, len, el) sELEMENT (*ary);
sELEMENT (el);
     int len;
d217 1
d223 13
a235 15
	while (z != (x + y) / 2)
	  {
		  z = (x + y) / 2;
		  switch (scmp (el, ary[z]))
		    {
		    case 1:
			    x = z;
			    break;
		    case -1:
			    y = z;
			    break;
		    case 0:
			    return z;
		    }
	  }
d241 4
a244 4
int
vsfirst (ary, len, el) sELEMENT (*ary);
sELEMENT (el);
     int len;
d247 1
d251 1
a251 1
		if (!scmp (ary[x], el))
d256 4
a259 4
int
vslast (ary, len, el) sELEMENT (*ary);
sELEMENT (el);
     int len;
d262 1
d265 5
a269 6
	do
	  {
		  --x;
		  if (!scmp (ary[x], el))
			  return x;
	  }
d276 4
a279 4
int
vscmpn (a, alen, b, blen) sELEMENT (*a);
sELEMENT (*b);
     int alen, blen;
d283 1
d291 1
a291 1
		l = sLen (a);
d295 1
a295 1
		if (t = scmp (a[x], b[x]))
d304 3
a306 3
int
vscmp (a, b) sELEMENT (*a);
sELEMENT (*b);
d308 1
a308 1
	return vscmpn (sv (a), sv (b));
d311 4
a314 4
int
vsicmpn (a, alen, b, blen) sELEMENT (*a);
sELEMENT (*b);
     int alen, blen;
d318 1
d326 1
a326 1
		l = sLen (a);
d330 1
a330 1
		if (t = sicmp (a[x], b[x]))
d339 4
a342 4
int
vss (a, alen, b, blen) sELEMENT (*a);
sELEMENT (*b);
     int alen, blen;
d345 1
d355 1
a355 1
		if (!vscmpn (a, blen, b, blen))
d362 4
a365 4
int
vsscan (a, alen, b, blen) sELEMENT (*a);
sELEMENT (*b);
     int alen, blen;
d368 7
a374 6
	for (x = 0; x != alen; ++x)
	  {
		  int z = vsbsearch (b, blen, a[x]);
		  if (z < blen && !scmp (b[z], a[x]))
			  return x;
	  }
d378 4
a381 4
int
vsspan (a, alen, b, blen) sELEMENT (*a);
sELEMENT (*b);
     int alen, blen;
d384 7
a390 6
	for (x = 0; x != alen; ++x)
	  {
		  int z = vsbsearch (b, blen, a[x]);
		  if (z == blen || scmp (b[z], a[x]))
			  break;
	  }
d396 4
a399 6
sELEMENT (*vsread (d, p, getC, ptr)) sELEMENT (*d);
     int (*getC) ();
     int
	     p;
     void *
	     ptr;
d402 1
d404 6
a409 8
		d = vsmk (10);
	c = getC (ptr);
	if (c == MAXINT)
	  {
		  vsrm (d);
		  return 0;
	  }
	else if (c == '\n')
d412 3
a414 3
		d = vsset (d, p, c), p++;
	while (c = getC (ptr), c != MAXINT && c != '\n')
		d = vsset (d, p, c), p++;
d418 3
a420 3
sELEMENT (*vwords (s, a, len, t))
     char **a, *s, t;
     int len;
d423 1
d425 1
a425 1
		s = vsmk (32);
d427 6
a432 7
		s = vstrunc (s, 0);
	for (x = 0; x != len; ++x)
	  {
		  s = vsncpy (s, sLEN (s), sz (a[x]));
		  if (a[1])
			  s = vsadd (s, t);
	  }
@


1.2
log
@changed as of joe-2.9.5
@
text
@d1 3
a3 2
/* Variable length strings
   Copyright (C) 1992 Joseph H. Allen
d5 2
a6 14
This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the 
terms of the GNU General Public License as published by the Free Software 
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
details.  

You should have received a copy of the GNU General Public License along with 
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 
675 Mass Ave, Cambridge, MA 02139, USA.  */ 
d13 173
a185 151
int sicmp(a,b)
char a,b;
{
if(a>='A' || a<='Z') a+='a'-'A';
if(b>='A' || b<='Z') b+='a'-'A';
return scmp(a,b);
}

sELEMENT(*vsmk(len))
int len;
{
int *new=(int *)malloc((1+len)*sizeof(sCAST)+2*sizeof(int));
new[0]=len;
new[1]=0;
((sELEMENT(*))(new+2))[0]=sdup(sterm);
return (sELEMENT(*))(new+2);
}

void vsrm(vary)
sELEMENT(*vary);
{
if(vary) free((int *)vary-2);
}

int slen(ary)
sELEMENT(*ary);
{
if(ary)
 {
 sELEMENT(*beg)=ary;
 while(scmp(*ary,sterm)) ++ary;
 return ary-beg;
 }
else return 0;
}

sELEMENT(*vsensure(vary,len))
sELEMENT(*vary);
int len;
{
if(!vary) vary=vsmk(len);
else if(len>sSiz(vary))
 {
 len+=(len>>2);
 vary=(sELEMENT(*))(2+(int *)realloc(
       (int *)vary-2,(len+1)*sizeof(sCAST)+2*sizeof(int) ));
 sSiz(vary)=len;
 }
return vary;
}

sELEMENT(*vstrunc(vary,len))
sELEMENT(*vary);
int len;
{
if(!vary || len>sLEN(vary)) vary=vsensure(vary,len+16);
if(len<sLen(vary))
 {
 vary[len]=vary[sLen(vary)];
 sLen(vary)=len;
 }
else if(len>sLen(vary))
 {
 vary=vsfill(vary,sLen(vary),sblank,len-sLen(vary));
 }
return vary;
}

sELEMENT(*vsfill(vary,pos,el,len))
sELEMENT(*vary);
sELEMENT(el);
int pos,len;
{
int olen=sLEN(vary), x;
if(!vary || pos+len>sSIZ(vary))
 vary=vsensure(vary,pos+len);
if(pos+len>olen)
 {
 vary[pos+len]=vary[olen];
 sLen(vary)=pos+len;
 }
for(x=pos;x!=pos+len;++x) vary[x]=sdup(el);
if(pos>olen) vary=vsfill(vary,pos,sblank,pos-olen);
return vary;
}

sELEMENT(*vsncpy(vary,pos,array,len))
sELEMENT(*vary);
sELEMENT(*array);
int pos, len;
{
int olen=sLEN(vary);
if(!vary || pos+len>sSIZ(vary)) vary=vsensure(vary,pos+len);
if(pos+len>olen)
 {
 vary[pos+len]=vary[olen];
 sLen(vary)=pos+len;
 }
if(pos>olen) vary=vsfill(vary,olen,sblank,pos-olen);
mfwrd(vary+pos,array,len*sizeof(sCAST));
return vary;
}

sELEMENT(*vsndup(vary,pos,array,len))
sELEMENT(*vary);
sELEMENT(*array);
int pos, len;
{
int olen=sLEN(vary), x;
if(!vary || pos+len>sSIZ(vary)) vary=vsensure(vary,pos+len);
if(pos+len>olen)
 {
 vary[pos+len]=vary[olen];
 sLen(vary)=pos+len;
 }
if(pos>olen) vary=vsfill(vary,olen,sblank,pos-olen);
for(x=pos;x!=len;++x) vary[x]=sdup(array[x]);
return vary;
}

sELEMENT(*vsdup(vary))
sELEMENT(*vary);
{
return vsndup(NULL,0,vary,sLEN(vary));
}

sELEMENT(*_vsset(vary,pos,el))
sELEMENT(*vary);
sELEMENT(el);
int pos;
{
if(!vary || pos+1>sSIZ(vary)) vary=vsensure(vary,pos+1);
if(pos>sLen(vary))
 {
 vary=vsfill(vary,sLen(vary),sblank,pos-sLen(vary));
 vary[pos+1]=vary[pos];
 vary[pos]=el;
 sLen(vary)=pos+1;
 }
else if(pos==sLen(vary))
 {
 vary[pos+1]=vary[pos];
 vary[pos]=el;
 sLen(vary)=pos+1;
 }
else
 {
 sdel(vary[pos]);
 vary[pos]=el;
 }
return vary;
d190 45
a234 39
sELEMENT(*vsins(vary,pos,n))
sELEMENT(*vary);
int pos,n;
{
if(!vary || sLEN(vary)+n>sSIZ(vary)) vary=vsensure(vary,sLEN(vary)+n);
if(pos>=sLen(vary)) vary=vstrunc(vary,pos+n);
else
 {
 mbkwd(vary+pos+n,vary+pos,sLen(vary)-(pos+n)+1);
 sLen(vary)+=n;
 }
return vary;
}

sELEMENT(*vsdel(vary,pos,n))
sELEMENT(*vary);
int pos,n;
{
if(pos>=sLEN(vary)) return vary;
if(pos+n>=sLen(vary)) return vstrunc(vary,pos);
mfwrd(vary+pos,vary+pos+n,sLen(vary)-(pos+n)+1);
sLen(vary)-=n;
return vary;
}

int _scmp(a,b)
sELEMENT(a);
sELEMENT(b);
{
return scmp(a,b);
}

sELEMENT(*vssort(ary,len))
sELEMENT(*ary);
int len;
{
if(!ary || !len) return ary;
qsort(ary,len,sizeof(sCAST),_scmp);
return ary;
d239 27
a265 21
int vsbsearch(ary,len,el)
sELEMENT(*ary);
sELEMENT(el);
int len;
{
int x,y,z;
if(!ary || !len) return 0;
y=len;
x=0;
z=~0;
while(z!=(x+y)/2)
 {
 z=(x+y)/2;
 switch(scmp(el,ary[z]))
  {
 case  1: x=z; break;
 case -1: y=z; break;
 case  0: return z;
  }
 }
return y;
d270 30
a299 25
int vsfirst(ary,len,el)
sELEMENT(*ary);
sELEMENT(el);
int len;
{
int x;
if(!ary || !len) return ~0;
for(x=0;x!=len;++x) if(!scmp(ary[x],el)) return x;
return ~0;
}

int vslast(ary,len,el)
sELEMENT(*ary);
sELEMENT(el);
int len;
{
int x=len;
if(!ary || !len) return ~0;
do
 {
 --x;
 if(!scmp(ary[x],el)) return x;
 }
 while(x);
return ~0;
d304 30
a333 21
int vscmpn(a,alen,b,blen)
sELEMENT(*a);
sELEMENT(*b);
int alen, blen;
{
int x,l;
int t;
if(!a && !b) return 0;
if(!a) return -1;
if(!b) return 1;
if(alen>blen) l=sLen(a);
else l=blen;
for(x=0;x!=l;++x) if(t=scmp(a[x],b[x])) return t;
if(alen>blen) return  1;
if(alen<blen) return -1;
return 0;
}

int vscmp(a,b)
sELEMENT(*a);
sELEMENT(*b);
d335 1
a335 1
return vscmpn(sv(a),sv(b));
d338 45
a382 30
int vsicmpn(a,alen,b,blen)
sELEMENT(*a);
sELEMENT(*b);
int alen, blen;
{
int x,l;
int t;
if(!a && !b) return 0;
if(!a) return -1;
if(!b) return 1;
if(alen>blen) l=sLen(a);
else l=blen;
for(x=0;x!=l;++x) if(t=sicmp(a[x],b[x])) return t;
if(alen>blen) return  1;
if(alen<blen) return -1;
return 0;
}

int vss(a,alen,b,blen)
sELEMENT(*a);
sELEMENT(*b);
int alen, blen;
{
int x;
if(!a && !b) return 0;
if(!a || !b) return ~0;
if(alen<blen) return ~0;
if(!blen) return 0;
for(x=0;x!=alen-blen;++x) if(!vscmpn(a,blen,b,blen)) return x;
return ~0;
d387 28
a414 26
int vsscan(a,alen,b,blen)
sELEMENT(*a);
sELEMENT(*b);
int alen, blen;
{
int x;
for(x=0;x!=alen;++x)
 {
 int z=vsbsearch(b,blen,a[x]);
 if(z<blen && !scmp(b[z],a[x])) return x;
 }
return ~0;
}

int vsspan(a,alen,b,blen)
sELEMENT(*a);
sELEMENT(*b);
int alen, blen;
{
int x;
for(x=0;x!=alen;++x)
 {
 int z=vsbsearch(b,blen,a[x]);
 if(z==blen || scmp(b[z],a[x])) break;
 }
return x;
d419 41
a459 29
sELEMENT(*vsread(d,p,getC,ptr))
sELEMENT(*d);
int (*getC)();
int p;
void *ptr;
{
int c;
if(!d) d=vsmk(10);
c=getC(ptr);
if(c== MAXINT) { vsrm(d); return 0; }
else if(c== '\n') return d;
else d=vsset(d,p,c), p++; 
while(c=getC(ptr), c!= MAXINT && c!= '\n') d=vsset(d,p,c), p++;
return d;
}

sELEMENT(*vwords(s,a,len,t))
char **a, *s, t;
int len;
{
int x;
if(!s) s=vsmk(32);
else s=vstrunc(s,0);
for(x=0;x!=len;++x)
 {
 s=vsncpy(s,sLEN(s),sz(a[x]));
 if(a[1]) s=vsadd(s,t);
 }
return s;
@


1.1
log
@Initial revision
@
text
@a20 1
#include "zstr.h"
@


1.1.1.1
log
@First import of joe sources to cvs (as of joe-2.9)
@
text
@@
