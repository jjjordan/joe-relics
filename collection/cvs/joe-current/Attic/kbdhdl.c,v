head	1.4;
access;
symbols
	joe_2_9_7:1.3
	joe_2_9_7_pre3:1.3
	joe_2_9_7_pre2:1.3
	joe_2_9_6:1.2
	joe_2_9_5:1.1.1.1
	joe_2_9_4:1.1.1.1
	joe_2_9_2:1.1.1.1
	joe_2_9_1:1.1.1.1
	joe_2_9:1.1.1.1
	joe_source:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2001.11.12.16.40.37;	author vsamel;	state dead;
branches;
next	1.3;

1.3
date	2001.10.29.14.39.51;	author vsamel;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.11.04.38.36;	author polesapart;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.11.03.39.54;	author polesapart;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.11.03.39.54;	author polesapart;	state Exp;
branches;
next	;


desc
@@


1.4
log
@delete unused files from distribution
@
text
@/* Keyboard interrupt handler and primary ms-dos multi-tasking interface */

#include <dos.h>
#include "kbdhdl.h"

extern void doschain(void);
extern void (far * odos) (void);
extern int indos;		/* Set when in a dos function */
extern int inexec;		/* Set when in the EXEC function */

#define sstoax() __emit__(0x8c,0xd0)
#define sptoax() __emit__(0x89,0xe0)
#define axtoss() __emit__(0x8e,0xd0)
#define axtosp() __emit__(0x89,0xc4)

#define simint(a) __emit__(0x9c,0xfa); (a)()

#define kimask 2		/* This is the 8259 kbd interrupt mask bit */

int psp;			/* This program's PSP */
int ine = 0;			/* Set if running an editor function */
int brkflg = 0;			/* Set whenever Ctrl-break is hit */
int chk = 0;			/* Set when a key was hit while in dos */

void (far * oldhdl) (void);	/* Original handlers which we replace */
void (far * kkkhdl) (void);
void (far * brkhdl) (void);

/* Replacement for 'int 0x16', the bios keyboard function */
/* This is replaced so that we can simulate terminal
 * input on the background DOS process
 */

#define stisize 64
unsigned char stibuf[stisize];
unsigned stinew;
unsigned stiold;

void interrupt kkk(unsigned bp, unsigned di, unsigned si, unsigned ds, unsigned es, unsigned dx, unsigned cx, unsigned bx, unsigned ax, unsigned ip, unsigned cs, unsigned flags)
{
	enable();
	if ((ax & 0xff00) == 0x0000) {
		while (stinew == stiold) ;
		ax = stibuf[stiold] + (((unsigned) stibuf[stiold + 1]) << 8);
		stiold += 2;
		if (stiold == stisize)
			stiold = 0;
	} else if ((ax & 0xff00) == 0x0100) {
		if (stinew != stiold) {
			ax = stibuf[stiold] + (((unsigned) stibuf[stiold + 1]) << 8);
			flags &= (0xff - 0x40);
		} else
			flags |= 0x40;
	} else if ((ax & 0xff00) == 0x0200)
		ax = *(unsigned char far *) 0x417 + 0x200;
}

/* Simulate terminal input */

void sti(unsigned char ascii, unsigned char scan)
{
	disable();
	stibuf[stinew++] = ascii;
	stibuf[stinew++] = scan;
	if (stinew == stisize)
		stinew = 0;
	enable();
}

/* Replacement break key handler */

void interrupt brkh()
{
	brkflg = 1;
}

/* Return true if there are any keys */

int kcheck(void)
{
	_BX = 0;
	_AH = 1;
	simint(kkkhdl);
	__emit__(0x74, 1, 0x43);
	if (_BX)
		return 1;
	else
		return 0;
}

/* Dump any keys in queue */

void kdump(void)
{
	while (kcheck()) {
		_AH = 0;	/* Get the character */
		simint(kkkhdl);
	}
}

/* Replacement keyboard interrupt handler */

unsigned stackflg = 0, oldss, oldsp, stackseg, stackp;

void interrupt dos(unsigned bp, unsigned di, unsigned si, unsigned ds, unsigned es, unsigned dx, unsigned cx, unsigned bx, unsigned ax, unsigned ip, unsigned cs, unsigned flags);

void khandle(void)
{
/* Saved context information */

	int opsp;
	unsigned dtaseg;
	unsigned dtaofst;

/* Install normal dos vector for us */

	disable();
	*(void far * far *) 0x84 = odos;
	enable();

/* Switch PSP */

	_AH = 0x51;
	geninterrupt(0x21);
	opsp = _BX;
	_BX = psp;
	_AH = 0x50;
	geninterrupt(0x21);

/* Save DTA */

	_AH = 0x2f;
	geninterrupt(0x21);
	dtaofst = _BX;
	dtaseg = _ES;

/* Other information that should be preserved here:
 *
 * critical error handler (yes)
 * extended error information (yes- see green book for setting error byte)
 * current drive (yes)
 * current path (yes)
 *
 * Also:
 *  should intercept int20 for exiting
 *  should intercept absolute disk read/write
 *  should intercept TSR int (int 27H)
 */

      up:			/* Test for keys */
	disable();		/* Disable keyboard interrupts */
	outportb(0x21, inportb(0x21) | kimask);
	enable();
	if (kcheck()) {
		char scan, ascii;

		disable();	/* Reenable keyboard interrupts */
		outportb(0x21, inportb(0x21) & ~kimask);
		enable();
		_AH = 0;	/* Get the character */
		simint(kkkhdl);
		ascii = _AL;
		scan = _AH;
		if (key(ascii, scan))
			goto bye;
		goto up;	/* See if any more keys to process */
	}
	ine = 0;
      bye:;

/* Restore DTA */

	_DX = dtaofst;
	_DS = dtaseg;
	_AH = 0x1a;
	geninterrupt(0x21);
	_DS = _CS;

/* Restore PSP */

	_BX = opsp;
	_AH = 0x50;
	geninterrupt(0x21);

/* Install our DOS interceptor */

	disable();
	*(void far * far *) 0x84 = MK_FP(_CS, doschain);
	enable();
}

void interrupt dos(unsigned bp, unsigned di, unsigned si, unsigned ds, unsigned es, unsigned dx, unsigned cx, unsigned bx, unsigned ax, unsigned ip, unsigned cs, unsigned flags)
{
	if (chk && ine == 0) {
		ine = 1;
		if (_SS != stackseg) {
			stackflg = 1;
			sstoax();
			oldss = _AX;
			sptoax();
			oldsp = _AX;
			disable();
			_AX = stackseg;
			axtoss();
			_AX = stackp;
			axtosp();
			enable();
		}
		khandle();
		if (stackflg) {
			stackflg = 0;
			_AX = oldss;
			axtoss();
			_AX = oldsp;
			axtosp();
		}
		chk = 0;
		disable();
		outportb(0x21, inportb(0x21) & ~kimask);
		enable();
	}
}

void interrupt kbdhdl()
{
	simint(oldhdl);
	disable();
	if (stackflg == 0 && ine == 0 && indos == 0 && inexec == 0 && chk == 0) {
		ine = 1;
		chk = 1;
		enable();
		if (_SS != stackseg) {
			stackflg = 1;
			sstoax();
			oldss = _AX;
			sptoax();
			oldsp = _AX;
			disable();
			_AX = stackseg;
			axtoss();
			_AX = stackp;
			axtosp();
			enable();
		}
		khandle();
		if (stackflg) {
			disable();
			_AX = oldss;
			axtoss();
			_AX = oldsp;
			axtosp();
			enable();
			stackflg = 0;
		}
		chk = 0;
		disable();
		outportb(0x21, inportb(0x21) & ~kimask);
		enable();
	} else {
		if (indos || inexec) {
			chk = 1;
			return;
		}
		enable();
	}
}

void kopen(void)
{
/* Remeber where our stack is */

	sstoax();
	stackseg = _AX;
	sptoax();
	stackp = _AX - 512;	/* 512 bytes of background stack, the rest foreground */

/* Remember which PSP we are */

	_AH = 0x51;
	geninterrupt(0x21);
	psp = _BX;

/* Install vectors */

	disable();
	oldhdl = *(void far * far *) 0x24;
	*(void far * far *) 0x24 = MK_FP(_CS, kbdhdl);

	kkkhdl = *(void far * far *) 0x58;
	*(void far * far *) 0x58 = MK_FP(_CS, kkk);

	brkhdl = *(void far * far *) 0x6c;
	*(void far * far *) 0x6c = MK_FP(_CS, brkh);

	odos = *(void far * far *) 0x84;
	*(void far * far *) 0x84 = MK_FP(_CS, doschain);
	enable();
}

/* Restore vectors */

void kclose(void)
{
	disable();
	*(void far * far *) 0x24 = oldhdl;
	*(void far * far *) 0x58 = kkkhdl;
	*(void far * far *) 0x6c = brkhdl;
	*(void far * far *) 0x84 = odos;
	enable();
}
@


1.3
log
@take the CVS repository to version 2.9.7-pre2
@
text
@@


1.2
log
@changed as of joe-2.9.6
@
text
@d6 1
a6 1
extern void doschain (void);
d39 1
a39 4
void interrupt
kkk (unsigned bp, unsigned di, unsigned si, unsigned ds,
     unsigned es, unsigned dx, unsigned cx, unsigned bx, unsigned ax,
     unsigned ip, unsigned cs, unsigned flags)
d41 14
a54 24
	enable ();
	if ((ax & 0xff00) == 0x0000)
	  {
		  while (stinew == stiold);
		  ax =
			  stibuf[stiold] +
			  (((unsigned) stibuf[stiold + 1]) << 8);
		  stiold += 2;
		  if (stiold == stisize)
			  stiold = 0;
	  }
	else if ((ax & 0xff00) == 0x0100)
	  {
		  if (stinew != stiold)
		    {
			    ax =
				    stibuf[stiold] +
				    (((unsigned) stibuf[stiold + 1]) << 8);
			    flags &= (0xff - 0x40);
		    }
		  else
			  flags |= 0x40;
	  }
	else if ((ax & 0xff00) == 0x0200)
d60 1
a60 2
void
sti (unsigned char ascii, unsigned char scan)
d62 1
a62 1
	disable ();
d67 1
a67 1
	enable ();
d72 1
a72 2
void interrupt
brkh ()
d79 1
a79 2
int
kcheck (void)
d83 2
a84 2
	simint (kkkhdl);
	__emit__ (0x74, 1, 0x43);
d93 1
a93 2
void
kdump (void)
d95 4
a98 5
	while (kcheck ())
	  {
		  _AH = 0;	/* Get the character */
		  simint (kkkhdl);
	  }
d105 1
a105 3
void interrupt dos (unsigned bp, unsigned di, unsigned si, unsigned ds,
		    unsigned es, unsigned dx, unsigned cx, unsigned bx,
		    unsigned ax, unsigned ip, unsigned cs, unsigned flags);
d107 1
a107 2
void
khandle (void)
d117 1
a117 1
	disable ();
d119 1
a119 1
	enable ();
d124 1
a124 1
	geninterrupt (0x21);
d128 1
a128 1
	geninterrupt (0x21);
d133 1
a133 1
	geninterrupt (0x21);
d151 17
a167 17
	disable ();		/* Disable keyboard interrupts */
	outportb (0x21, inportb (0x21) | kimask);
	enable ();
	if (kcheck ())
	  {
		  char scan, ascii;
		  disable ();	/* Reenable keyboard interrupts */
		  outportb (0x21, inportb (0x21) & ~kimask);
		  enable ();
		  _AH = 0;	/* Get the character */
		  simint (kkkhdl);
		  ascii = _AL;
		  scan = _AH;
		  if (key (ascii, scan))
			  goto bye;
		  goto up;	/* See if any more keys to process */
	  }
d176 1
a176 1
	geninterrupt (0x21);
d183 1
a183 1
	geninterrupt (0x21);
d187 3
a189 3
	disable ();
	*(void far * far *) 0x84 = MK_FP (_CS, doschain);
	enable ();
d192 1
a192 4
void interrupt
dos (unsigned bp, unsigned di, unsigned si, unsigned ds,
     unsigned es, unsigned dx, unsigned cx, unsigned bx, unsigned ax,
     unsigned ip, unsigned cs, unsigned flags)
d194 28
a221 31
	if (chk && ine == 0)
	  {
		  ine = 1;
		  if (_SS != stackseg)
		    {
			    stackflg = 1;
			    sstoax ();
			    oldss = _AX;
			    sptoax ();
			    oldsp = _AX;
			    disable ();
			    _AX = stackseg;
			    axtoss ();
			    _AX = stackp;
			    axtosp ();
			    enable ();
		    }
		  khandle ();
		  if (stackflg)
		    {
			    stackflg = 0;
			    _AX = oldss;
			    axtoss ();
			    _AX = oldsp;
			    axtosp ();
		    }
		  chk = 0;
		  disable ();
		  outportb (0x21, inportb (0x21) & ~kimask);
		  enable ();
	  }
d224 1
a224 2
void interrupt
kbdhdl ()
d226 40
a265 47
	simint (oldhdl);
	disable ();
	if (stackflg == 0 && ine == 0 && indos == 0 && inexec == 0
	    && chk == 0)
	  {
		  ine = 1;
		  chk = 1;
		  enable ();
		  if (_SS != stackseg)
		    {
			    stackflg = 1;
			    sstoax ();
			    oldss = _AX;
			    sptoax ();
			    oldsp = _AX;
			    disable ();
			    _AX = stackseg;
			    axtoss ();
			    _AX = stackp;
			    axtosp ();
			    enable ();
		    }
		  khandle ();
		  if (stackflg)
		    {
			    disable ();
			    _AX = oldss;
			    axtoss ();
			    _AX = oldsp;
			    axtosp ();
			    enable ();
			    stackflg = 0;
		    }
		  chk = 0;
		  disable ();
		  outportb (0x21, inportb (0x21) & ~kimask);
		  enable ();
	  }
	else
	  {
		  if (indos || inexec)
		    {
			    chk = 1;
			    return;
		    }
		  enable ();
	  }
d268 1
a268 2
void
kopen (void)
d272 1
a272 1
	sstoax ();
d274 1
a274 1
	sptoax ();
d280 1
a280 1
	geninterrupt (0x21);
d285 1
a285 1
	disable ();
d287 1
a287 1
	*(void far * far *) 0x24 = MK_FP (_CS, kbdhdl);
d290 1
a290 1
	*(void far * far *) 0x58 = MK_FP (_CS, kkk);
d293 1
a293 1
	*(void far * far *) 0x6c = MK_FP (_CS, brkh);
d296 2
a297 2
	*(void far * far *) 0x84 = MK_FP (_CS, doschain);
	enable ();
d302 1
a302 2
void
kclose (void)
d304 1
a304 1
	disable ();
d309 1
a309 1
	enable ();
@


1.1
log
@Initial revision
@
text
@d6 2
a7 2
extern void doschain(void);
extern void (far *odos)(void);
d21 7
a27 7
int ine=0;			/* Set if running an editor function */
int brkflg=0;			/* Set whenever Ctrl-break is hit */
int chk=0;			/* Set when a key was hit while in dos */

void (far *oldhdl)(void);	/* Original handlers which we replace */
void (far *kkkhdl)(void);
void (far *brkhdl)(void);
d39 4
a42 3
void interrupt kkk(unsigned bp,unsigned di,unsigned si,unsigned ds,
unsigned es,unsigned dx,unsigned cx,unsigned bx,unsigned ax,unsigned ip,
unsigned cs,unsigned flags)
d44 25
a68 19
enable();
if((ax&0xff00)==0x0000)
 {
 while(stinew==stiold);
 ax=stibuf[stiold]+(((unsigned)stibuf[stiold+1])<<8);
 stiold+=2;
 if(stiold==stisize) stiold=0;
 }
else if((ax&0xff00)==0x0100)
 {
 if(stinew!=stiold)
  {
  ax=stibuf[stiold]+(((unsigned)stibuf[stiold+1])<<8);
  flags&=(0xff-0x40);
  }
 else flags|=0x40;
 }
else if((ax&0xff00)==0x0200)
 ax=*(unsigned char far *)0x417+0x200;
d73 2
a74 1
void sti(unsigned char ascii,unsigned char scan)
d76 6
a81 5
disable();
stibuf[stinew++]=ascii;
stibuf[stinew++]=scan;
if(stinew==stisize) stinew=0;
enable();
d86 2
a87 1
void interrupt brkh()
d89 1
a89 1
brkflg=1;
d94 2
a95 1
int kcheck(void)
d97 8
a104 6
_BX=0;
_AH=1;
simint(kkkhdl);
__emit__(0x74,1,0x43);
if(_BX) return 1;
else return 0;
d109 2
a110 1
void kdump(void)
d112 5
a116 5
while(kcheck())
 {
 _AH=0;				/* Get the character */
 simint(kkkhdl);
 }
d121 1
a121 1
unsigned stackflg=0,oldss,oldsp,stackseg,stackp;
d123 3
a125 3
void interrupt dos(unsigned bp,unsigned di,unsigned si,unsigned ds,
unsigned es,unsigned dx,unsigned cx,unsigned bx,unsigned ax,unsigned ip,
unsigned cs,unsigned flags);
d127 2
a128 1
void khandle(void)
d132 3
a134 3
int opsp;
unsigned dtaseg;
unsigned dtaofst;
d138 3
a140 3
disable();
*(void far * far *)0x84=odos;
enable();
d144 6
a149 6
_AH=0x51;
geninterrupt(0x21);
opsp=_BX;
_BX=psp;
_AH=0x50;
geninterrupt(0x21);
d153 4
a156 4
_AH=0x2f;
geninterrupt(0x21);
dtaofst=_BX;
dtaseg=_ES;
d171 20
a190 19
up:				/* Test for keys */
disable();			/* Disable keyboard interrupts */
outportb(0x21,inportb(0x21)|kimask);
enable();
if(kcheck())
 {
 char scan, ascii;
 disable();			/* Reenable keyboard interrupts */
 outportb(0x21,inportb(0x21)&~kimask);
 enable();
 _AH=0;				/* Get the character */
 simint(kkkhdl);
 ascii=_AL;
 scan=_AH;
 if(key(ascii,scan)) goto bye;
 goto up;			/* See if any more keys to process */
 }
ine=0;
bye:;
d194 5
a198 5
_DX=dtaofst;
_DS=dtaseg;
_AH=0x1a;
geninterrupt(0x21);
_DS=_CS;
d202 3
a204 3
_BX=opsp;
_AH=0x50;
geninterrupt(0x21);
d208 3
a210 3
disable();
*(void far * far *)0x84=MK_FP(_CS,doschain);
enable();
d213 4
a216 3
void interrupt dos(unsigned bp,unsigned di,unsigned si,unsigned ds,
unsigned es,unsigned dx,unsigned cx,unsigned bx,unsigned ax,unsigned ip,
unsigned cs,unsigned flags)
d218 31
a248 31
if(chk && ine==0)
 {
 ine=1;
 if(_SS!=stackseg)
  {
  stackflg=1;
  sstoax();
  oldss=_AX;
  sptoax();
  oldsp=_AX;
  disable();
  _AX=stackseg;
  axtoss();
  _AX=stackp;
  axtosp();
  enable();
  }
 khandle();
 if(stackflg)
  {
  stackflg=0;
  _AX=oldss;
  axtoss();
  _AX=oldsp;
  axtosp();
  }
 chk=0;
 disable();
 outportb(0x21,inportb(0x21)&~kimask);
 enable();
 }
d251 2
a252 1
void interrupt kbdhdl()
d254 47
a300 46
simint(oldhdl);
disable();
if(stackflg==0 && ine==0 && indos==0 && inexec==0 && chk==0)
 {
 ine=1;
 chk=1;
 enable();
 if(_SS!=stackseg)
  {
  stackflg=1;
  sstoax();
  oldss=_AX;
  sptoax();
  oldsp=_AX;
  disable();
  _AX=stackseg;
  axtoss();
  _AX=stackp;
  axtosp();
  enable();
  }
 khandle();
 if(stackflg)
  {
  disable();
  _AX=oldss;
  axtoss();
  _AX=oldsp;
  axtosp();
  enable();
  stackflg=0;
  }
 chk=0;
 disable();
 outportb(0x21,inportb(0x21)&~kimask);
 enable();
 }
else
 {
 if(indos || inexec)
  {
  chk=1;
  return;
  }
 enable();
 }
d303 2
a304 1
void kopen(void)
d308 4
a311 4
sstoax();
stackseg=_AX;
sptoax();
stackp=_AX-512;	/* 512 bytes of background stack, the rest foreground */
d315 3
a317 3
_AH=0x51;
geninterrupt(0x21);
psp=_BX;
d321 13
a333 13
disable();
oldhdl=*(void far * far *)0x24;
*(void far * far *)0x24=MK_FP(_CS,kbdhdl);

kkkhdl=*(void far * far *)0x58;
*(void far * far *)0x58=MK_FP(_CS,kkk);

brkhdl=*(void far * far *)0x6c;
*(void far * far *)0x6c=MK_FP(_CS,brkh);

odos=*(void far * far *)0x84;
*(void far * far *)0x84=MK_FP(_CS,doschain);
enable();
d338 2
a339 1
void kclose(void)
d341 6
a346 6
disable();
*(void far * far *)0x24=oldhdl;
*(void far * far *)0x58=kkkhdl;
*(void far * far *)0x6c=brkhdl;
*(void far * far *)0x84=odos;
enable();
@


1.1.1.1
log
@First import of joe sources to cvs (as of joe-2.9)
@
text
@@
