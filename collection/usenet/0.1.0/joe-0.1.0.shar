#! /bin/sh
# This is a shell archive, meaning:
# 1. Remove everything above the #! /bin/sh line.
# 2. Save the resulting text in a file.
# 3. Execute the file with /bin/sh (not csh) to create the files:
#	COPYING
#	Makefile
#	NEWS
#	README
#	async.h
#	asyncbsd.c
#	asyncesix.c
#	asynchpux.c
#	asyncposix.c
#	asyncxenix.c
#	blocks.c
#	blocks.h
#	cruddy.c
#	joe.1
#	joe.c
#	joe.h
#	.joerc
# This archive created: Fri Aug 30 15:34:35 1991
# By:	Randolph Carter (nee. Joseph H. Allen) (Kadath Tours, Inc.)
export PATH; PATH=/bin:$PATH
if test -f 'COPYING'
then
	echo shar: will not over-write existing file "'COPYING'"
else
cat << \SHAR_EOF > 'COPYING'

		    GNU GENERAL PUBLIC LICENSE
		     Version 1, February 1989

 Copyright (C) 1989 Free Software Foundation, Inc.
                    675 Mass Ave, Cambridge, MA 02139, USA
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

			    Preamble

  The license agreements of most software companies try to keep users
at the mercy of those companies.  By contrast, our General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  The
General Public License applies to the Free Software Foundation's
software and to any other program whose authors commit to using it.
You can use it for your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Specifically, the General Public License is designed to make
sure that you have the freedom to give away or sell copies of free
software, that you receive source code or can get it if you want it,
that you can change the software or use pieces of it in new free
programs; and that you know you can do these things.

  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

  For example, if you distribute copies of a such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must tell them their rights.

  We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

  The precise terms and conditions for copying, distribution and
modification follow.

		    GNU GENERAL PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License Agreement applies to any program or other work which
contains a notice placed by the copyright holder saying it may be
distributed under the terms of this General Public License.  The
"Program", below, refers to any such program or work, and a "work based
on the Program" means either the Program or any work containing the
Program or a portion of it, either verbatim or with modifications.  Each
licensee is addressed as "you".

  1. You may copy and distribute verbatim copies of the Program's source
code as you receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice and
disclaimer of warranty; keep intact all the notices that refer to this
General Public License and to the absence of any warranty; and give any
other recipients of the Program a copy of this General Public License
along with the Program.  You may charge a fee for the physical act of
transferring a copy.

  2. You may modify your copy or copies of the Program or any portion of
it, and copy and distribute such modifications under the terms of Paragraph
1 above, provided that you also do the following:

    a) cause the modified files to carry prominent notices stating that
    you changed the files and the date of any change; and

    b) cause the whole of any work that you distribute or publish, that
    in whole or in part contains the Program or any part thereof, either
    with or without modifications, to be licensed at no charge to all
    third parties under the terms of this General Public License (except
    that you may choose to grant warranty protection to some or all
    third parties, at your option).

    c) If the modified program normally reads commands interactively when
    run, you must cause it, when started running for such interactive use
    in the simplest and most usual way, to print or display an
    announcement including an appropriate copyright notice and a notice
    that there is no warranty (or else, saying that you provide a
    warranty) and that users may redistribute the program under these
    conditions, and telling the user how to view a copy of this General
    Public License.

    d) You may charge a fee for the physical act of transferring a
    copy, and you may at your option offer warranty protection in
    exchange for a fee.

Mere aggregation of another independent work with the Program (or its
derivative) on a volume of a storage or distribution medium does not bring
the other work under the scope of these terms.

  3. You may copy and distribute the Program (or a portion or derivative of
it, under Paragraph 2) in object code or executable form under the terms of
Paragraphs 1 and 2 above provided that you also do one of the following:

    a) accompany it with the complete corresponding machine-readable
    source code, which must be distributed under the terms of
    Paragraphs 1 and 2 above; or,

    b) accompany it with a written offer, valid for at least three
    years, to give any third party free (except for a nominal charge
    for the cost of distribution) a complete machine-readable copy of the
    corresponding source code, to be distributed under the terms of
    Paragraphs 1 and 2 above; or,

    c) accompany it with the information you received as to where the
    corresponding source code may be obtained.  (This alternative is
    allowed only for noncommercial distribution and only if you
    received the program in object code or executable form alone.)

Source code for a work means the preferred form of the work for making
modifications to it.  For an executable file, complete source code means
all the source code for all modules it contains; but, as a special
exception, it need not include source code for modules which are standard
libraries that accompany the operating system on which the executable
file runs, or for standard header files or definitions files that
accompany that operating system.

  4. You may not copy, modify, sublicense, distribute or transfer the
Program except as expressly provided under this General Public License.
Any attempt otherwise to copy, modify, sublicense, distribute or transfer
the Program is void, and will automatically terminate your rights to use
the Program under this License.  However, parties who have received
copies, or rights to use copies, from you under this General Public
License will not have their licenses terminated so long as such parties
remain in full compliance.

  5. By copying, distributing or modifying the Program (or any work based
on the Program) you indicate your acceptance of this license to do so,
and all its terms and conditions.

  6. Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the original
licensor to copy, distribute or modify the Program subject to these
terms and conditions.  You may not impose any further restrictions on the
recipients' exercise of the rights granted herein.

  7. The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies a version number of the license which applies to it and "any
later version", you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation.  If the Program does not specify a version number of
the license, you may choose any version ever published by the Free Software
Foundation.

  8. If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the author
to ask for permission.  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this.  Our decision will be guided by the two goals
of preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally.

			    NO WARRANTY

  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.

  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.

		     END OF TERMS AND CONDITIONS

	Appendix: How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to humanity, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

  To do so, attach the following notices to the program.  It is safest to
attach them to the start of each source file to most effectively convey
the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) 19yy  <name of author>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 1, or (at your option)
    any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

Also add information on how to contact you by electronic and paper mail.

If the program is interactive, make it output a short notice like this
when it starts in an interactive mode:

    Gnomovision version 69, Copyright (C) 19xx name of author
    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than `show w' and `show
c'; they could even be mouse-clicks or menu items--whatever suits your
program.

You should also get your employer (if you work as a programmer) or your
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  Here a sample; alter the names:

  Yoyodyne, Inc., hereby disclaims all copyright interest in the
  program `Gnomovision' (a program to direct compilers to make passes
  at assemblers) written by James Hacker.

  <signature of Ty Coon>, 1 April 1989
  Ty Coon, President of Vice

That's all there is to it!
SHAR_EOF
if test 12488 -ne "`wc -c < 'COPYING'`"
then
	echo shar: error transmitting "'COPYING'" '(should have been 12488 characters)'
fi
fi # end of overwriting check
if test -f 'Makefile'
then
	echo shar: will not over-write existing file "'Makefile'"
else
cat << \SHAR_EOF > 'Makefile'
# Makefile for Joe's Own Editor

# Directory to install joe and .joerc into
WHERE = /usr/bin

# Use these two for 'cc'
CC = cc
CFLAGS = -DKEYDEF=\"$(WHERE)/.joerc\" -O

# Use these two for 'gcc'
#CC = gcc
#CFLAGS = -DKEYDEF=\"$(WHERE)/.joerc\" -O

foo:
	@echo Type make followed by one of the following
	@echo
	@echo bsd hpux xenix esix posix cruddy install clean

bsd: joe.o asyncbsd.o blocks.o
	$(CC) $(CFLAGS) joe.o asyncbsd.o blocks.o -ltermcap -o joe

xenix: joe.o asyncxenix.o blocks.o
	$(CC) $(CFLAGS) joe.o asyncxenix.o blocks.o -lx -ltermcap -o joe

hpux: joe.o asynchpux.o blocks.o
	$(CC) $(CFLAGS) joe.o asynchpux.o blocks.o -ltermcap -o joe

esix: joe.o asyncesix.o blocks.o
	$(CC) $(CFLAGS) joe.o asyncesix.o blocks.o -lcurses -lbsd -o joe

posix: joe.o asyncposix.o blocks.o
	$(CC) $(CFLAGS) joe.o asyncposix.o blocks.o -ltermcap -o joe

cruddy: joe.o cruddy.o blocks.o
	$(CC) $(CFLAGS) joe.o cruddy.o blocks.o -o joe

install:
	strip joe
	mv joe $(WHERE)
	cp .joerc $(WHERE)
	chmod a+x $(WHERE)/joe
	chmod a+r $(WHERE)/.joerc

clean:
	rm -f asyncbsd.o asyncxenix.o asynchpux.o asyncesix.o asyncposix.o \
cruddy.o blocks.o joe.o

asyncbsd.o cruddy.o asyncxenix.o asynxhpux.o asyncesix.o : async.h

blocks.o : blocks.h

joe.o : blocks.h joe.h async.h
SHAR_EOF
if test 1264 -ne "`wc -c < 'Makefile'`"
then
	echo shar: error transmitting "'Makefile'" '(should have been 1264 characters)'
fi
fi # end of overwriting check
if test -f 'NEWS'
then
	echo shar: will not over-write existing file "'NEWS'"
else
cat << \SHAR_EOF > 'NEWS'

Release 0.1.0 of JOE (Joe's Own Editor):  Note that this program was
previously calles 'E' (which turned out to be the RAND EDITOR and one of the
synonyms for vi) and 'J' (which turned out to be a language and the name of
another UNIX editor).  See below for list of big fixes and new features. 
Find the source for this release in 'alt.sources'

FIXES AND NEW FEATURES FOR THIS VERSION

	* Left arrow jumping fixed

	* No longer touches the IXON IXOFF setting

	* Reference to Gnu EMACS removed from the copyright notice :-)

	* The patch for Undo and Redo is not needed for this version.

	* Name of initialization file changed to '.joerc'

	* Versions for ESIX and POSIX now included
	  (think you Mike Lijewski for the POSIX driver)

	* Users can now customize the help text.  The help text is now placed
	  in the initialization file

	* A compile option for passing characters with bit 7 set has been
	  added.  This is for Iceland

	* Added kill line function for the emacs people.  See 'killlin' in
          the .joerc file

	* The ioctls TIOCGSIZE and TIOCGWINSZ are used to get the
	  screen/window size.  If the window changes size, JOE resizes the
	  screen on the next key press

	* Prompts and messages wider than the screen width are now handled
	  properly

=-=-=-=-=-=

Release 0.0.0 of 'J' (Joe's Editor):  This release supersedes all previous
versions which lack a release number.  Note that this program was previously
called 'E' but the name has been changed ('E' turns out to be one of the
synonyms for 'vi').  See below for list of bug fixes and new features.  The
2 following posts contain the source.

Introduction

	'J' is a small screen editor which was designed to be easy to use for
novice users but also to be powerful and complete enough for experienced
users.  Several elements of its design are unique innovations.  Here is a
copy of the on-line help text to give you a feel for this editor:

GO TO              DELETE    MISC      BLOCK    FIND     QUOTE    WINDOW
^B left  ^F right ^D single ^T  mode   ^KB mark ^KF text `  Ctrl  ^KO split
^Z word  ^X word  ^W >word  ^R  retype ^KK end  ^L  next ^\ bit-7 ^KI 1 / all
^A edge  ^E edge  ^O word<  ^KA center ^KC copy ^KL line FILE     ^KP up
^P up    ^N down  ^J >line  ^KJ format ^KM move EXIT     ^KD save ^KN down
^U page  ^V page  ^Y line   ^KZ shell  ^KW save ^KX save ^KR read ^KG grow
^KU top ^KV end   ^K- undo  ^K, indnt< ^KY kill ^C abort/         ^KT shrink
^G matching ([<{` ^K+ redo  ^K. indnt>             close window  ^KE get file

Other relevent features:

	* Extremely small - the XENIX version is only 58K

	* Help text can be left on while editing

	* Key layout designed to eliminate headaches: ^Q and ^S are not used,
	  both ^H and DEL are backspace.  Also, each user may customize
	  his key layout by modifying a simple initialization file

	* Versions for BSD, HPUX and XENIX 386 are included.  A simple tty
	  driver is also provided to ease porting to other systems

	* Currently only VT100/ANSI terminals are supported.  If the terminal
	  has scrolling regions, J uses them.  Has well-tuned interruptable
	  screen update algorithm

	* Has: autoindent, word-wrap, overtype/insert, picture mode (right-
	  arrow makes space past ends of lines), right margin (for paragraph
	  formatting and center), and magic tabs (the column number of text
	  after tab stops is preserved when inserting and deleting)

	* The cursor column doesn't 'jump' when you move between long and
	  short lines.  Instead the cursor column only jumps when you try to
	  edit in an invalid place or if picture mode is set, the invalid
	  place is made real by space filling

	* Editor modes can be set depending on file extension

	* No line length restrictions.  Binary files can be edited without
	  difficulty

	* Long lines are truncated, not wrapped (I.E., the screen scrolls to
	  the right to get to the truncated parts)

FIXES FOR THIS VERSION

	* Shell escape lock-ups are fixed

	* Paragraph reformat glitch is fixed

	* Cursor update screwynesses fixed for picture mode

	* Goto next word/Goto previous word/Delete word left and Delete word
	  right were made more consistant

NEW FEATURES FOR THIS VERSION

	* ~ can be used at file name prompts to expand user home directories

	* J now has undelete and redelete (you can go backwards and forewards
	  through the delete buffer to select which text you want to undelete)

	* J now has indent functions.  A marked block can be indented more
	  or less. If you use an indent function outside a marked block, the
	  lines with the same or greater indent level surrounding the cursor
	  are marked

	* Right margin was added for paragraph format and center line

	* Goto matching parenthasis (or [ { ` < )

	* ` was made the quote control character key because ^_ is not easy
	  generate on many keyboard.  `` gets `

	* tty drivers were rewritten.  This made the screen update faster
	  (now the screen update is instantaneous on 20MHz 386s).  Screen
	  update preempting also works better

THE PLAN

	Version 1.0.0 will be a complete rewrite.  It should be done sometime
before january.  These are my goals for it:

	* Block oriented software virtual memory support (for less thrashing
	  and elimination of file size limits caused by the system's process
	  size limit)

	* MS-DOS support

	* X windows support

	* Better integration with UNIX:  J will be able to process text
	  through pipes (like vi), will have standard unix regular expressions,
	  and will be usable as a 'more' program.

	* Will be terminal independant and use termcap and terminfo

	* Will have a ASCII/HEX dump display mode

	* Will have complete program developement support (save&make, next
	  error/previous error, tags file support)

	* Will have a much more powerful scrolling algorithm.  I have a
	  methode which is simpler and faster than even GNU-EMACS' Gosling
	  algorithm

	* All of this will require no changes to the basic keyboard layout-
	  maybe one more added line of help text for new things

	* It will probably have keyboard macros but it won't have much of
	  an extension language.  Maybe in version 2.0.0

	* I expect all of this not to add more than 30 or 40% to the size

		Joseph H. Allen
		28 Dale Lane
		Smithtown, N.Y. 11787

/*  rcarter@wpi.wpi.edu */      /* Amazing */             /* Joseph H. Allen */
int a[1817];main(z,p,q,r){for(p=80;q+p-80;p-=2*a[p])for(z=9;z--;)q=3&(r=time(0)
+r*57)/7,q=q?q-1?q-2?1-p%79?-1:0:p%79-77?1:0:p<1659?79:0:p>158?-79:0,q?!a[p+q*2
]?a[p+=a[p+=q]=q]=q:0:0;for(;q++-1817;)printf(q%79?"%c":"%c\n"," #"[!a[q-1]]);}
SHAR_EOF
if test 6600 -ne "`wc -c < 'NEWS'`"
then
	echo shar: error transmitting "'NEWS'" '(should have been 6600 characters)'
fi
fi # end of overwriting check
if test -f 'README'
then
	echo shar: will not over-write existing file "'README'"
else
cat << \SHAR_EOF > 'README'
If you don't know what this is, read the NEWS file.

To compile:

	(1) Determine where you want to install the editor program and the
	    system default keymap file.  Put this path in the Makefile.  If
	    you're a mere user, don't worry about this.  Instead, place a copy
	    of the '.joerc' file in your home directory. 

	(2) If you need to be able to display characters with bit 7 set as-
	    is (instead of in inverse), comment out the '#define NOHIGHBIT'
	    line in the file 'joe.h'

	(3) type 'make xenix' for Xenix systems, 'make hpux' for HPUX systems
	    or 'make bsd' for BSD systems.  If none of these work, type
	    'make cruddy' to make a version with an inferior terminal driver.

	(4) To install it in the system, log in as superuser and do
	    'make install'

	(5) When JOE is used, be sure the baud rate as reported by stty is correctly
	    set.  If you're not on a real serial terminal, try to set the baud
	    rate to the best guess of what the actual throughput is.  In particular,
	    if you use JOE on a windowing system, the window updates will be much
	    faster if you set the baud rate to 'extb' or '38400'.
SHAR_EOF
if test 1148 -ne "`wc -c < 'README'`"
then
	echo shar: error transmitting "'README'" '(should have been 1148 characters)'
fi
fi # end of overwriting check
if test -f 'async.h'
then
	echo shar: will not over-write existing file "'async.h'"
else
cat << \SHAR_EOF > 'async.h'
/* Terminal interface header file
   Copyright (C) 1991 Joseph H. Allen

This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the terms
of the GNU General Public License as published by the Free Software
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  

You should have received a copy of the GNU General Public License
along with JOE; see the file COPYING.  If not, write to
the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */

int aopen();		/* fflush(stdout) and then set terminal to
			   character at a time mode */
int aclose();		/* Flush output and then restore original tty mode */
int aflush();		/* Flush the output and sleep for the amount of time
			   the output will need to get to the terminal (I.E.,
			   depends on the baud rate).  Then check if there's
			   any typeahead and set 'have' if there is */
int anext();		/* Call aflush() and then return next char from
			   terminal */

extern int have;	/* Set if there is typeahead */

int eputs();		/* Write string to terminal */
int eputc();		/* Write character to terminal */
			/* If the output buffer gets full, these call
			   aflush() */

int shell();		/* Shell escape */
int tsignal();              /* JOE's signal handler.  This function saves the
                           current edit file in 'aborted.joe' and then exists.
                           Some signals might be set up to call this */

int termtype();             /* Determine the following terminal parameters */

extern int width;       /* Screen width */
extern int height;      /* Screen height */
extern int scroll;      /* Set=use scrolling regions, Clr=don't use them */

int getsize();		/* Set width and height again with TIOCGSIZE */

/* If termtype does nothing, these values defualt to: width=80, height=24,
   scroll=1 (true).
 
   Note that the only terminal type supported is ANSI/VT100
 */
SHAR_EOF
if test 2177 -ne "`wc -c < 'async.h'`"
then
	echo shar: error transmitting "'async.h'" '(should have been 2177 characters)'
fi
fi # end of overwriting check
if test -f 'asyncbsd.c'
then
	echo shar: will not over-write existing file "'asyncbsd.c'"
else
cat << \SHAR_EOF > 'asyncbsd.c'
/* Terminal interface for BSD
   Copyright (C) 1991 Joseph H. Allen

This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the terms
of the GNU General Public License as published by the Free Software
Foundation; either version 1, or (at your option) any later version. 

JOE is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  

You should have received a copy of the GNU General Public License
along with JOE; see the file COPYING.  If not, write to
the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */

#include <sgtty.h>
#include <fcntl.h>
#include <stdio.h>
#include <signal.h>
#include <sys/time.h>
#include "async.h"

#define HZ 10			/* Clock ticks/second */

#define DIVISOR 11000000	/* The baud rate divided into this should
				   give the number of microseconds per
				   character.  It should attempt to
				   reflect the true throughput, which is
				   usually slower than the best possible
				   for a given baud rate */

#define TIMES 3			/* Times per second that we check for
				   typeahead */

static struct sgttyb oarg;
static struct tchars otarg;
static struct ltchars oltarg;

static unsigned char *obuf=0;
static unsigned obufp=0;
static unsigned obufsiz;
static unsigned long ccc;

static unsigned speeds[]=
{
B50,50,B75,75,B110,110,B134,134,B150,150,B200,200,B300,300,B600,600,B1200,1200,
B1800,1800,B2400,2400,B4800,4800,B9600,9600,EXTA,19200,EXTB,38400
};

aopen()
{
int x;
struct sgttyb arg;
struct tchars targ;
struct ltchars ltarg;
fflush(stdout);
signal(SIGHUP,tsignal);
signal(SIGINT,SIG_IGN);
signal(SIGQUIT,SIG_IGN);
signal(SIGPIPE,SIG_IGN);
signal(SIGALRM,SIG_IGN);
signal(SIGTERM,tsignal);
signal(SIGUSR1,SIG_IGN);
signal(SIGUSR2,SIG_IGN);
ioctl(fileno(stdin),TIOCGETP,&arg);
ioctl(fileno(stdin),TIOCGETC,&targ);
ioctl(fileno(stdin),TIOCGLTC,&ltarg);
oarg=arg; otarg=targ; oltarg=ltarg;
arg.sg_flags=( (arg.sg_flags&~(ECHO|CRMOD) ) | CBREAK) ;
targ.t_intrc= -1;
targ.t_quitc= -1;
targ.t_eofc= -1;
targ.t_brkc= -1;
ltarg.t_suspc= -1;
ltarg.t_dsuspc= -1;
ltarg.t_rprntc= -1;
ltarg.t_flushc= -1;
ltarg.t_werasc= -1;
ltarg.t_lnextc= -1;
ioctl(fileno(stdin),TIOCSETN,&arg);
ioctl(fileno(stdin),TIOCSETC,&targ);
ioctl(fileno(stdin),TIOCSLTC,&ltarg);
ccc=0;
for(x=0;x!=30;x+=2)
 if(arg.sg_ospeed==speeds[x])
  {
  ccc=DIVISOR/speeds[x+1];
  break;
  }
if(!obuf)
 {
 if(!(TIMES*ccc)) obufsiz=4096;
 else
  {
  obufsiz=1000000/(TIMES*ccc);
  if(obufsiz>4096) obufsiz=4096;
  }
 if(!obufsiz) obufsiz=1;
 obuf=(unsigned char *)malloc(obufsiz);
 }
}

aclose()
{
aflush();
ioctl(fileno(stdin),TIOCSETN,&oarg);
ioctl(fileno(stdin),TIOCSETC,&otarg);
ioctl(fileno(stdin),TIOCSLTC,&oltarg);
signal(SIGHUP,SIG_DFL);
signal(SIGINT,SIG_DFL);
signal(SIGQUIT,SIG_DFL);
signal(SIGPIPE,SIG_DFL);
signal(SIGALRM,SIG_DFL);
signal(SIGTERM,SIG_DFL);
signal(SIGUSR1,SIG_DFL);
signal(SIGUSR2,SIG_DFL);
}

int have=0;
static unsigned char havec;
static int yep;

static dosig()
{
yep=1;
}

aflush()
{
if(obufp)
 {
 struct itimerval a,b;
 unsigned long usec=obufp*ccc;
 if(usec>=500000/HZ)
  {
  a.it_value.tv_sec=usec/1000000;
  a.it_value.tv_usec=usec%1000000;
  a.it_interval.tv_usec=0;
  a.it_interval.tv_sec=0;
  signal(SIGALRM,dosig);
  yep=0;
  sigsetmask(sigmask(SIGALRM));
  setitimer(ITIMER_REAL,&a,&b);
  write(fileno(stdout),obuf,obufp);
  while(!yep) sigpause(0);
  signal(SIGALRM,SIG_DFL);
  }
 else write(fileno(stdout),obuf,obufp);
 obufp=0;
 }
if(!have)
 {
 fcntl(fileno(stdin),F_SETFL,FNDELAY);
 if(read(fileno(stdin),&havec,1)==1) have=1;
 fcntl(fileno(stdin),F_SETFL,0);
 }
}

anext()
{
aflush();
if(have) have=0;
else if(read(fileno(stdin),&havec,1)<1) tsignal();
return havec;
}

eputc(c)
unsigned char c;
{
obuf[obufp++]=c;
if(obufp==obufsiz) aflush();
}

eputs(s)
char *s;
{
while(*s)
 {
 obuf[obufp++]= *(s++);
 if(obufp==obufsiz) aflush();
 }
}

getsize()
{
#ifdef TIOCGSIZE
struct ttysize getit;
#else
#ifdef TIOCGWINSZ
struct winsize getit;
#endif
#endif
#ifdef TIOCGSIZE
if(ioctl(fileno(stdout),TIOCGSIZE,&getit)!= -1)
 {
 if(getit.ts_lines>=3) height=getit.ts_lines;
 if(getit.ts_cols>=2) width=getit.ts_cols;
 }
#else
#ifdef TIOCGWINSZ
if(ioctl(fileno(stdout),TIOCGWINSZ,&getit)!= -1)
 {
 if(getit.ws_row>=3) height=getit.ws_row;
 if(getit.ws_col>=2) width=getit.ws_col;
 }
#endif
#endif
}

termtype()
{
unsigned char entry[1024];
unsigned char area[1024];
unsigned char *foo=area;
unsigned char *x=(unsigned char *)getenv("TERM");
if(!x) goto down;
if(tgetent(entry,x)!=1) goto down;
height=tgetnum("li");
if(height<3) height=24;
width=tgetnum("co");
if(width<2) width=80;
if(!tgetstr("cs",&foo)) scroll=0;
down:
getsize();
}

shell(s)
char *s;
{
aclose();
if(fork()) wait(0);
else
 {
 execl(s,s,0);
 _exit(0);
 }
aopen();
}
SHAR_EOF
if test 4916 -ne "`wc -c < 'asyncbsd.c'`"
then
	echo shar: error transmitting "'asyncbsd.c'" '(should have been 4916 characters)'
fi
fi # end of overwriting check
if test -f 'asyncesix.c'
then
	echo shar: will not over-write existing file "'asyncesix.c'"
else
cat << \SHAR_EOF > 'asyncesix.c'
/* Terminal interface for ESIX
   Copyright (C) 1991 Joseph H. Allen

This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the terms
of the GNU General Public License as published by the Free Software
Foundation; either version 1, or (at your option) any later version. 

JOE is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  

You should have received a copy of the GNU General Public License
along with JOE; see the file COPYING.  If not, write to
the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */

#include <stdio.h>
#include <signal.h>
#include <fcntl.h>
#include <sys/time.h>
#include <sys/param.h>
#include <termio.h>
#include "async.h"

struct winsize
{
unsigned short ws_row;
unsigned short ws_col;
unsigned short ws_xpixel;
unsigned short ws_ypixel;
};

#define DIVISOR 12000000
#define TIMES 2

static struct termio oldterm;

static unsigned char *obuf=0;
static unsigned obufp=0;
static unsigned obufsiz;
static unsigned long ccc;

static unsigned speeds[]=
{
B50,50,B75,75,B110,110,B134,134,B150,150,B200,200,B300,300,B600,600,B1200,1200,
B1800,1800,B2400,2400,B4800,4800,B9600,9600,EXTA,19200,EXTB,38400
};

aopen()
{
int x;
struct termio newterm;
fflush(stdout);
signal(SIGHUP,tsignal);
signal(SIGINT,SIG_IGN);
signal(SIGQUIT,SIG_IGN);
signal(SIGPIPE,SIG_IGN);
signal(SIGALRM,SIG_IGN);
signal(SIGTERM,tsignal);
signal(SIGUSR1,SIG_IGN);
signal(SIGUSR2,SIG_IGN);
signal(SIGPWR,tsignal);
ioctl(fileno(stdin),TCGETA,&oldterm);
newterm=oldterm;
newterm.c_lflag=0;
newterm.c_iflag&=~(ICRNL|IGNCR);
newterm.c_oflag=0;
newterm.c_cc[VINTR]= -1;
newterm.c_cc[VQUIT]= -1;
newterm.c_cc[VMIN]=1;
newterm.c_cc[VTIME]=0;
ioctl(fileno(stdin),TCSETAW,&newterm);
ccc=0;
for(x=0;x!=30;x+=2)
 if((newterm.c_cflag&CBAUD)==speeds[x])
  {
  ccc=DIVISOR/speeds[x+1];
  break;
  }
if(!obuf)
 {
 if(!(TIMES*ccc)) obufsiz=4096;
 else
  {
  obufsiz=1000000/(TIMES*ccc);
  if(obufsiz>4096) obufsiz=4096;
  }
 if(!obufsiz) obufsiz=1;
 obuf=(unsigned char *)malloc(obufsiz);
 }
}

aclose()
{
aflush();
ioctl(fileno(stdin),TCSETAW,&oldterm);
signal(SIGHUP,SIG_DFL);
signal(SIGINT,SIG_DFL);
signal(SIGQUIT,SIG_DFL);
signal(SIGPIPE,SIG_DFL);
signal(SIGALRM,SIG_DFL);
signal(SIGTERM,SIG_DFL);
signal(SIGUSR1,SIG_DFL);
signal(SIGUSR2,SIG_DFL);
signal(SIGPWR,SIG_DFL);
}

int have=0;
static unsigned char havec;
static int yep;

static dosig()
{
yep=1;
}

aflush()
{
if(obufp)
 {
 struct itimerval a,b;
 unsigned long usec=obufp*ccc;
 if(usec>=500000/HZ)
  {
  a.it_value.tv_sec=usec/1000000;
  a.it_value.tv_usec=usec%1000000;
  a.it_interval.tv_usec=0;
  a.it_interval.tv_sec=0;
  signal(SIGALRM,dosig);
  yep=0;
  sigsetmask(sigmask(SIGALRM));
  setitimer(ITIMER_REAL,&a,&b);
  write(fileno(stdout),obuf,obufp);
  while(!yep) sigpause(0);
  signal(SIGALRM,SIG_DFL);
  }
 else write(fileno(stdout),obuf,obufp);
 obufp=0;
 }
if(!have)
 {
 fcntl(fileno(stdin),F_SETFL,O_NDELAY);
 if(read(fileno(stdin),&havec,1)==1) have=1;
 fcntl(fileno(stdin),F_SETFL,0);
 }
}

anext()
{
aflush();
if(have) have=0;
else if(read(fileno(stdin),&havec,1)<1) tsignal();
return havec;
}

eputc(c)
unsigned char c;
{
obuf[obufp++]=c;
if(obufp==obufsiz) aflush();
}

eputs(s)
char *s;
{
while(*s)
 {
 obuf[obufp++]= *(s++);
 if(obufp==obufsiz) aflush();
 }
}

getsize()
{
#ifdef TIOCGSIZE
struct ttysize getit;
#else
#ifdef TIOCGWINSZ
struct winsize getit;
#endif
#endif
#ifdef TIOCGSIZE
if(ioctl(fileno(stdout),TIOCGSIZE,&getit)!= -1)
 {
 if(getit.ts_lines>=3) height=getit.ts_lines;
 if(getit.ts_cols>=2) width=getit.ts_cols;
 }
#else
#ifdef TIOCGWINSZ
if(ioctl(fileno(stdout),TIOCGWINSZ,&getit)!= -1)
 {
 if(getit.ws_row>=3) height=getit.ws_row;
 if(getit.ws_col>=2) width=getit.ws_col;
 }
#endif
#endif
}

termtype()
{
unsigned char entry[1024];
unsigned char area[1024];
unsigned char *foo=area;
unsigned char *x=(unsigned char *)getenv("TERM");
if(!x) goto down;
if(tgetent(entry,x)!=1) goto down;
height=tgetnum("li");
if(height<3) height=24;
width=tgetnum("co");
if(width<2) width=80;
if(!tgetstr("cs",&foo)) scroll=0;
down:
getsize();
}

shell(s)
char *s;
{
aclose();
if(fork()) wait(0);
else
 {
 execl(s,s,0);
 _exit(0);
 }
aopen();
}
SHAR_EOF
if test 4357 -ne "`wc -c < 'asyncesix.c'`"
then
	echo shar: error transmitting "'asyncesix.c'" '(should have been 4357 characters)'
fi
fi # end of overwriting check
if test -f 'asynchpux.c'
then
	echo shar: will not over-write existing file "'asynchpux.c'"
else
cat << \SHAR_EOF > 'asynchpux.c'
/* Terminal interface for HPUX
   Copyright (C) 1991 Joseph H. Allen

This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the terms
of the GNU General Public License as published by the Free Software
Foundation; either version 1, or (at your option) any later version. 

JOE is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  

You should have received a copy of the GNU General Public License
along with JOE; see the file COPYING.  If not, write to
the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */

#include <stdio.h>
#include <signal.h>
#include <fcntl.h>
#include <time.h>
#include <sys/param.h>
#include <termio.h>
#include "async.h"

#define DIVISOR 12000000
#define TIMES 2

static struct termio oldterm;

static unsigned char *obuf=0;
static unsigned obufp=0;
static unsigned obufsiz;
static unsigned long ccc;

static unsigned speeds[]=
{
B50,50,B75,75,B110,110,B134,134,B150,150,B200,200,B300,300,B600,600,B1200,1200,
B1800,1800,B2400,2400,B4800,4800,B9600,9600,EXTA,19200,EXTB,38400
};

aopen()
{
int x;
struct termio newterm;
fflush(stdout);
signal(SIGHUP,tsignal);
signal(SIGINT,SIG_IGN);
signal(SIGQUIT,SIG_IGN);
signal(SIGPIPE,SIG_IGN);
signal(SIGALRM,SIG_IGN);
signal(SIGTERM,tsignal);
signal(SIGUSR1,SIG_IGN);
signal(SIGUSR2,SIG_IGN);
signal(SIGPWR,tsignal);
ioctl(fileno(stdin),TCGETA,&oldterm);
newterm=oldterm;
newterm.c_lflag=0;
newterm.c_iflag&=~(ICRNL|IGNCR);
newterm.c_oflag=0;
newterm.c_cc[VINTR]= -1;
newterm.c_cc[VQUIT]= -1;
newterm.c_cc[VMIN]=1;
newterm.c_cc[VTIME]=0;
ioctl(fileno(stdin),TCSETAW,&newterm);
ccc=0;
for(x=0;x!=30;x+=2)
 if((newterm.c_cflag&CBAUD)==speeds[x])
  {
  ccc=DIVISOR/speeds[x+1];
  break;
  }
if(!obuf)
 {
 if(!(TIMES*ccc)) obufsiz=4096;
 else
  {
  obufsiz=1000000/(TIMES*ccc);
  if(obufsiz>4096) obufsiz=4096;
  }
 if(!obufsiz) obufsiz=1;
 obuf=(unsigned char *)malloc(obufsiz);
 }
}

aclose()
{
aflush();
ioctl(fileno(stdin),TCSETAW,&oldterm);
signal(SIGHUP,SIG_DFL);
signal(SIGINT,SIG_DFL);
signal(SIGQUIT,SIG_DFL);
signal(SIGPIPE,SIG_DFL);
signal(SIGALRM,SIG_DFL);
signal(SIGTERM,SIG_DFL);
signal(SIGUSR1,SIG_DFL);
signal(SIGUSR2,SIG_DFL);
signal(SIGPWR,SIG_DFL);
}

int have=0;
static unsigned char havec;
static int yep;

static dosig()
{
yep=1;
}

aflush()
{
if(obufp)
 {
 struct itimerval a,b;
 unsigned long usec=obufp*ccc;
 if(usec>=500000/HZ)
  {
  a.it_value.tv_sec=usec/1000000;
  a.it_value.tv_usec=usec%1000000;
  a.it_interval.tv_usec=0;
  a.it_interval.tv_sec=0;
  signal(SIGALRM,dosig);
  yep=0;
  sigsetmask(sigmask(SIGALRM));
  setitimer(ITIMER_REAL,&a,&b);
  write(fileno(stdout),obuf,obufp);
  while(!yep) sigpause(0);
  signal(SIGALRM,SIG_DFL);
  }
 else write(fileno(stdout),obuf,obufp);
 obufp=0;
 }
if(!have)
 {
 fcntl(fileno(stdin),F_SETFL,O_NDELAY);
 if(read(fileno(stdin),&havec,1)==1) have=1;
 fcntl(fileno(stdin),F_SETFL,0);
 }
}

anext()
{
aflush();
if(have) have=0;
else if(read(fileno(stdin),&havec,1)<1) tsignal();
return havec;
}

eputc(c)
unsigned char c;
{
obuf[obufp++]=c;
if(obufp==obufsiz) aflush();
}

eputs(s)
char *s;
{
while(*s)
 {
 obuf[obufp++]= *(s++);
 if(obufp==obufsiz) aflush();
 }
}

getsize()
{
#ifdef TIOCGSIZE
struct ttysize getit;
#else
#ifdef TIOCGWINSZ
struct winsize getit;
#endif
#endif
#ifdef TIOCGSIZE
if(ioctl(fileno(stdout),TIOCGSIZE,&getit)!= -1)
 {
 if(getit.ts_lines>=3) height=getit.ts_lines;
 if(getit.ts_cols>=2) width=getit.ts_cols;
 }
#else
#ifdef TIOCGWINSZ
if(ioctl(fileno(stdout),TIOCGWINSZ,&getit)!= -1)
 {
 if(getit.ws_row>=3) height=getit.ws_row;
 if(getit.ws_col>=2) width=getit.ws_col;
 }
#endif
#endif
}

termtype()
{
unsigned char entry[1024];
unsigned char area[1024];
unsigned char *foo=area;
unsigned char *x=(unsigned char *)getenv("TERM");
if(!x) goto down;
if(tgetent(entry,x)!=1) goto down;
height=tgetnum("li");
if(height<3) height=24;
width=tgetnum("co");
if(width<2) width=80;
if(!tgetstr("cs",&foo)) scroll=0;
down:
getsize();
}

shell(s)
char *s;
{
aclose();
if(fork()) wait(0);
else
 {
 execl(s,s,0);
 _exit(0);
 }
aopen();
}
SHAR_EOF
if test 4234 -ne "`wc -c < 'asynchpux.c'`"
then
	echo shar: error transmitting "'asynchpux.c'" '(should have been 4234 characters)'
fi
fi # end of overwriting check
if test -f 'asyncposix.c'
then
	echo shar: will not over-write existing file "'asyncposix.c'"
else
cat << \SHAR_EOF > 'asyncposix.c'
/* Terminal interface for POSIX
   Copyright (C) 1991 Joseph H. Allen
   (Contributed by Mike Lijewski)

This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the terms
of the GNU General Public License as published by the Free Software
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  

You should have received a copy of the GNU General Public License along with
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 675
Mass Ave, Cambridge, MA 02139, USA.  */ 

#include <stdio.h>
#include <signal.h>
#include <fcntl.h>
#include <sys/time.h>
#include <sys/param.h>
#include <termios.h>
#include <unistd.h>
#include "async.h"

#define DIVISOR 12000000
#define TIMES 2

static struct termios oldterm;

static unsigned char *obuf=0;
static unsigned obufp=0;
static unsigned obufsiz;
static unsigned long ccc;

static speed_t speeds[]=
{
B50,50,B75,75,B110,110,B134,134,B150,150,B200,200,B300,300,B600,600,B1200,1200,
B1800,1800,B2400,2400,B4800,4800,B9600,9600,EXTA,19200,EXTB,38400,B19200,19200,
B38400,38400
};

aopen()
{
int x;
struct sigaction action;
speed_t baud;
struct termios newterm;
fflush(stdout);
tcdrain(STDOUT_FILENO);
sigemptyset(&action.sa_mask);
action.sa_handler=tsignal;
sigaction(SIGHUP,&action,NULL);
sigaction(SIGTERM,&action,NULL);
action.sa_handler=SIG_IGN;
sigaction(SIGINT,&action,NULL);
sigaction(SIGQUIT,&action,NULL);
sigaction(SIGPIPE,&action,NULL);
sigaction(SIGALRM,&action,NULL);
sigaction(SIGUSR1,&action,NULL);
sigaction(SIGUSR2,&action,NULL);
tcgetattr(STDIN_FILENO,&oldterm);
newterm=oldterm;
newterm.c_lflag=0;
newterm.c_iflag&=~(ICRNL|IGNCR);
newterm.c_oflag=0;
/* we needn't worry about special characters since SIGS are disabled */
newterm.c_cc[VMIN]=1;
newterm.c_cc[VTIME]=0;
tcsetattr(STDIN_FILENO,TCSANOW,&newterm);
ccc=0;
baud=cfgetospeed(&newterm);
for(x=0;x!=34;x+=2)
 if(baud==speeds[x])
  {
  ccc=DIVISOR/speeds[x+1];
  break;
  }
if(!obuf)
 {
 if(!(TIMES*ccc)) obufsiz=4096;
 else
  {
  obufsiz=1000000/(TIMES*ccc);
  if(obufsiz>4096) obufsiz=4096;
  }
 if(!obufsiz) obufsiz=1;
 obuf=(unsigned char *)malloc(obufsiz);
 }
}

aclose()
{
struct sigaction action;
aflush();
tcsetattr(STDIN_FILENO,TCSANOW,&oldterm);
sigemptyset(&action.sa_mask);
action.sa_handler=SIG_DFL;
sigaction(SIGHUP,&action,NULL);
sigaction(SIGINT,&action,NULL);
sigaction(SIGQUIT,&action,NULL);
sigaction(SIGPIPE,&action,NULL);
sigaction(SIGALRM,&action,NULL);
sigaction(SIGTERM,&action,NULL);
sigaction(SIGUSR1,&action,NULL);
sigaction(SIGUSR2,&action,NULL);
}

int have=0;
static unsigned char havec;
static int yep;

static dosig()
{
yep=1;
}

aflush()
{
if(obufp)
 {
 struct itimerval a,b;
 unsigned long usec=obufp*ccc;
 if(usec>=500000/HZ)
  {
  a.it_value.tv_sec=usec/1000000;
  a.it_value.tv_usec=usec%1000000;
  a.it_interval.tv_usec=0;
  a.it_interval.tv_sec=0;
  signal(SIGALRM,dosig);
  yep=0;
  sigsetmask(sigmask(SIGALRM));
  setitimer(ITIMER_REAL,&a,&b);
  write(fileno(stdout),obuf,obufp);
  while(!yep) sigpause(0);
  signal(SIGALRM,SIG_DFL);
  }
 else write(fileno(stdout),obuf,obufp);
 obufp=0;
 }
if(!have)
 {
 fcntl(STDIN_FILENO,F_SETFL,O_NDELAY);
 if(read(STDIN_FILENO,&havec,1)==1) have=1;
 fcntl(STDIN_FILENO,F_SETFL,0);
 }
}

anext()
{
aflush();
if(have) have=0;
else if(read(STDIN_FILENO,&havec,1)<1) tsignal();
return havec;
}

eputc(c)
unsigned char c;
{
obuf[obufp++]=c;
if(obufp==obufsiz) aflush();
}

eputs(s)
char *s;
{
while(*s)
 {
 obuf[obufp++]= *(s++);
 if(obufp==obufsiz) aflush();
 }
}

getsize()
{
#ifdef TIOCGSIZE
struct ttysize getit;
#else
#ifdef TIOCGWINSZ
struct winsize getit;
#endif
#endif
#ifdef TIOCGSIZE
if(ioctl(fileno(stdout),TIOCGSIZE,&getit)!= -1)
 {
 if(getit.ts_lines>=3) height=getit.ts_lines;
 if(getit.ts_cols>=2) width=getit.ts_cols;
 }
#else
#ifdef TIOCGWINSZ
if(ioctl(fileno(stdout),TIOCGWINSZ,&getit)!= -1)
 {
 if(getit.ws_row>=3) height=getit.ws_row;
 if(getit.ws_col>=2) width=getit.ws_col;
 }
#endif
#endif
}

termtype()
{
unsigned char entry[1024];
unsigned char area[1024];
unsigned char *foo=area;
unsigned char *x=(unsigned char *)getenv("TERM");
if(!x) goto down;
if(tgetent(entry,x)!=1) goto down;
height=tgetnum("li");
if(height<3) height=24;
width=tgetnum("co");
if(width<2) width=80;
if(!tgetstr("cs",&foo)) scroll=0;
down:
getsize();
}

shell(s)
char *s;
{
aclose();
if(fork()) wait(0);
else
 {
 execl(s,s,0);
 _exit(0);
 }
aopen();
}
SHAR_EOF
if test 4662 -ne "`wc -c < 'asyncposix.c'`"
then
	echo shar: error transmitting "'asyncposix.c'" '(should have been 4662 characters)'
fi
fi # end of overwriting check
if test -f 'asyncxenix.c'
then
	echo shar: will not over-write existing file "'asyncxenix.c'"
else
cat << \SHAR_EOF > 'asyncxenix.c'
/* Terminal interface for XENIX
   Copyright (C) 1991 Joseph H. Allen

This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the terms
of the GNU General Public License as published by the Free Software
Foundation; either version 1, or (at your option) any later version. 

JOE is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  

You should have received a copy of the GNU General Public License
along with JOE; see the file COPYING.  If not, write to
the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */

#include <stdio.h>
#include <signal.h>
#include <termio.h>
#include "async.h"

#define DIVISOR 12000
#define TIMES 2

static struct termio oldterm;

static unsigned char *obuf=0;
static unsigned obufp=0;
static unsigned obufsiz;
static unsigned long ccc;

static unsigned speeds[]=
{
B50,50,B75,75,B110,110,B134,134,B150,150,B200,200,B300,300,B600,600,B1200,1200,
B1800,1800,B2400,2400,B4800,4800,B9600,9600,EXTA,19200,EXTB,38400
};

aopen()
{
int x;
struct termio newterm;
fflush(stdout);
signal(SIGHUP,tsignal);
signal(SIGINT,SIG_IGN);
signal(SIGQUIT,SIG_IGN);
signal(SIGPIPE,SIG_IGN);
signal(SIGALRM,SIG_IGN);
signal(SIGTERM,tsignal);
signal(SIGUSR1,SIG_IGN);
signal(SIGUSR2,SIG_IGN);
signal(SIGPWR,tsignal);
ioctl(fileno(stdin),TCGETA,&oldterm);
newterm=oldterm;
newterm.c_lflag=0;
newterm.c_iflag&=~(ICRNL|IGNCR);
newterm.c_oflag=0;
newterm.c_cc[VINTR]= -1;
newterm.c_cc[VQUIT]= -1;
newterm.c_cc[VMIN]=1;
newterm.c_cc[VTIME]=0;
ioctl(fileno(stdin),TCSETAW,&newterm);
ccc=0;
for(x=0;x!=30;x+=2)
 if((newterm.c_cflag&CBAUD)==speeds[x])
  {
  ccc=DIVISOR/speeds[x+1];
  break;
  }
if(!obuf)
 {
 if(!(TIMES*ccc)) obufsiz=4096;
 else
  {
  obufsiz=1000/(TIMES*ccc);
  if(obufsiz>4096) obufsiz=4096;
  }
 if(!obufsiz) obufsiz=1;
 obuf=(unsigned char *)malloc(obufsiz);
 }
}

aclose()
{
aflush();
ioctl(fileno(stdin),TCSETAW,&oldterm);
signal(SIGHUP,SIG_DFL);
signal(SIGINT,SIG_DFL);
signal(SIGQUIT,SIG_DFL);
signal(SIGPIPE,SIG_DFL);
signal(SIGALRM,SIG_DFL);
signal(SIGTERM,SIG_DFL);
signal(SIGUSR1,SIG_DFL);
signal(SIGUSR2,SIG_DFL);
signal(SIGPWR,SIG_DFL);
}

int have=0;

aflush()
{
if(obufp)
 {
 write(fileno(stdout),obuf,obufp);
 nap(obufp*ccc);
 obufp=0;
 }
if(!have) if(rdchk(fileno(stdin))>0) have=1;
}

anext()
{
unsigned char c;
aflush();
if(read(fileno(stdin),&c,1)<1) tsignal();
have=0;
return c;
}

eputc(c)
unsigned char c;
{
obuf[obufp++]=c;
if(obufp==obufsiz) aflush();
}

eputs(s)
char *s;
{
while(*s)
 {
 obuf[obufp++]= *(s++);
 if(obufp==obufsiz) aflush();
 }
}

getsize()
{
#ifdef TIOCGSIZE
struct ttysize getit;
#else
#ifdef TIOCGWINSZ
struct winsize getit;
#endif
#endif
#ifdef TIOCGSIZE
if(ioctl(fileno(stdout),TIOCGSIZE,&getit)!= -1)
 {
 if(getit.ts_lines>=3) height=getit.ts_lines;
 if(getit.ts_cols>=2) width=getit.ts_cols;
 }
#else
#ifdef TIOCGWINSZ
if(ioctl(fileno(stdout),TIOCGWINSZ,&getit)!= -1)
 {
 if(getit.ws_row>=3) height=getit.ws_row;
 if(getit.ws_col>=2) width=getit.ws_col;
 }
#endif
#endif
}

termtype()
{
unsigned char entry[1024];
unsigned char area[1024];
unsigned char *foo=area;
unsigned char *x=(unsigned char *)getenv("TERM");
if(!x) goto down;
if(tgetent(entry,x)!=1) goto down;
height=tgetnum("li");
if(height<3) height=24;
width=tgetnum("co");
if(width<2) width=80;
if(!tgetstr("cs",&foo)) scroll=0;
down:
getsize();
}

shell(s)
char *s;
{
aclose();
if(fork()) wait(0);
else
 {
 execl(s,s,0);
 _exit(0);
 }
aopen();
}
SHAR_EOF
if test 3623 -ne "`wc -c < 'asyncxenix.c'`"
then
	echo shar: error transmitting "'asyncxenix.c'" '(should have been 3623 characters)'
fi
fi # end of overwriting check
if test -f 'blocks.c'
then
	echo shar: will not over-write existing file "'blocks.c'"
else
cat << \SHAR_EOF > 'blocks.c'
/* Various memory block functions
   Copyright (C) 1991 Joseph H. Allen

This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the terms
of the GNU General Public License as published by the Free Software
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  

You should have received a copy of the GNU General Public License
along with JOE; see the file COPYING.  If not, write to
the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */


#include "blocks.h"

/* Set block to zero */

unsigned char *bzero(bk,sz)
unsigned char *bk;
{
unsigned char *b=bk-1;
if(sz) do b[sz]=0; while(--sz);
return bk;
}

/* Set block to unsigned character */

unsigned char *bset(bk,sz,c)
unsigned char *bk;
unsigned char c;
{
unsigned char *b=bk-1;
if(sz) do b[sz]=c; while(--sz);
return bk;
}

/* Move a possibly overlapping block of memory without loosing any data */

unsigned char *bmove(dst,src,sz)
unsigned char *dst;
unsigned char *src;
{
if(src==dst || !sz) return dst;
if(src>dst)
 {
 unsigned x=0;
 do dst[x]=src[x]; while(++x, --sz);
 }
else
 {
 unsigned char *d=dst-1;
 --src;
 do d[sz]=src[sz]; while(--sz);
 } 
return dst;
}

/* Move a block in the forward direction */

unsigned char *bfwrd(dst,src,sz)
unsigned char *dst;
unsigned char *src;
{
if(src!=dst && sz)
 {
 unsigned x=0;
 do dst[x]=src[x]; while(++x,--sz);
 }
return dst;
}

/* Move a block in the backward direction */

unsigned char *bbkwd(dst,src,sz)
unsigned char *dst;
unsigned char *src;
{
unsigned char *s=src-1, *d=dst-1;
if(s!=d && sz) do d[sz]=s[sz]; while(--sz);
return dst;
}

unsigned umin(a,b)
unsigned a,b;
{
return (a>b)?b:a;
}

unsigned umax(a,b)
unsigned a,b;
{
return (a>b)?a:b;
}

int min(a,b)
{
return (a>b)?b:a;
}

int max(a,b)
{
return (a>b)?a:b;
}

/* Compare blocks for equality */

int beq(dst,src,sz)
unsigned char *dst;
unsigned char *src;
{
unsigned char *d=dst-1, *s=src-1;
if(!sz) return 1;
do
 if(d[sz]!=s[sz]) return 0;
while(--sz);
return 1;
}

/* Compare blocks for equality case insensitive */

int bieq(dst,src,sz)
unsigned char *dst;
unsigned char *src;
{
unsigned char *d=dst, *s=src; int cnt=sz;
if(!cnt) return 1;
do
 if(*s>='a' && *s<='z')
  {
  if(*d>='a' && *d<='z') { if(*(d++)!=*(s++)) return 0; }
  else if(*(d++)!=(0x5f&*(s++))) return 0;
  }
 else if(*d>='a' && *d<='z')
  {
  if(*s>='a' && *s<='z') { if(*(d++)!=*(s++)) return 0; }
  else if(*(s++)!=(0x5f&*(d++))) return 0;
  }
 else if(*(d++)!=*(s++)) return 0;
while(--cnt);
return 1;
}

unsigned char *bchr(bk,sz,c)
unsigned char *bk;
unsigned char c;
{
unsigned char *s=bk;
int cnt=sz;
if(cnt)
 do if(*s==c) return s;
 while(++s, --cnt);
return 0;
}

unsigned char *brchr(bk,sz,c)
unsigned char *bk, c;
{
unsigned char *s=bk+sz;
int cnt=sz;
if(cnt)
 do if(*(--s)==c) return s;
 while(--cnt);
return 0;
}
SHAR_EOF
if test 3092 -ne "`wc -c < 'blocks.c'`"
then
	echo shar: error transmitting "'blocks.c'" '(should have been 3092 characters)'
fi
fi # end of overwriting check
if test -f 'blocks.h'
then
	echo shar: will not over-write existing file "'blocks.h'"
else
cat << \SHAR_EOF > 'blocks.h'
/* Memory block functions header file
   Copyright (C) 1991 Joseph H. Allen

This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the terms
of the GNU General Public License as published by the Free Software
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  

You should have received a copy of the GNU General Public License along with
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 675
Mass Ave, Cambridge, MA 02139, USA.  */ 

unsigned char *bzero();
unsigned char *bset();
unsigned char *bmove();
unsigned char *bfwrd();
unsigned char *bbkwd();
unsigned umin();
unsigned umax();
int min();
int max();
int beq();
int bieq();
unsigned char *bchr();
unsigned char *brchr();
SHAR_EOF
if test 1012 -ne "`wc -c < 'blocks.h'`"
then
	echo shar: error transmitting "'blocks.h'" '(should have been 1012 characters)'
fi
fi # end of overwriting check
if test -f 'cruddy.c'
then
	echo shar: will not over-write existing file "'cruddy.c'"
else
cat << \SHAR_EOF > 'cruddy.c'
/* Cruddy terminal interface - should be very portable though
   Copyright (C) 1991 Joseph H. Allen

This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the terms
of the GNU General Public License as published by the Free Software
Foundation; either version 1, or (at your option) any later version. 

JOE is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  

You should have received a copy of the GNU General Public License
along with JOE; see the file COPYING.  If not, write to
the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */


#include <stdio.h>
#include <signal.h>
#include "async.h"

int have=0;

eputs(s)
char *s;
{
fputs(s,stdout);
}

eputc(c)
{
putchar(c);
}

aopen()
{
fflush(stdout);
system("/bin/stty raw -echo");
signal(SIGHUP,tsignal);
signal(SIGINT,SIG_IGN);
signal(SIGQUIT,SIG_IGN);
signal(SIGPIPE,SIG_IGN);
signal(SIGALRM,SIG_IGN);
signal(SIGTERM,tsignal);
signal(SIGUSR1,SIG_IGN);
signal(SIGUSR2,SIG_IGN);
}

aclose()
{
fflush(stdout);
signal(SIGHUP,SIG_DFL);
signal(SIGINT,SIG_DFL);
signal(SIGQUIT,SIG_DFL);
signal(SIGPIPE,SIG_DFL);
signal(SIGALRM,SIG_DFL);
signal(SIGTERM,SIG_DFL);
signal(SIGUSR1,SIG_DFL);
signal(SIGUSR2,SIG_DFL);
system("/bin/stty cooked echo");
}

aflush()
{
}

anext()
{
unsigned char c;
fflush(stdout);
while(read(fileno(stdin),&c,1)!=1);
return c;
}

getsize()
{
}

termtype()
{
}

shell(s)
char *s;
{
aclose();
if(fork()) wait(0);
else
 {
 execl(s,s,0);
 _exit(0);
 }
aopen();
}
SHAR_EOF
if test 1682 -ne "`wc -c < 'cruddy.c'`"
then
	echo shar: error transmitting "'cruddy.c'" '(should have been 1682 characters)'
fi
fi # end of overwriting check
if test -f 'joe.1'
then
	echo shar: will not over-write existing file "'joe.1'"
else
cat << \SHAR_EOF > 'joe.1'
.TH JOE 1
.SH NAME
joe \- Joe's Own Editor
.SH SYNOPSIS
.B joe file
.br
.BR joe
.SH DESCRIPTION
JOE is a screen editor designed to be easy to learn for novice users and
powerfull enough for experienced users.  After you invoke the editor, you can
hit ^K H ('^' mean hold the Ctrl key down while pressing the following key) to
turn on the help text.  From this you should be able to figure out how to use
the editor.  A few things need further explanation however:

JOE uses the "TERM" environment entry and termcap to determine the height and
width of the screen and to determine if the terminal uses scrolling regions. 
Except for these differences the terminal must be ANSI/VT100 compatible.

Be sure that the baud rate as reported by stty is correct.  JOE uses this
to optimize its screen writes.  If you're going over a network, set the
baud rate to your best estimate of the actual througput.  If you're using
JOE in a window, set the baud rate to the highest possible (usually
'stty extb' or 'stty 38400').

^K J reformats the current paragraph.  ^T R can be used to change the right
margin.  The default is the width of the screen.  If auto-indent mode is set,
indented paragraphs are formated.

Use ^K B to set the beginning of a block and ^K K to set the end of a block. 
You can then copy, move save or delete the marked blocks.  To turn the
highlighting off, hit ^K B ^K K (make the beginning and ending the same or
move the beginning past the ending or move the ending before the beginning).

^K O splits a window into two.  You can then use ^K E to load a file into the
new window.  ^K I shows either one window or it shows all of the windows.  Use
^C to eliminate a window.

Control characters (0-31, 127) are shown underlined.  Characters above 127 are
shown in inverse.  You can use ` and ^\ to enter control characters
orcharacters with the 7th bit set.

Hit ^K F to find text.  You will be prompted to enter the search string. 
After hitting Return, you will be prompted for options- you can type 1 or more
of:  

.br
			i	Ignore case
.br
			b	Backwards
.br
			r	Replace
.br
			nnn	Find the nth occurance or do nnn replacements
.br

		If you hit r, you will also be prompted to enter the
		replacement string.

		Hit ^L to find the next occurance of the previous search
		string (with all the same options).

If for some reason JOE gets a signal (that it's going to crash or that the
system is messing up), it attempts to save the last file edited in a file
"aborted" in the current directory.

.SH FILES
.DT
.ta 25n

 \.joerc 			Initialization file.  JOE looks for
.br
				this in the current directory, the
.br
				user's home directory and in the 
.br
				directory containing JOE

.SH RESTRICTIONS

The file size is limited to the system process size limit 

.SH BUGS
Send bug reports to rcarter@wpi.wpi.edu (Joseph H. Allen).  This should be
valid to at least January, 1991.  You can also contact me through snail mail:

.br
		Joseph H. Allen
.br
		28 Dale Lane
.br
		Smithtown, N.Y. 11787
SHAR_EOF
if test 3013 -ne "`wc -c < 'joe.1'`"
then
	echo shar: error transmitting "'joe.1'" '(should have been 3013 characters)'
fi
fi # end of overwriting check
if test -f 'joe.c'
then
	echo shar: will not over-write existing file "'joe.c'"
else
cat << \SHAR_EOF > 'joe.c'
/* JOE - Joe's Own Editor - the bulk of the code is here
   Copyright (C) 1991 Joseph H. Allen

This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the terms
of the GNU General Public License as published by the Free Software
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  

You should have received a copy of the GNU General Public License
along with JOE; see the file COPYING.  If not, write to
the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */

#include <stdio.h>
/* #include <stdlib.h> */
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <errno.h>
#include <pwd.h>
extern errno;
#include "async.h"
#include "blocks.h"
#include "joe.h"
int width=80;
int height=24;
int scroll=1;

unsigned char stalin[PATHSIZE];

int smode=0;
int tops=0;
int bots;
int oxpos=0;            /* Current cursor position */
int oypos=0;
int *scrn;            /* Screen buffer address */

unsigned char *omsg=0;           /* Pointer to opening message */

dopen()
{
int x;
unsigned char buf[30];
scrn=(int *)malloc(width*height*sizeof(int));
for(x=0;x<width*height;x++) scrn[x]= ' ';
if(scroll)
 {
 sprintf(buf,"\033[0m\033[1;%dr\033[H\033[J",height), eputs(buf);
 bots=height-1;
 }
else eputs("\033[0m\033[H\033[J");
}

dclose(ms)
unsigned char *ms;
{
setregn(0,height-1);
cpos(height-1,0);
attrib(0);
eputs(ms);
eputs("\033[K");
oxpos=strlen(ms);
cpos(height-1,0);
eputc(10);
}

resize()
{
int x;
unsigned char buf[30];
free(scrn);
scrn=(int *)malloc(width*height*sizeof(int));
for(x=0;x<width*height;x++) scrn[x]= ' ';
if(scroll)
 {
 sprintf(buf,"\033[0m\033[1;%dr\033[H\033[J",height), eputs(buf);
 bots=height-1;
 }
else eputs("\033[0m\033[H\033[J");
smode=0;
if(wind>height-3) wind=height-3;
if(wind) hupd=1;
wfit();
upd=1;
}

cposs(y,x)
{
unsigned char s[9];
if(y>bots || y<tops) setregn(0,height-1);
if(y==oypos)
 {
 if(x==oxpos) return;
 if(x==0)
  {
  eputc(13);
  return;
  }
 if(oxpos>=x+1 && oxpos<=x+4)
  {
  while(oxpos!=x) eputc(8), x++;
  return;
  }
 if(x>=oxpos+1 && x<=oxpos+4)
  {
  while(x!=oxpos) tputcc(scrn[oypos*width+oxpos++]);
  return;
  }
 if(x>oxpos)
  sprintf(s,"\033[%dC",x-oxpos);
 else
  sprintf(s,"\033[%dD",oxpos-x);
 eputs(s);
 return;
 }
if(x==oxpos)
 {
 if(y>=oypos+1 && y<=oypos+4)
  {
  while(y!=oypos) /* acheck(), */ eputc(10), oypos++;
  return;
  }
 if(y==0 && x==0)
  {
  eputs("\033[H");
  return;
  }
 if(y>oypos)
  sprintf(s,"\033[%dB",y-oypos);
 else
  sprintf(s,"\033[%dA",oypos-y);
 eputs(s);
 return;
 }
if(x<3 && y>oypos && y<oypos+5)
 {
 while(oypos!=y) ++oypos, eputc('\012');
 eputc('\015'); oxpos=0;
 while(x!=oxpos) tputcc(scrn[oypos*width+oxpos++]);
 return;
 }
if(x==0 && y==0)
 {
 eputs("\033[H");
 return;
 }
if(x==0)
 {
 sprintf(s,"\033[%dH",y+1);
 eputs(s);
 return;
 }
sprintf(s,"\033[%d;%dH",y+1,x+1);
eputs(s);
return;
}

cpos(y,x)
{
cposs(y,x);
oxpos=x;
oypos=y;
}

setregn(top,bot)
{
unsigned char sst[16];
if(top!=tops || bots!=bot)
 {
 tops=top;
 bots=bot;
 if(scroll)
  {
  oxpos=0;
  oypos=0;
  sprintf(sst,"\033[%d;%dr",top+1,bot+1);
  eputs(sst);
  }
 }
}

attrib(x)
{
if(smode== -1) goto clr;
if(!(x&INVERSE) && (smode&INVERSE)) goto clr;
if(!(x&BLINK) && (smode&BLINK)) goto clr;
if(!(x&UNDERLINE) && (smode&UNDERLINE)) goto clr;
if(!(x&BOLD) && (smode&BOLD)) goto clr;
goto ovr;
clr:
smode=0;
eputs("\033[m");
ovr:
if(x&INVERSE && !(smode&INVERSE)) eputs("\033[7m");
if(x&BLINK && !(smode&BLINK)) eputs("\033[5m");
if(x&UNDERLINE && !(smode&UNDERLINE)) eputs("\033[4m");
if(x&BOLD && !(smode&BOLD)) eputs("\033[1m");
smode=x;
}

int uuu=0;
int cntr=0;
int upd=1;
int hupd=0;
int newy=1;
int helpon=0;
int wind=0;
int xpos=0;
int ypos=0;
TXTSIZ saddr=0;
TXTSIZ xoffset=0;

unsigned char *help=0;
int helplines=0;
int helpsize=0;
int helpblksize=0;

/* Clear end of line if needed.  i is row number and j is column number */

clreolchk(i,j)
TXTSIZ j;
{
int *k=scrn+i*width;
int t, jj;
if(j<xoffset) jj=0;
else
 if(j>=xoffset+width-1) return;
 else jj=j-xoffset;
for(t=width-1;t>=jj;--t) if(k[t]!=' ') goto ohoh;
return;
ohoh:
if(t==jj)
 {
 cpos(i,jj);
 tputcc(' ');
 k[jj]=' ';
 oxpos++;
 return;
 }
while(t>=jj) k[t--]=' ';
cpos(i,jj);
attrib(0);
eputs("\033[K");
}

/* Change buffer character to displayable form */

showas(ch)
{
#ifdef NOHIGHBIT
if(ch>=128)
 {
 ch&=127;
 ch|=INVERSE;
 }
#endif
if((ch&127)<32)
 {
 ch+='@';
 ch|=UNDERLINE;
 }
if((ch&127)==127)
 {
 ch&=~127;
 ch|='?'|UNDERLINE;
 }
return ch;
}

int udline(i)
{
int q=i*width;
TXTSIZ j;
int t;
int u;
int ch;
for(j=0;1;j++)
 {
 if(have) return -1;
 if(fmeof())
  {
  clreolchk(i++,j);
  j=0;
  while(i<curwin->wind+curwin->height) clreolchk(i++,j);
  return 1;
  }
 ch=fmgetc();
 if(ch==NL)
  {
  clreolchk(i,j);
  return 0;
  }
 if(ch==TAB)
  {
  ch=' ';
  if(fmnote()-1>=markb && fmnote()<=marke && curbuf==markbuf) ch^=128;
  t=i*width+j-xoffset;
  do
   {
   if(j>=xoffset && j<xoffset+width-1)
    {
    u=scrn[t];
    if(ch!=u || u==-1)
     {
     cpos(i,(int)(j-xoffset));
     scrn[t]=ch;
     tputcc(ch);
     oxpos++;
     }
    }
   t++;
   j++;
   } while(j&7);
  j--;
  }
 else
  {
  ch=showas(ch);
  if(fmnote()-1>=markb && fmnote()<=marke && curbuf==markbuf) ch^=INVERSE;
  t=q+j-xoffset;
  if(j>=xoffset && j<xoffset+width-1)
   {
   u=scrn[t];
   if(ch!=u || u==-1)
    {
    cpos(i,(int)(j-xoffset));
    scrn[t]=ch;
    tputcc(ch);
    oxpos++;
    }
   }
  }
 }
}

int udscrn()
{
int i;
int v;
for(i=ypos;i<curwin->height+curwin->wind;i++)
 if(v=udline(i)) break;
if(v== -1) return 0;
fmpoint(saddr);
for(i=curwin->wind+1;i<ypos;i++)
 if(udline(i)) return 0;
return 1;
}

dupdate1(fgf)
{
int y;
TXTSIZ x;
TXTSIZ sve=fmnote();

TXTSIZ sve1;

/* Status line */
strcpy(stalin,"\\i");
if(gfnam[0]) strcat(stalin,gfnam);
else strcat(stalin,"(Unnamed)");
if(changed) strcat(stalin," (Modified)");
if(!helpon && strlen(stalin)+21<width+1)
 {
 int x=strlen(stalin);
 while(x<width-20) stalin[x++]=' ';
 stalin[x]=0;
 strcat(stalin,"Hit Ctrl-K H for help");
 }
else
 {
 int x=strlen(stalin);
 while(x<width+1) stalin[x++]=' ';
 stalin[x]=0;
 }

msgout(curwin->wind,stalin,0);

x=getcol();
if(fmnrnl()) fmpoint(fmnote()+1);
sve1=fmnote();

/* calculate what screen cursor position should be */

if(x>xoffset+width-2)
 xpos=width-2, xoffset=x-width+2;
else
 if(x<xoffset)
  xpos=0, xoffset=x;
 else
  xpos=x-xoffset;

/* calculate new y cursor position and point to beginning of screen */

if(newy)
 {
 if(fmnote()<=saddr)
  {
  ypos=curwin->wind+1;
  saddr=fmnote();
  }
 else
  {
  /* is cursor within 24 lines of old beginning of screen */
 
  for(y=0;y!=curwin->height-2;y++)
   {
   if(fmnote()==saddr) goto over;
   fmrgetc();
   if(fmnrnl()) fmpoint(fmnote()+1);
   }
  if(cntr)
   {
   for(x=0;x<(curwin->height-1)/2;x++)
    {
    fmfnl();
    y--;
    fmgetc();
    }
   }
  over:
  cntr=0;
  saddr=fmnote();
  ypos=y+curwin->wind+1;
  }
 newy=0;
 }

/* Now update screen */
if(have)
 { if(fgf) cpos(ypos,xpos); }
else
 {
 fmpoint(sve1);
 if(udscrn()) upd=0;
 if(fgf) cpos(ypos,xpos);
 }
fmpoint(sve);
}

dupdatehelp()
{
int att;
int i,j,c;
unsigned char *from=help;
int *too=scrn;
if(helplines>height-3) wind=height-3;
else wind=helplines;
for(i=0;i!=wind;++too, ++i)
 {
 j=0; att=0;
 loop:
 if(have) return;
 if(j==width-1)
  {
  while(*from!='\n') ++from;
  ++from;
  continue;
  }
 if(*from=='\n')
  {
  hclreol:
  ++from;
  cpos(i,j);
  eputs("\033[K");
  while(j!=width-1) *too++ =' ', ++j;
  continue;
  }
 if(*from=='\\')
  {
  ++from;
  if(*from=='\n') goto hclreol;
  if(*from=='u')
   {
   att^=UNDERLINE;
   ++from;
   goto loop;
   }
  if(*from=='i')
   {
   att^=INVERSE;
   ++from;
   goto loop;
   }
  }
 c= *from++ | att;
 if(c!= *too)
  {
  cpos(i,j);
  tputcc(*too= c);
  oxpos++;
  }
 ++too; ++j;
 goto loop;
 }
hupd=0;
}

int updall=0;

dupdate()
{
int xp,yp;

aflush();
if(hupd) dupdatehelp();
if(upd)
 {
 int total=height-wind;
 struct window *x;
 dupdate1(1);
 stwin(curwin);
 x=curwin;
 curwin=topwin;
 xp=xpos; yp=ypos;
 do
  {
  if((curbuf==x->buffer || updall) && curwin!=x)
   {
   if(total<=0) break;
   ldwin(curwin);
   total-=curwin->height;
   newy=1;
   dupdate1(0);
   stwin(curwin);
   }
  else if(curwin==x)
   total-=curwin->height;
  }
  while(curwin=curwin->next,curwin!=topwin);
 updall=0;
 ldwin(x);
 curwin=x;
 cpos(ypos=yp,xpos=xp);
 }
}

invalidate(line)
{
int x;
for(x=0;x<width;x++) scrn[width*line+x]= -1;
}

tputcc(c)
{
attrib(c);
eputc(c&255);
}

int backup=0;
FILE *handle;
unsigned char gfnam[PATHSIZE];

TXTSIZ bufsiz;		/* Size of buffer */
TXTPTR point;		/* The point */
TXTPTR buffer;		/* The buffer */
TXTPTR filend;		/* First character not in buffer */
TXTPTR hole;		/* Beginning of hole */
TXTPTR ehole;		/* First character not in hole */
int changed=0;		/* Set when file has been changed */

fmopen()
{
buffer=(unsigned char *)TXTMALLOC(bufsiz=HOLESIZE);
point=buffer;
hole=buffer;
ehole=buffer+HOLESIZE;
filend=ehole;
changed=0;
}

fmexpand(amount)
unsigned amount;
{
if(filend+amount-buffer>bufsiz)
 {
 unsigned char *old=buffer;
 buffer=(TXTPTR)TXTREALLOC(buffer,bufsiz=(filend+amount+HOLESIZE-buffer));
 point+=buffer-old;
 filend+=buffer-old;
 hole+=buffer-old;
 ehole+=buffer-old;
 }
}

fmhole()
{
if(point==hole) return;
if(point==ehole)
 {
 point=hole;
 return;
 }
if(point<hole)
 {
 bmove(ehole-(hole-point),point,hole-point);
 ehole-=(hole-point);
 hole=point;
 }
else
 {
 bmove(hole,ehole,point-ehole);
 hole+=point-ehole;
 ehole=point;
 point=hole;
 }
}

fmbig(size)
TXTSIZ size;
{
if(size>fmholesize())
 {
 size+=HOLESIZE;
 fmexpand(size);
 bmove(ehole+size,ehole,filend-ehole);
 ehole+=size;
 filend+=size;
 }
}

int fmfnl()
{
while(((point==hole)?(point=ehole):point)!=filend)
 if(*point==NL) return 1;
 else point++;
return 0;
}

int fmrnl()
{
if(fmrc()==NL) return 1;
while((point==ehole?point=hole:point)!=buffer)
 if(*(--point)==NL) return 1;
return 0;
}


int nundorecs=0;
struct undorec
 {
 struct undorec *next;
 TXTSIZ size;
 TXTSIZ where;
 struct buffer *buf;
 unsigned char *buffer;
 }
 *undorecs=0;

fminsu(size)
TXTSIZ size;
{
struct window *z;
if(undorecs) undorecs->buf=0;
if(curbuf==markbuf)
 {
 if(fmnote()<markb) markb+=size;
 if(fmnote()<marke) marke+=size;
 }
z=topwin;
do
 {
 if(z->buffer==curbuf)
  {
  if(z==curwin)
   {
   if(fmnote()<saddr) saddr+=size;
   }
  else
   {
   if(fmnote()<z->saddr) z->saddr+=size;
   if(fmnote()<z->cursor) z->cursor+=size;
   }
  }
 z=z->next;
 }
 while(z!=topwin);
}

struct undorec *undoptr=0;
int undoflag=1;

undo()
{
if(!undorecs) return;
extend=0;
if(undoptr)
 {
 undoflag=0;
 fmdel(undoptr->size);
 undoflag=1;
 undoptr=undoptr->next;
 if(!undoptr)
  {
  marke=markb;
  return;
  }
 }
else undoptr=undorecs;
fminss(undoptr->buffer,undoptr->size);
markbuf=curbuf;
markb=fmnote();
marke=markb+undoptr->size;
}

redo()
{
if(!undorecs) return;
extend=0;
if(undoptr)
 {
 undoflag=0;
 fmdel(undoptr->size);
 undoflag=1;
 if(undoptr==undorecs)
  {
  undoptr=0;
  marke=markb;
  return;
  }
 else
  {
  struct undorec *p;
  for(p=undorecs;p->next!=undoptr;p=p->next);
  undoptr=p;
  }
 }
else for(undoptr=undorecs;undoptr->next;undoptr=undoptr->next);
fminss(undoptr->buffer,undoptr->size);
markbuf=curbuf;
markb=fmnote();
marke=markb+undoptr->size;
}

fmdelu(size)
TXTSIZ size;
{
struct window *z;
struct undorec *it;
if(undoflag)
 {
 if(undorecs)
  if(undorecs->buf==curbuf && (undorecs->where==fmnote()))
   {
   /* Add to end */
   undorecs->buffer=(unsigned char *)realloc(undorecs->buffer,
   undorecs->size+size);
   fmcpy(undorecs->buffer+undorecs->size,size);
   undorecs->size+=size;
   }
  else if(undorecs->buf==curbuf && (undorecs->where==fmnote()+size))
   {
   /* Add to beginning */
   undorecs->buffer=(unsigned char *)realloc(
   undorecs->buffer,undorecs->size+size);
   bbkwd(undorecs->buffer+size,undorecs->buffer,undorecs->size);
   fmcpy(undorecs->buffer,size);
   undorecs->size+=size;
   undorecs->where-=size;
   }
  else goto in;
 else
  {
  in:
  /* New record */
  it=(struct undorec *)malloc(sizeof(struct undorec));
  it->next=undorecs;
  undorecs=it;
  it->buf=curbuf;
  it->size=size;
  it->where=fmnote();
  it->buffer=(unsigned char *)malloc(size);
  fmcpy(it->buffer,size);
  ++nundorecs;
  if(nundorecs==20)
   {
   struct undorec *p;
   for(it=undorecs;it->next;p=it,it=it->next);
   free(it->buffer);
   free(it);
   p->next=0;
   }
  }
 }
if(markbuf==curbuf)
 {
 if(fmnote()<markb) markb-=umin(size,markb-fmnote());
 if(fmnote()<marke) marke-=umin(size,marke-fmnote());
 }
z=topwin;
do
 {
 if(curbuf==z->buffer)
  {
  if(z==curwin)
   {
   if(fmnote()<saddr) saddr-=umin(size,saddr-fmnote());
   }
  else
   {
   if(fmnote()<z->saddr) z->saddr-=umin(size,z->saddr-fmnote());
   if(fmnote()<z->cursor) z->cursor-=umin(size,z->cursor-fmnote());
   }
  }
 z=z->next;
 }
 while(z!=topwin);
}

fmdel(x)
TXTSIZ x;
{
fmhole();
fmdelu(x);
ehole+=x;
changed=1;
}

fminss(string,size)
unsigned char *string;
unsigned size;
{
fminsu(size);
fmhole();
if(size>fmholesize()) fmbig(size);
bmove(hole,string,size);
hole+=size;
changed=1;
}

fmcpy(string,size)
unsigned char *string;
{
fmhole();
bbkwd(string,ehole,size);
}

int fmcmp(string,size)
unsigned char *string;
int size;
{
unsigned char *x;
if(point==hole) point=ehole;
if(hole>point && hole<point+size && hole!=ehole)
 {
 if(fmcmp(string,hole-point)) return 1;
 else
  {
  x=point;
  point=ehole;
  if(fmcmp(string+(hole-x),size-(hole-x)))
   {
   point=x;
   return 1;
   }
  else
   {
   point=x;
   return 0;
   }
  }
 }
else
 {
 x=point;
 do
  if(*(x++)!=*(string++)) return 1;
  while(--size);
 return 0;
 }
}

int tupp(c)
unsigned char c;
{
if(c>='a' && c<='z') return c+'A'-'a';
else return c;
}

int fmicmp(string,size)
unsigned char *string;
int size;
{
unsigned char *x;
if(point==hole) point=ehole;
if(hole>point && hole<point+size && hole!=ehole)
 {
 if(fmcmp(string,hole-point)) return 1;
 else
  {
  x=point;
  point=ehole;
  if(fmcmp(string+(hole-x),size-(hole-x)))
   {
   point=x;
   return 1;
   }
  else
   {
   point=x;
   return 0;
   }
  }
 }
else
 {
 x=point;
 do
  if(tupp(*(x++))!=tupp(*(string++))) return 1;
  while(--size);
 return 0;
 }
}

int fmsave(file,size)
FILE *file;
TXTSIZ size;
{
if(!size) return 1;
if(point==hole) point=ehole;
if(hole>point && hole<point+size && hole!=ehole)
 {
 if(hole-point!=fwrite(point,1,hole-point,file)) return 0;
 if(size-(hole-point)!=fwrite(ehole,1,size-(hole-point),file)) return 0;
 return 1;
 }
else
 return size==fwrite(point,1,size,file);
}

int fminsfil(file)
FILE *file;
{
struct stat buf;
TXTSIZ amount;
fstat(fileno(file),&buf);
if(buf.st_size==0) return 1;
fminsu(buf.st_size);
changed=1;
fmhole();
fmbig(buf.st_size);
amount=fread(hole,1,buf.st_size,file);
hole+=amount;
return amount==buf.st_size;
}

/* Output a message string */
/* The right part of it is chopped */

msgout(row,str,flg)
unsigned char *str;
{
int j=0, c, att=0;
int *too=scrn+width*row;
loop:
if(j==width-1)
 {
 if(flg) cpos(row,j);
 return;
 }
if(!*str)
 {
 hclreol:
 cpos(row,j);
 eputs("\033[K");
 while(j!=width-1) *too++ =' ', ++j;
 return;
 }
if(*str=='\\')
 {
 ++str;
 if(!*str) goto hclreol;
 if(*str=='u')
  {
  att^=UNDERLINE;
  ++str;
  goto loop;
  }
 if(*str=='i')
  {
  att^=INVERSE;
  ++str;
  goto loop;
  }
 }
c= *str++ | att;
if(c!= *too)
 {
 cpos(row,j);
 tputcc(*too= c);
 oxpos++;
 }
++too; ++j;
goto loop;
}

int getl(prompt,dat)
unsigned char *prompt;
unsigned char *dat;
{
int ch,x,y;
unsigned char buf[PATHSIZE];
strcpy(buf,prompt);
strcat(buf," (^C to abort): ");
y=strlen(buf);
strcat(buf,dat);
x=strlen(buf);
while(1)
 {
 if(x>width-1) msgout(height-1,buf+x-(width-1),1);
 else msgout(height-1,buf,1);
 ch=anext();
 if(ch=='L'-'@')
  {
  ch= -1;
  break;
  }
 if(ch==13 || ch==10)
  {
  ch=1;
  break;
  }
 if(ch>=32 && ch<127)
  {
  buf[x+1]=0, dat[x+1-y]=0;
  buf[x]=ch, dat[x++-y]=ch;
  continue;
  }
 if((ch==8 || ch==127) && x-y)
  {
  x--;
  dat[x-y]=0;
  buf[x]=0;
  continue;
  }
 if(ch==3)
  {
  ch=0;
  break;
  }
 }
return ch;
}

msg(ms)
unsigned char *ms;
{
msgout(height-1,ms,1);
anext();
}

int askyn(ms)
unsigned char *ms;
{
int ch;
msgout(height-1,ms,1);
up:
ch=anext();
switch(ch)
 {
case 'y':
case 'n':
 eputc(ch);
 ch&=0x5f;
 break;
case 'Y':
case 'N':
 eputc(ch);
 break;
case 3:
 ch= -1;
 break;
default:
 goto up;
 }
return ch;
}

int query(ms)
unsigned char *ms;
{
msgout(height-1,ms,1);
return anext();
}

int nquery(ms)
unsigned char *ms;
{
msgout(height-1,ms,1);
cpos(ypos,xpos);
return anext();
}

imsg()
{
attrib(0);
if(omsg) msgout(1,omsg,0);
upd=1;
msgout(height-1,"\\i** Joe's Own Editor version 0.1.0 (1991) **\\i",0);
cpos(1,0);
}

int pic;
int autoind;
int overwrite;
int wrap;
int tabmagic;
TXTSIZ rmargin;

int options=0;
unsigned char sstring[PATHSIZE];
unsigned char rstring[PATHSIZE];
int len;

TXTSIZ markb=0;
TXTSIZ marke=0;

TXTSIZ added;
TXTSIZ extend;
int leave;       /* set if editor should now exit */

TXTSIZ getrcol()
{
TXTSIZ x,y;
unsigned char ch;
x=fmnote();
if(fmnrnl()) fmgetc();
y=0;
while(fmnote()!=x)
 {
 ch=fmgetc();
 if(ch==TAB)
  while((++y)&7);
 else
  y++;
 }
return y;
}

gocol(x)
TXTSIZ x;
{
TXTSIZ y;
int ch;
if(fmnrnl()) fmgetc();
extend=0;
for(y=0;y!=x;y++)
 {
 if(fmeof()) goto dn;
 ch=fmgetc();
 if(ch==NL)
  {
  fmpoint(fmnote()-1);
  extend=x;
  return;
  }
 if(ch==TAB)
  {
  while((++y)&7)
   {
   if(y==x)
    {
    fmpoint(fmnote()-1);
dn:
    extend=x;
    return;
    }
   }
  y--;
  }
 }
}

TXTSIZ calcs()
{
TXTSIZ y=0;
if(fmnrnl()) fmgetc();
extend=0;
while(! (fmeof()?1:fmrc()==NL))
 if(fmrc()==' ')
  {
  ++y;
  fmgetc();
  }
 else if(fmrc()==TAB)
  {
  do ++y; while(y%TABWIDTH);
  fmgetc();
  }
 else break;
return y;
}

unfill()
{
fmfnl();
extend=0;
while(fmnote())
 {
 unsigned char x=fmrgetc();
 if(x==' ' || x==TAB) fmdel(1);
 else
  {
  fmgetc();
  break;
  }
 }
}

/* Fill from end of line to extend position */

fillup()
{
TXTSIZ x;
if(extend && pic)
 {
 x=getrcol();
 while(extend>x)
  {
  fminsc(' ');
  fmgetc();
  ++x;
  }
 }
extend=0;
}

/* Save current buffer in named file.  Returns 0 on error.  Clears 'changed'
 * variable if sucessfull
 */

int saveit1(tos)
unsigned char *tos;
{
unsigned char sting[PATHSIZE];
TXTSIZ temp=fmnote();
fmpoint(0);
handle=fopen(tos,"w+");
if(handle)
 {
 if(!fmsave(handle,fmsize()))
  {
  sprintf(sting,"\\iError writing to file %s\\i",tos);
  msg(sting);
  fmpoint(temp);
  return(0);
  }
 fmpoint(temp);
 if(fclose(handle)==EOF)
  {
  sprintf(sting,"\\iError closing file %s\\i",tos);
  msg(sting);
  fmpoint(temp);
  return(0);
  }
 changed=0;
 curbuf->changed=0;
 return(1);
 }
else
 {
 sprintf(sting,"\\iError opening file %s\\i",tos);
 msg(sting);
 fmpoint(temp);
 return(0);
 }
}

rewrite()
{
unsigned char s[25];
int *t,c;
oxpos= 0;
oypos= 0;
tops= 0;
bots= height-1;
if(scroll) sprintf(s,"\033[m\033[1;%dr\033[H\033[J",height);
else sprintf(s,"\033[m\033[H\033[J");
eputs(s);
t=scrn;
c=width*height;
do *(t++)= ' '; while(--c);
upd=1;
newy=1;
updall=1;
if(helpon) hupd=1;
}

/* Toggle help text */

thelp()
{
struct window *x;
newy=1;
upd=1;
if(helpon)
 {
 x=topwin;
 do
  {
  if(x->hheight) x->height=x->hheight;
  else x->height*=height, x->height/=height-wind;
  x=x->next;
  }
  while(x!=topwin);
 wind=0, hupd=0;
 }
else
 {
 if(helplines>height-3) wind=height-3;
 else wind=helplines;
 hupd=1;
 x=topwin;
 do
  {
  x->hheight=x->height;
  x->height*=height-wind;
  x->height/=height;
  x=x->next;
  }
  while(x!=topwin);
 }
helpon= !helpon;
wfit();
}

/* Move cursor to beginning of file */

bof()
{
extend=0;
fmpoint(0);
newy=1;
}

/* Move cursor to beginning of line */

bol()
{
if(fmnrnl()) fmgetc();
extend=0;
}

/* Move cursor to end of line */

eol()
{
extend=0;
fmfnl();
}

/* Move cursor to end of file */

eof()
{
extend=0;
fmpoint(fmsize());
newy=1;
}

/* Move cursor right */

urtarw()
{
fillup();
extend=0;
if(fmeof())
 {
 if(pic)
  {
  into:
  fminsc(' ');
  fmgetc();
  }
 return;
 }
else if(fmrc()==NL)
 {
 if(pic) goto into;
 bol();
 udnarw();
 return;
 }
fmgetc();
}

rtarw()
{
fillup();
extend=0;
if(fmeof())
 {
 if(pic)
  {
  into:
  fminsc(' ');
  fmgetc();
  }
 return;
 }
else if(fmrc()==NL)
 {
 if(pic) goto into;
 newy=1;
 }
fmgetc();
}

ultarw()
{
if(extend)
 {
 extend=0;
 return;
 }
fillup();
if(fmnote())
 {
 fmpoint(fmnote()-1);
 if(fmrc()==NL)
  {
  fmgetc();
  uuparw();
  eol();
  }
 }
}

ltarw()
{
if(extend)
 {
 extend=0;
 return;
 }
fillup();
if(fmnote())
 fmpoint(fmnote()-1);
if(fmrc()==NL) newy=1;
}

/* Move cursor up */

uparw()
{
TXTSIZ x;
x=getcol();
bol();
if(fmnote())
 {
 fmpoint(fmnote()-1);
 if(fmnrnl())
  fmgetc();
 }
gocol(x);
newy=1;
}

/* user's cursor up routine (uses scrolling regions) */

uuparw()
{
TXTSIZ sve=fmnote();
int y=(curwin->wind+1)*width;
int x;
if(scroll)
 {
 if(fmnrnl())
  {
  if(fmnote()+1==saddr)
   {
   if(fmnrnl()) fmgetc();
   saddr=fmnote();
   setregn(curwin->wind+1,curwin->wind+(curwin->height-1));
   cpos(curwin->wind+1,oxpos);
   attrib(0);
   eputs("\033M");
   for(x=(curwin->wind+curwin->height)*width-1;x>=y+width;x--)
    scrn[x]=scrn[x-width];
   for(x=y;x<y+width;x++) scrn[x]= ' ';
   }
  fmpoint(sve);
  }
 else
  fmpoint(sve);
 }
uparw();
}

/* Move cursor down */

dnarw()
{
TXTSIZ x;
newy=1;
x=getcol();
if(!fmfnl())
 bol();
else
 fmgetc();
gocol(x);
}

/* user's down arrow function */

udnarw()
{
TXTSIZ sve=fmnote();
int x;
if(!fmfnl())
 {
 if(pic)
  {
  fminsc(NL);
  fmpoint(sve);
  udnarw();
  return;
  }
 else
  {
  goto cant;
  }
 }
if(scroll)
 {
 if(ypos!=curwin->height+curwin->wind-1) goto cant;
 for(x=0;x!=curwin->height-2;x++) fmnrnl();
 fmfnl();
 fmgetc();
 saddr=fmnote();
 setregn(curwin->wind+1,curwin->wind+curwin->height-1);
 cpos((curwin->wind+curwin->height-1),oxpos);
 attrib(0);
 eputc(10);
 for(x=(curwin->wind+1)*width;x!=(curwin->wind+curwin->height-1)*width;x++)
  scrn[x]=scrn[x+width];
 for(x=(curwin->wind+curwin->height-1)*width;
     x!=(curwin->wind+curwin->height)*width;x++)
  scrn[x]= ' ';
 }
cant:
fmpoint(sve);
dnarw();
}

/* Magic Tabs (tm) */

TXTSIZ tabcol;	/* Original column of text preceeded by tab stops */

tabmark()
{
TXTSIZ cur=fmnote();
unsigned char c;
tabcol=0;
if(!tabmagic) return;
while(!fmeof())
 {
 c=fmgetc();
 if(c=='\t')
  {
  while(!fmeof())
   {
   c=fmgetc();
   if(c=='\n') break;
   if(c!='\t')
    {
    fmrgetc();
    tabcol=getrcol();
    break;
    }
   }
  fmpoint(cur); return;
  }
 if(c=='\n') break;
 }
fmpoint(cur); return;
}

tabfix()
{
TXTSIZ cur=fmnote(),newcol;
unsigned char c;
if(!tabcol) return;
while(!fmeof())
 {
 c=fmgetc();
 if(c=='\t')
  {
  while(!fmeof())
   {
   c=fmgetc();
   if(c=='\n') break;
   if(c!='\t')
    {
    fmrgetc();
    newcol=getrcol();
    while(newcol<tabcol)
     {
     fminsc('\t');
     newcol+=8;
     }
    fmrgetc();
    while(newcol>tabcol)
     {
     if(fmrgetc()=='\t')
      {
      fmdel(1);
      newcol-=8;
      }
     else break;
     }
    break;
    }
   }
  fmpoint(cur); return;
  }
 if(c=='\n') break;
 }
fmpoint(cur); return;
}

/* Delete character under cursor */

delch()
{
unsigned char c;
int x;
if(extend && pic) return;
if(extend)
 {
 extend=0;
 return;
 }
if(!fmeof())
 {
 if((c=fmrc())==NL && scroll)
  {
  if(ypos<curwin->wind+curwin->height-2)
   {
   for(x=(ypos+1)*width;x<width*(curwin->wind+curwin->height-1);x++)
    scrn[x]=scrn[x+width];
   for(x=(curwin->wind+curwin->height-1)*width;
   x<(curwin->wind+curwin->height)*width;x++) scrn[x]= ' ';
   setregn(ypos+1,(curwin->wind+curwin->height-1));
   cpos((curwin->wind+curwin->height-1),oxpos);
   attrib(0);
   eputc(10);
   }
  fmdel(1);
  }
 else if(c==TAB) fmdel(1);
 else
  {
  tabmark();
  fmdel(1);
  tabfix();
  }
 }
}

type(ch)
unsigned char ch;
{
int ox=oxpos;
int x,y;
TXTSIZ temp, temp1;
int eflag=0;
if(quote8th)
 {
 quote8th=0;
 ch|=128;
 }
ypos=oypos;
if(extend)
 {
 if(ch!=NL) fillup();
 else extend=0;
 eflag=1;
 }
if(ch==NL)
 {
 if(overwrite && !tabmagic && !fmeof()) fmdel(1);
 fminsc(ch);
 fmgetc();
 newy=1;
 if(ypos!=(curwin->wind+curwin->height-1))
  {
  if(!fmeof())
   {
   if(ypos<curwin->wind+curwin->height-2 && scroll)
    {
    setregn(ypos+1,(curwin->wind+curwin->height-1));
    cpos(ypos+1,oxpos);
    attrib(0);
    eputs("\033M");
    cpos(ypos+1,0);
    for(x=(curwin->wind+curwin->height)*width-1;x>=(ypos+2)*width;x--)
     scrn[x]=scrn[x-width];
    for(x=(ypos+1)*width;x<(ypos+2)*width;x++) scrn[x]=' ';
    }
   else cpos(ypos+1,0);
   }
  else
   cpos(ypos+1,0);
  }
 else if(scroll)
   {
   setregn(curwin->wind+1,(curwin->wind+curwin->height-1));
   cpos((curwin->height+curwin->wind-1),0);
   attrib(0);
   eputc(10);
   for(x=curwin->wind*width;x<(curwin->wind+curwin->height-1)*width;x++)
    scrn[x]=scrn[x+width];
   for(x=(curwin->wind+curwin->height-1)*width;
       x<(curwin->wind+curwin->height)*width;x++) scrn[x]= ' ';
   temp=fmnote();
   fmpoint(saddr);
   fmfnl();
   fmgetc();
   saddr=fmnote();
   fmpoint(temp);
   }
 if(ox<(width-2) && (fmeof()) && scroll) uuu=1;
 if(autoind)
  {
  temp=fmnote();
  uparw();
  for(x=0;1;x++)
   {
   ch=fmgetc();
   if(!(ch==' ' || ch==TAB)) break;
   temp1=fmnote();
   fmpoint(temp);
   fminsc(ch);
   uuu=0;
   added++;
   fmpoint(temp1);
   temp++;
   }
  fmpoint(fmnote()-(x+1));
  dnarw();
  y=overwrite, overwrite=0;
  for(;x;x--) rtarw();
  overwrite=y;
  }
 }
else
 {
 if(overwrite)
  {
  if(!tabmagic)
   {
   if(!fmeof())
    {
    unsigned char c=fmrc();
    fmdel(1);
    if(ch!=TAB && c!=TAB && c!=NL && ox<(width-2)) uuu=1;
    }
   else if(ch!=TAB && ox<(width-2)) uuu=1;
   }
  else
   if(fmrc()!=NL && !fmeof())
    if(ch==TAB && fmrc()!=TAB)
     {
     TXTSIZ foo=getrcol();
     do
      {
      if(fmeof()) break;
      if(fmrc()==NL) break;
      if(fmrc()==TAB)
       {
       fmdel(1);
       break;
       }
      else fmdel(1);
      ++foo;
      }
      while(foo&7);
     }
    else if(ch!=TAB && fmrc()==TAB)
     {
     TXTSIZ tt;
     tabmark();
     if(tt=tabcol)
      {
      fminsc(ch);
      tabmark();
      fmdel(1);
      if(tabcol!=tt) fmdel(1);
      }
     }
    else
     {
     fmdel(1);
     if(ch!=TAB && ox<(width-2)) uuu=1;
     }
   else if(ox<(width-2) && ch!=TAB) uuu=1;
  }
 if(wrap)
  {
  unsigned char xx;
  if(getrcol()<rmargin) goto skip;
  if(ch==' ')
   type(NL);
  else
   {
   temp=fmnote();
   while(1)
    {
    if(fmnote())
     {
     fmpoint(fmnote()-1);
     xx=fmrc();
     if(xx==NL) break;
     if(xx==' ' || x==TAB)
      {
      fmdel(1);
      added=0;
      type(NL);
      temp+=added;
      break;
      }
     }
    else break;
    }
   fmpoint(temp);
   fminsc(ch);
   rtarw();
   uuu=0;
   }
  }
 else
  {
skip:
  if(overwrite || ch==TAB) fminsc(ch);
  else
   {
   tabmark();
   fminsc(ch);
   tabfix();
   }
  if(ch!=TAB && ch!=NL)
   {
   int cc=showas(ch);
   if(fmnote()>=markb && fmnote()<marke) cc^=INVERSE;
   fmgetc();
   tputcc(cc);
   scrn[ypos*width+oxpos]=cc;
   oxpos++;
   if(fmeof()) { if(!eflag && ox<width-2) uuu=1; }
   else if(fmrc()==NL && !eflag && ox<width-2) uuu=1;
   }
  else fmgetc();
  }
 }
}

itype(ch)
unsigned char ch;
{
int x,y;
TXTSIZ temp,temp1;
if(extend)
 {
 if(ch!= NL) fillup();
 else extend=0;
 }
if(ch==NL)
 {
 fminsc(ch);
 fmgetc();
 newy=1;
 if(autoind)
  {
  temp=fmnote();
  uparw();
  for(x=0;1;x++)
   {
   ch=fmgetc();
   if(!(ch==' ' || ch==TAB)) break;
   temp1=fmnote();
   fmpoint(temp);
   fminsc(ch);
   added++;
   fmpoint(temp1);
   temp++;
   }
  fmpoint(fmnote()-(x+1));
  dnarw();
  y=overwrite, overwrite=0;
  for(;x;x--) rtarw();
  overwrite=y;
  }
 }
else
 {
 if(overwrite)
  if(!fmeof()) fmdel(1);
 if(wrap)
  {
  if(getrcol()<rmargin) goto skip;
  if(ch==' ')
   itype(NL);
  else
   {
   temp=fmnote();
   while(1)
    {
    if(fmnote())
     {
     fmpoint(fmnote()-1);
     x=fmrc();
     if(x==NL) break;
     if(x==' ' || x==TAB)
      {
      fmdel(1);
      added=0;
      itype(NL);
      temp+=added;
      break;
      }
     }
    else break;
    }
   fmpoint(temp);
   fminsc(ch);
   rtarw();
   }
  }
 else
  {
skip:
  fminsc(ch);
  rtarw();
  }
 }
}

/* Insert space */

inss()
{
int t=overwrite;
if(extend)
 {
 extend=0;
 return;
 }
overwrite=0;
type(' ');
ltarw();
overwrite=t;
}

/* Deleting backspace */

backs()
{
int flag=0,c;
if(extend)
 {
 extend=0;
 return;
 }
if(fmeof()) c=1;
else if(fmrc()==NL) c=1;
if(fmnote())
 {
 ultarw();
 if(fmrc()==TAB) flag=1;
 if(overwrite && !tabmagic)
  {
  itype(' ');
  ultarw();
  }
 else if(overwrite && tabmagic)
  {
  if(c) delch();
  else if(!flag)
   {
   itype(' ');
   ltarw();
   }
  }
 else delch();
 if(oxpos && !flag)
  {
  eputc(8), tputcc(32), eputc(8), oxpos--,scrn[oypos*width+oxpos]=32;
  if(fmeof()) uuu=1;
  else if(fmrc()==NL || overwrite) uuu=1;
  }
 }
}

/* quit: exit without saving */

eexit()
{
int c;
if(curwin->next==curwin)
 {
 if(changed)
  {
  c=askyn("Do you really want to throw away this file?"); 
  if(c=='N') return;
  if(c== -1) return;
  dclose("File not saved.");
  }
 else
  {
  dclose("File not changed so no update needed");
  }
 leave=1;
 }
else
 {
 struct window *t=curwin;
 if(changed && curbuf->count==1)
  {
  c=askyn("Do you really want to throw away this file?");
  if(c=='N') return;
  if(c== -1) return;
  }
 if(curbuf->count==1)
  {
  struct undorec *u;
  for(u=undorecs;u;u=u->next) if(u->buf==curbuf) u->buf=0;
  free(curbuf->buf), free(curbuf);
  if(curbuf==markbuf) markbuf=0;
  }                           
 else curbuf->count--;
 curwin->next->prev=curwin->prev;
 curwin->prev->next=curwin->next;
 curwin=curwin->prev;
 free(t);
 ldwin(curwin);
 if(topwin==t) topwin=curwin;
 wfit();
 }
}

pgup()
{
int nlins=curwin->height-1;
int hlins=nlins/2;
int x,y;
TXTSIZ curpos,z;
if(!hlins) hlins=1;
z=getcol();
curpos=fmnote();
fmpoint(saddr);
for(x=0;x<hlins;x++)
 {
 if(!fmnrnl())
  {
  if(!x)
   {
   gocol(z);
   newy=1;
   return;
   }
  else
   break;
  }
 }
if(fmnrnl()) fmgetc();
saddr=fmnote();
fmpoint(curpos);
setregn(curwin->wind+1,(curwin->wind+curwin->height-1));
cpos(curwin->wind+1,oxpos);
attrib(0);
for(y=0;y<x;y++)
 {
 if(scroll) eputs("\033M");
 fmnrnl();
 }
if(fmnrnl()) fmgetc();
cpos(oypos,oxpos);
gocol(z);
x*=width;
if(scroll) for(y=(curwin->wind+1)*width;y<x+(curwin->wind+1)*width;y++)
 {
 scrn[y+x]=scrn[y];
 scrn[y]= ' ';
 }
}

pgdn()
{
int nlins=curwin->height-1;
int hlins=nlins/2;
TXTSIZ curpos,z;
int x,y;
z=getcol();
curpos=fmnote();
x=nlins;
fmpoint(saddr);
do
 {
 if(fmfnl()) fmgetc();
 else
  {
  newy=1;
  gocol(z);
  return;
  }
 }
 while(--x);
for(x=1;x<hlins;x++)
 {
 if(fmfnl()) fmgetc();
 else break;
 }

fmpoint(saddr);
for(y=0;y<x;y++)
 {
 fmfnl();
 fmgetc();
 }
saddr=fmnote();

setregn(curwin->wind+1,(curwin->wind+curwin->height-1));
cpos((curwin->wind+curwin->height-1),oxpos);
fmpoint(curpos);
attrib(0);
for(y=0;y<x;y++)
 {
 fmfnl();
 fmgetc();
 if(scroll) eputc(10);
 }

gocol(z);
cpos(ypos,xpos);
if(scroll)
 {
 y=width*x;
 for(curpos=(curwin->wind+1)*width+y;curpos<(curwin->wind+curwin->height)*
     width;curpos++)
  scrn[curpos-y]=scrn[curpos];
 for(curpos=(curwin->wind+curwin->height)*width-width*x;
     curpos<(curwin->wind+curwin->height)*width;curpos++)
  scrn[curpos]= ' ';
 }
}

deleol()
{
TXTSIZ temp=fmnote();
TXTSIZ temp1;
if(extend && pic) return;
extend=0;
fmfnl();
temp1=fmnote()-temp;
fmpoint(temp);
if(temp1) fmdel(temp1);
}

killlin()
{
extend=0;
if(!fmeof())
 {
 if(fmrc()==NL) delch();
 else deleol();
 }
}

dellin()
{
bol();
deleol();
delch();
}

fixpath(s)
unsigned char *s;
{
unsigned char tmp[PATHSIZE], *p, c;
struct passwd *passwd;
if(*s=='~')
 {
 p=s+1;
 while(*p!='/' && *p) ++p;
 if(c= *p)
  {
  *p=0;
  if(passwd=getpwnam(s+1))
   {
   *p=c;
   strcpy(tmp,passwd->pw_dir);
   strcat(tmp,p);
   strcpy(s,tmp);
   }
  }
 }
}

exsave()
{
unsigned char sting[PATHSIZE];
if(!changed)
 {
 eexit();
 return;
 }
if(gfnam[0]==0)
 {
 if(!getl("Save file",gfnam))
  return;
 fixpath(gfnam);
 }
else if(!backup)
 {
 sprintf(sting,"/bin/cp %s %s~",gfnam,gfnam);
 cpos(height-2,0);
 system(sting);
 cpos(ypos,xpos);
 }
if(saveit1(gfnam))
 {
 sprintf(sting,"File %s saved.",gfnam);
 if(curwin->next==curwin)
  {
  dclose(sting);
  leave=1;
  }
 else
  eexit();
 }
}

saveit()
{
unsigned char gfnam1[PATHSIZE];
unsigned char sting[PATHSIZE];
strcpy(gfnam1,gfnam);
if(!getl("Save file",gfnam1))
 return;
fixpath(gfnam1);
if(!backup && !strcmp(gfnam1,gfnam))
 {
 sprintf(sting,"/bin/cp %s %s~",gfnam,gfnam);
 cpos(height-2,0);
 system(sting);
 cpos(ypos,xpos);
 }
saveit1(gfnam1);
}

findline()
{
unsigned char sting[PATHSIZE];
TXTSIZ x;
sting[0]=0;
if(!getl("Goto line",sting))
 return;
x=atol(sting);
if(!x)
 {
 msg("\\iBad line number\\i");
 return;
 }
x--;
bof();
for(;x;x--)
 {
 if(!fmfnl()) break;
 fmgetc();
 }
newy=1;
cntr=1;
return;
}

int search()
{
if(options&s_backwards)
 {
 while(fmnote())
  {
  fmrgetc();
  if(options&s_ignore) { if(!fmicmp(sstring,len)) return 1; }
  else if(!fmcmp(sstring,len)) return 1;
  }
 return 0;
 }
else
 {
 while(fmnote()+len<=fmsize())
  {
  if(!(options&s_ignore)) { if(!fmcmp(sstring,len)) return 1; }
  else if(!fmicmp(sstring,len)) return 1;
  fmgetc();
  }
 return 0;
 }
}

find(c)
{
int x;
int opts=0;
int n=0;
int rest=0;
int rlen;
TXTSIZ p;
unsigned char ss[80];
extend=0;
if(c=='L'-'@' && sstring[0]) goto srch;
ss[0]=0;
if(!(x=getl("Search string",ss))) return;
if(x== -1)
 {
 if(ss[0])
  strcpy(sstring,ss);
 goto srch;
 }
if(!ss[0]) return;
strcpy(sstring,ss);
ss[0]=0;
if(!getl("(I)gnore case (B)ackwards (R)eplace n",ss)) return;
for(x=0;ss[x];x++)
 {
 if(ss[x]=='i' || ss[x]=='I') opts|=s_ignore;
 if(ss[x]=='b' || ss[x]=='B') opts|=s_backwards;
 if(ss[x]=='r' || ss[x]=='R') opts|=s_replace;
 if(ss[x]=='x' || ss[x]=='X') opts|=s_regex;
 if(ss[x]>='0' && ss[x]<='9') n*=10, n+=ss[x]-'0';
 }
options=opts;
if(options&s_replace)
 {
 ss[0]=0;
 if(!(x=getl("Replace with",ss))) return;
 if(x!= -1)
  strcpy(rstring,ss);
 }
srch:
if(!sstring[0]) return;
len=strlen(sstring);
rlen=strlen(rstring);
rpt:
p=fmnote();
if(search())
 {
 if(!(options&s_backwards)) fmpoint(fmnote()+len);
 if(options&s_replace)
  {
  if(rest) goto dn;
  newy=1;
  upd=1;
  cntr=1;
  extend=0;
  dupdate();
again:
  x=nquery(
  "Replace? (Yes, No, ^C to abort or R to replace rest without asking)");
  if(x=='n' || x=='N') goto rpt;
  if(x== 3) return;
  if(x=='y' || x=='Y') goto dn;
  if(x=='r' || x=='R')
   {
   rest=1;
   goto dn;
   }
  goto again;
dn:
  if(options&s_backwards)
   {
   fmdel(len);
   fminss(rstring,rlen);
   }
  else
   {
   fmpoint(fmnote()-len);
   fmdel(len);
   fminss(rstring,rlen);
   fmpoint(fmnote()+rlen);
   }
  if(n)
   if(n==1) goto exi;
   else n--;
  goto rpt;
  }
 else if(n)
  {
  if(n==1) goto exi;
  n--;
  goto rpt;
  }
 }
else
 {
 if(!(options&s_replace) || n>1)
  msg("Not found");
 fmpoint(p);
 return;
 }
exi:
cntr=1;
newy=1;
}

findnext()
{
find('L'-'@');
}

findfirst()
{
find(0);
}

struct buffer *markbuf;

setbeg()
{
markb=fmnote();
if(markbuf!=curbuf)
 {
 markbuf=curbuf;
 marke=0;
 }
}

setend()
{
marke=fmnote();
if(markbuf!=curbuf)
 {
 markbuf=curbuf;
 markb=0;
 }
}

writeblk()
{
unsigned char gfnam1[PATHSIZE];
unsigned char sting[PATHSIZE];
TXTSIZ sv=fmnote();
struct buffer *bt=curbuf;
if(markbuf)
 {
 stbuf(curbuf);
 ldbuf(markbuf);
 }
if(markb>=marke || marke>fmsize() || !markbuf)
 {
 msg("\\iNo block\\i");
 if(markbuf)
  ldbuf(bt);
 return;
 }
gfnam1[0]=0;
if(!getl("File to write block to",gfnam1))
 {
 ldbuf(bt);
 return;
 }
fixpath(gfnam1);
handle=fopen(gfnam1,"w+");
if(handle)
 {
 fmpoint(markb);
 if(!fmsave(handle,marke-markb))
  {
  sprintf(sting,"\\iError writting to file %s\\i",gfnam1);
  msg(sting);
  }
 stbuf(markbuf);
 ldbuf(bt);
 fmpoint(sv);
 fclose(handle);
 }
else
 {
 ldbuf(bt);
 sprintf(sting,"\\iError opening file %s\\i",gfnam1);
 msg(sting);
 }
}

delblk()
{
struct buffer *bt=curbuf;
TXTSIZ x=fmnote();
TXTSIZ sz;
if(markbuf)
 {
 stbuf(curbuf);
 ldbuf(markbuf);
 }
if(marke<=markb || marke>fmsize() || !markbuf)
 {
 msg("\\iNo block\\i");
 if(markbuf)
  ldbuf(bt);
 return;
 }
if(bt==markbuf) if(x>=markb && x<marke) x=markb;
sz=marke-markb;
fmpoint(markb);
fmdel(sz);
if(bt==markbuf) if(x>markb) x-=sz;
stbuf(markbuf);
ldbuf(bt);
fmpoint(x);
updall=1;
newy=1;
}

moveblk()
{
unsigned char *t;
TXTSIZ sz, x=fmnote();
struct buffer *bt=curbuf;
if(markbuf)
 {
 stbuf(curbuf);
 ldbuf(markbuf);
 }
if(marke<=markb || marke>fmsize() || !markbuf)
 {
 msg("\\iNo block\\i");
 if(markbuf)
  ldbuf(bt);
 return;
 }
if(x>=markb && x<=marke && bt==markbuf)
 {
 x=markb;
 ldbuf(bt);
 return;
 }
sz=marke-markb;
t=(unsigned char *)malloc(sz);
fmpoint(markb);
fmcpy(t,sz);
fmdel(sz);
if(bt==markbuf) if(x>markb) x-=sz, newy=1;
stbuf(markbuf); 
ldbuf(bt);
fmpoint(x);
fminss(t,sz);
free(t);
markb=x;
marke=x+sz;
markbuf=bt;
updall=1;
}

cpyblk()
{
unsigned char *t;
TXTSIZ x=fmnote();
struct buffer *bt=curbuf;
TXTSIZ sz;
if(markbuf)
 {
 stbuf(curbuf);
 ldbuf(markbuf);
 }
if(marke<=markb || marke>fmsize() || !markbuf)
 {
 msg("\\iNo block\\i");
 if(markbuf)
  ldbuf(bt);
 return;
 }
sz=marke-markb;
t=(unsigned char *)malloc(sz);
fmpoint(markb);
fmcpy(t,sz);
stbuf(markbuf);
ldbuf(bt); 
fmpoint(x);
fminss(t,sz);
free(t);
marke=x+sz;
markb=x;
markbuf=bt;
updall=1;
}

insfil()
{
unsigned char gfnam1[PATHSIZE];
unsigned char sting[PATHSIZE];
gfnam1[0]=0;
if(!getl("File to insert",gfnam1)) return;
fixpath(gfnam1);
handle=fopen(gfnam1,"r");
if(handle)
 {
 if(!fminsfil(handle))
  {
  sprintf(sting,"\\iError inserting file %s\\i",gfnam1);
  msg(sting);
  }
 newy=1;
 fclose(handle);
 }
else
 {
 sprintf(sting,"\\iError opening file %s\\i",gfnam1);
 msg(sting);
 return;
 }
}

push()
{
unsigned char *ssh=(unsigned char *)getenv("SHELL");
if(!ssh)
 {
 msg("Couldn't find shell");
 return;
 }
dclose("You are at the command shell.  Type 'exit' to continue editing");
shell(ssh);
rewrite();
}

mode()
{
unsigned char s[PATHSIZE];
s[0]=0;
strcat(s,"(R)ght Mrgn ");
if(overwrite) strcat(s,"(I) Overtype ");
else strcat(s,"(I)nsert ");
if(tabmagic) strcat(s,"(T)ab Magic on ");
else strcat(s,"(T)ab Magic off ");
if(wrap) strcat(s,"(W)rap on ");
else strcat(s,"(W)rap off ");
if(autoind) strcat(s,"(A) Indent on ");
else strcat(s,"(A) Indent off ");
if(pic) strcat(s,"(P)ic on: ");
else strcat(s,"(P)ic off: ");
switch(query(s))
 {
 case 'i':
 case 'I':
 case 'o':
 case 'O':
  overwrite= !overwrite;
  break;
 case 'W':
 case 'w':
  wrap= !wrap;
  break;
 case 'a':
 case 'A':
  autoind= !autoind;
  break;
 case 't':
 case 'T':
  tabmagic= !tabmagic;
  break;
 case 'p':
 case 'P':
  pic= !pic;
  break;
 case 'r':
 case 'R':
  {
  char sting[80];
  sprintf(sting,"%d",rmargin);
  if(!getl("Right margin",sting)) return;
  rmargin=atol(sting);
  if(rmargin<2) rmargin=2;
  }
 }
}

/* Center the current line */

ctrlin()
{
TXTSIZ x;
int tmp=pic;
int y;
unfill();
bol();
while(y=fmrc(), y==' ' || y=='\t') fmdel(1);
eol();
x=fmnote();
bol();
if(x-fmnote()>rmargin) return;
y=(rmargin/2)-(x-fmnote())/2;
while(y--) fminsc(' ');
pic=1;
udnarw();
pic=tmp;
}

/* Reformat a paragraph */

reformat()
{
TXTSIZ tmp,idt,idt1,b,e;
unsigned char ch;

/* First, determine indentation on current or first non-blank line */

up:
idt=calcs();
if(fmeof()) return;     /* Not if at end of file */
if(fmrc()==NL)  /* Ignore any blank lines */
 {
 dnarw();
 goto up;
 }
bol();

/* Now find beginning of paragraph */
/* It will be indicated by a change of indentation or a blank line or bof */

while(fmnote())         /* Beginning is at bof */
 {
 uparw();
 idt1=calcs();
 if(fmrc()==NL) /* Beginning is blank line */
  {
  bol();
  dnarw();
  break;
  }
 bol();
 if(idt1>idt) break;
 if(idt1<idt)
  {
  dnarw();
  break;
  }
 }

/* Point is now at beginning of paragraph (hopefully) */
/* Set the mark */

b=fmnote();

idt=calcs(); bol();	/* Save indentation level of first line of paragraph */

/* Now move to after end of paragraph */
while(1)
 {
 tmp=fmnote();
 dnarw();
 if(fmnote()==tmp)      /* Paragraph ends on end of file */
  {
  eol();
  fminsc(NL);		/* Stick in a NL */
  fmgetc();
  extend=0;		/* I don't think I have to do this but... */
  break;
  }
 idt1=calcs();
 if(fmrc()==NL)		/* Paragraph ends on blank line */
  {
  bol();
  break;
  }
 bol();
 if(idt1>idt) break;    /* Paragraph ends when indentation increases */
 }

/* Point now after end of paragraph, cut paragraph */
e=fmnote();

/* Now reinsert paragraph in a nice way */

if(e>b)
 {
 unsigned oldwrap=wrap;
 unsigned oldoverwrite=overwrite;
 unsigned oldauto=autoind;
 unsigned flag=0;
 unsigned char ccc=0;
 TXTSIZ ppp=b; 
 overwrite=0;
 wrap=1;
 while(ppp!=e)
  {
  tmp=fmnote();
  fmpoint(ppp);
  ppp++;
  ch=fmrc();
  fmpoint(tmp);
  if(ch==NL) ch=' ';
  if(ch==' ' || ch==TAB)
   {
   if(flag==0) itype(ch);
   else if(flag==1)
     {
     itype(' ');
     if(!(ccc=='.' || ccc==':' || ccc=='?' || ccc=='!' || ccc=='\"' ||
          ccc==';')) flag=2;
     }
   }
  else
   {
   flag=1;
   itype(ch);
   }
  ccc=ch;
  }
 autoind=0;
 if(flag) itype(NL);
 wrap=oldwrap;
 overwrite=oldoverwrite;
 autoind=oldauto;
 tmp=fmnote();
 fmpoint(b);
 fmdel(e-b);
 fmpoint(tmp-(e-b));
 newy=1;
 }
}

killword()
{
unsigned char ch;
ch=fmrc();
if(((ch>='a' && ch<='z') || (ch>='A' && ch <='Z')) && !fmeof())
 do
  {
  delch();
  ch=fmrc();
  } while (((ch>='a' && ch<='z') || (ch>='A' && ch <='Z')) && !fmeof());
else
 if((ch==' ' || ch==TAB || ch==NL) && !fmeof())
  do
   {
   delch();
   ch=fmrc();
   } while (!fmeof() && (ch==' ' || ch==NL || ch==TAB));
else
 if(ch>='0' && ch<='9' && !fmeof())
  do
   {
   delch();
   ch=fmrc();
   } while (!fmeof() && ch>='0' && ch<='9');
else delch();
}

backword()
{
unsigned char ch;
if(fmnote())
 {
 fmpoint(fmnote()-1);
 ch=fmgetc();
 if((ch>='a' && ch<='z') || (ch>='A' && ch <='Z'))
  {
up:
  backs();
  if(fmnote())
   {
   fmpoint(fmnote()-1);
   ch=fmrc();
   fmgetc();
   if((ch>='a' && ch<='z') || (ch>='A' && ch <='Z')) goto up;
   }
  }
 else if(ch==' ' || ch==TAB || ch==NL)
   {
up1:
   backs();
   if(fmnote())
    {
    fmpoint(fmnote()-1);
    ch=fmrc();
    fmgetc();
    if(ch==' ' || ch==TAB || ch==NL) goto up1;
    }
   }
 else if(ch>='0' && ch<='9')
   {
up2:
   backs();
   if(fmnote())
    {
    fmpoint(fmnote()-1);
    ch=fmrc();
    fmgetc();
    if(ch>='0' && ch<='9') goto up2;
    }
   }
 else backs();
 }
}

word()
{
int c;
if(fmnote()==fmsize()) return 0;
c=fmrc();
if(c>='a' && c<='z') return 1;
if(c>='A' && c<='Z') return 1;
if(c>='0' && c<='9') return 1;
return 0;
}

wrdl()
{
extend=0;
newy=1;
if(!fmnote()) return;
fmrgetc();
while(!word())
 {
 if(!fmnote()) return;
 fmrgetc();
 }
while(word())
 {
 if(!fmnote()) return;
 fmrgetc();
 }
fmgetc();
}

wrdr()
{
extend=0;
newy=1;
while(!word())
 {
 if(fmnote()==fmsize()) return;
 fmgetc();
 }
while(word())
 {
 if(fmnote()==fmsize()) return;
 fmgetc();
 }
}

unsigned char lft[]="{[(<`";
unsigned char rht[]="}])>'";

gotomatching()
{
TXTSIZ cur=fmnote(),cnt;
unsigned char c;
int x;
extend=0;
if(fmeof()) return;
c=fmrc();
for(x=0;x!=strlen(lft);++x)
 if(lft[x]==c)
  {
  cnt=0;
  while(!fmeof())
   {
   c=fmgetc();
   if(lft[x]==c) ++cnt;
   if(rht[x]==c)
    if(!--cnt)
     {
     newy=1;
     fmrgetc();
     return;
     }
   }
  fmpoint(cur);
  return;
  }
 else if(rht[x]==c)
  {
  cnt=1;
  while(fmnote())
   {
   c=fmrgetc();
   if(rht[x]==c) ++cnt;
   if(lft[x]==c)
    if(!--cnt)
     {
     newy=1;
     return;
     }
   }
  fmpoint(cur);
  return;
  }
}

int setindent()
{
TXTSIZ idt,idt1,cur=fmnote(),tmp;
if(curbuf==markbuf && cur>=markb && cur<marke) return 1;
markbuf=curbuf; markb=0; marke=0;
/* Find beginning */
idt=calcs();
if(fmeof()) goto done;
if(fmrc()==NL) goto done;
while(fmnrnl())
 {
 idt1=calcs();
/* if(fmrc()!=NL) if(idt1<idt) Use this line instead of one below for
   setindent to ignore blank lines */
 if(fmrc()==NL || idt1<idt)
  {
  if(fmfnl()) fmgetc();
  break;
  }
 }
/* Point is now at beginning of block (hopefully) */
/* Set the mark */
markb=fmnote();

while(fmfnl())
 {
 fmgetc();
 idt1=calcs();
/* if(fmrc()!=NL) if(idt1<idt) Use this line instead of one below for
   setindent to ignore blank lines */
 if(fmrc()==NL || idt1<idt)
  {
  bol();
  break;
  }
 }
marke=fmnote();
done: fmpoint(cur);
return 0;
} 
 
indentr()
{
TXTSIZ cur=fmnote(),tmp;
if(!setindent()) return;
fmpoint(markb);
while(fmnote()<marke)
 {
 calcs();
 if(fmeof()) break;
 if(fmrc()!=NL)
  {
  if(fmnote()<=cur) ++cur;
  fminsc(' ');
  }
 if(fmfnl()) fmgetc();
 else break;
 }
done: fmpoint(cur);
return;
}

indentl()
{
TXTSIZ cur=fmnote(),idt,tmp;
if(!setindent()) return;
fmpoint(markb);
while(fmnote()<marke)
 {
 idt=calcs();
 if(fmeof()) break;
 if(fmrc()!=NL) if(!idt) goto done;
 if(fmfnl()) fmgetc();
 else break;
 }
fmpoint(markb);
while(fmnote()<marke)
 {
 calcs();
 if(fmeof()) break;
 if(fmrc()!=NL)
  {
  if(fmnote()<=cur) --cur;
  fmrgetc();
  fmdel(1);
  }
 if(fmfnl()) fmgetc();
 else break;
 }
done: fmpoint(cur);
return;
}

struct window *curwin;
struct buffer *curbuf;
struct window *topwin;

ldbuf(zuffer)
struct buffer *zuffer;
{
if(zuffer==curbuf) return;
curbuf=zuffer;
backup=zuffer->backup;
strcpy(gfnam,zuffer->gfnam);
bufsiz=zuffer->bufsiz;
buffer=zuffer->buf;
filend=zuffer->filend;
hole=zuffer->hole;
ehole=zuffer->ehole;
changed=zuffer->changed;
}

ldbuf1(zuffer)
struct buffer *zuffer;
{
curbuf=zuffer;
backup=zuffer->backup;
strcpy(gfnam,zuffer->gfnam);
bufsiz=zuffer->bufsiz;
buffer=zuffer->buf;
filend=zuffer->filend;
hole=zuffer->hole;
ehole=zuffer->ehole;
changed=zuffer->changed;
}

stbuf(zuffer)
struct buffer *zuffer;
{
zuffer->backup=backup;
strcpy(zuffer->gfnam,gfnam);
zuffer->bufsiz=bufsiz;
zuffer->buf=buffer;
zuffer->filend=filend;
zuffer->hole=hole;
zuffer->ehole=ehole;
zuffer->changed=changed;
}

ldwin(window)
struct window *window;
{
saddr=window->saddr;
xoffset=window->xoffset;
pic=window->pic;
autoind=window->autoind;
overwrite=window->overwrite;
wrap=window->wrap;
tabmagic=window->tabmagic;
rmargin=window->rmargin;
extend=window->extend;
ldbuf1(window->buffer);
fmpoint(window->cursor);
}
                                   
stwin(window)
struct window *window;
{ 
window->saddr=saddr;
window->xoffset=xoffset;
window->pic=pic;
window->autoind=autoind;
window->overwrite=overwrite;
window->wrap=wrap;
window->tabmagic=tabmagic;
window->rmargin=rmargin;
window->extend=extend;
window->cursor=fmnote();
stbuf(window->buffer);
}

wfit()
{
struct window *x;
int total;
updall=1;
newy=1;
up:
total=height-wind;
for(x=topwin;1;x=x->next)
 {
 if(x->height<3) x->height=3;
 if(curwin==x && total>=3) break;
 if(total<3) goto in;
 total-=x->height;
 if(total<0)
  {
  in:
  topwin=topwin->next;
  goto up;
  }
 }
for(x=topwin,total=wind;1;x=x->next)
 {
 x->wind=total;
 if(x->height<3) x->height=3;
 total+=x->height;
 if(total>=height || x->next==topwin)
  {
  total-=x->height;
  x->height=height-total;
  return;
  }
 }
}

wnext()
{
stwin(curwin);
curwin=curwin->next;
ldwin(curwin);
wfit();
}

wprev()
{
stwin(curwin);
curwin=curwin->prev;
ldwin(curwin);
wfit();
}

wexplode()
{
struct window *x;
int y;
if(curwin->height!=height-wind)
 { /* Make curwin only */
 topwin=curwin;
 x=topwin;
 do
  {
  x->height=height-wind;
  x->wind=wind;
  x=x->next;
  }
  while(x!=topwin);
 newy=1;
 }
else
 { /* Show all windows */
 x=topwin; y=0;
 do y++, x=x->next; while(x!=topwin);
 if((height-wind)/y<3) y=3;
 else y=(height-wind)/y;
 x=topwin;
 do x->height=y, x=x->next; while(x!=topwin);
 wfit();
 }
}

wgrow()
{
if(curwin->wind+curwin->height==height)
 {
 if(curwin->wind!=wind) if(curwin->prev->height>3)
  curwin->prev->height--, curwin->height++, curwin->wind--, updall=1;
 }
else
 {
 if(curwin->next->height>3)
  curwin->height++, curwin->next->wind++, curwin->next->height--, updall=1;
 }
newy=1;
}

wshrink()
{
if(curwin->wind+curwin->height==height)
 {
 if(curwin->wind!=wind) if(curwin->height>3)
 curwin->height--, curwin->prev->height++, curwin->wind++, updall=1;
 }
else
 {
 if(curwin->height>3)
 curwin->height--, curwin->next->wind--, curwin->next->height++, updall=1;
 }
newy=1;
}

wsplit()
{
struct window *new;
if(curwin->height<6) return;
new=(struct window *)malloc(sizeof(struct window));
new->buffer=curbuf;
stwin(new);
new->next=curwin->next;
new->prev=curwin;
curwin->next->prev=new;
curwin->next=new;
if(curwin->height&1)
 {
 curwin->height/=2;
 new->height=curwin->height+1;
 }
else
 {
 curwin->height/=2;
 new->height=curwin->height;
 }
if(curwin->hheight&1)
 {
 curwin->hheight/=2;
 new->hheight=curwin->hheight+1;
 }
else
 {
 curwin->hheight/=2;
 new->hheight=curwin->hheight;
 }
new->wind=curwin->wind+curwin->height;
curwin=new;
curbuf->count++;
updall=1;
newy=1;
}

wedit()
{
unsigned char gfnam1[PATHSIZE];
unsigned char sting[PATHSIZE];
int c;
struct window *x;
stwin(curwin);
if(curbuf->count==1 && curbuf->changed)
 {
 c=askyn("Do you really want to throw away this file?"); 
 if(c=='N') return;
 if(c== -1) return;
 }
gfnam1[0]=0;
if(!getl("File to edit",gfnam1)) return;
fixpath(gfnam1);
x=topwin;
do
 {
 if(!strcmp(gfnam1,x->buffer->gfnam))
  {
  if(curbuf->count==1)
   {
   free(curbuf->buf), free(curbuf);
   if(curbuf==markbuf) markbuf=0;
   }                           
  else 
   curbuf->count--;
  curwin->buffer=x->buffer;
  curwin->buffer->count++;
  ldbuf(x->buffer);
  bof();
  return;
  }
 x=x->next;
 }
 while(x!=topwin);
strcpy(gfnam,gfnam1);
stmode(gfnam);
if(curbuf->count==1) free(curbuf->buf),
                             free(curbuf);
else curbuf->count--;
curwin->buffer=(struct buffer *)malloc(sizeof(struct buffer));
curbuf=curwin->buffer;
curbuf->count=1;
fmopen();
bof();
handle=fopen(gfnam1,"r");
if(handle)
 {
 if(!fminsfil(handle))
  {
  sprintf(sting,"\\iError loading file %s\\i",gfnam1);
  msg(sting);
  }
 changed=0;
 newy=1;
 fclose(handle);
 }
else
 {
 newy=1;
 upd=1;
 if(errno==ENOENT)
  {
  dupdate();
  msgout(curwin->wind+1,"New File",0);
  cpos(curwin->wind+1,0);
  backup=1;
  }
 else
  {
  dupdate();
  msgout(curwin->wind+1,"\\iError opening file\\i",0);
  cpos(curwin->wind+1,0);
  }
 dokey(anext());
 return;
 }
}

rtn()
{
type(NL);
}

stquote()
{
quoteflg=1;
}

stquote8th()
{
quote8th=1;
}

CMD kkm[55]=
{
 {"uparw",0,uuparw},
 {"rtarw",0,urtarw},
 {"ltarw",0,ultarw},
 {"dnarw",0,udnarw},
 {"eol",0,eol},
 {"pgdn",0,pgdn},
 {"bol",0,bol},
 {"pgup",0,pgup},
 {"ctrlin",0,ctrlin},
 {"setbeg",0,setbeg},
 {"cpyblk",0,cpyblk},
 {"saveit",0,saveit},
 {"wedit",0,wedit},
 {"findfirst",0,findfirst},
 {"findnext",0,findnext},
 {"wgrow",0,wgrow},
 {"thelp",0,thelp},
 {"wexplode",0,wexplode},
 {"reformat",0,reformat},
 {"setend",0,setend},
 {"findline",0,findline},
 {"moveblk",0,moveblk},
 {"wnext",0,wnext},
 {"wprev",0,wprev},
 {"wsplit",0,wsplit},
 {"insfil",0,insfil},
 {"wshrink",0,wshrink},
 {"bof",0,bof},
 {"eof",0,eof},
 {"writeblk",0,writeblk},
 {"exsave",0,exsave},
 {"delblk",0,delblk},
 {"push",0,push},
 {"eexit",0,eexit},
 {"delch",0,delch},
 {"inss",0,inss},
 {"backs",0,backs},
 {"type",0,type},
 {"deleol",0,deleol},
 {"rtn",0,rtn},
 {"backword",0,backword},
 {"rewrite",0,rewrite},
 {"mode",0,mode},
 {"killword",0,killword},
 {"wrdr",0,wrdr},
 {"dellin",0,dellin},
 {"wrdl",0,wrdl},
 {"stquote8th",0,stquote8th},
 {"stquote",0,stquote},
 {"gotomatching",0,gotomatching},
 {"indentl",0,indentl},
 {"indentr",0,indentr},
 {"undo",0,undo},
 {"redo",0,redo},
 {"killlin",0,killlin}
 };

CONTEXT km={0, "main", 0, 55, kkm};

/** Key sequence processing functions **/

struct kmap *curmap;
int quoteflg=0;
int quote8th=0;

int dokey(k)
unsigned char k;
{
int above=curmap->len;
int below=0;
int new;
struct kmap *r;
if(quoteflg)
 {
 quoteflg=0;
 if(k>='@' && k<='_') k-='@';
 if(k>='a' && k<='z') k-='`';
 if(k=='?') k=127;
 type(k);
 goto abcd;
 }
goto in;
do
 {
 new=(above+below)/2;
 if((curmap->keys[new].k&KEYMASK)==k)
  if(curmap->keys[new].k&KEYSUB)
   {
   curmap=(KMAP *)(curmap->keys[new].n);
   return Kaccept;
   }
  else
   {
   int h=height, w=width;
   getsize();
   if(h!=height || w!=width) resize();
   r=curmap;
   curmap=km.kmap;
   if(km.cmd[r->keys[new].n].func!=redo &&
      km.cmd[r->keys[new].n].func!=undo) undoptr=0;
   km.cmd[r->keys[new].n].func(k);
   abcd:
   if(!leave)
    {
    if(!uuu) upd=1;
    else uuu=0;
    dupdate();
    }
   return 0;
   }
 else if((curmap->keys[new].k&KEYMASK)>k)
  {
  above=new;
  in:
  if(above==below) break;
  }
 else if(below==new) break;
 else below=new;
 } while(1);
curmap=km.kmap;
return Kbad;
}

edit()
{
newy=1;
dupdate();
imsg();
dokey(anext());
if(leave) return;
upd=1;
newy=1;
do
 dokey(anext());
 while(!leave);
}

struct mpair
 {
 struct mpair *next;
 unsigned char *s;
 int wrap;
 int autoind;
 int pic;
 int overwrite;
 int tabmagic;
 TXTSIZ rmargin;
 };

struct mpair *mpairs=0;

stmode(name)
unsigned char *name;
{
int x=strlen(name);
struct mpair *mp=mpairs;
while(mp)
 if(!strcmp(mp->s,name+x-strlen(mp->s)))
  {
  autoind=mp->autoind;
  wrap=mp->wrap;
  overwrite=mp->overwrite;
  pic=mp->pic;
  tabmagic=mp->tabmagic;
  break;
  }
 else mp=mp->next;
}

int process(name,cmds)
unsigned char *name;
CONTEXT *cmds;
{
CONTEXT *context=0;
unsigned char buf[PATHSIZE];
KMAP *kmap;
FILE *fd=fopen(name,"r");
int x,y,n,z;
if(!fd) return -1;
printf("Processing keymap file %s ...",name);
fflush(stdout);
while(fgets(buf,256,fd))
 {
 if(buf[0]=='{')
  {
  up:
  if(!fgets(buf,256,fd)) break;
  if(buf[0]=='}') continue;
  if(helpsize+strlen(buf)>helpblksize)
   {
   if(help) help=(unsigned char *)realloc(help,helpblksize+strlen(buf)+320);
   else help=(unsigned char *)malloc(strlen(buf)+320);
   helpblksize+=strlen(buf)+320;
   }
  strcat(help,buf);
  helpsize=strlen(help);
  ++helplines;
  goto up;
  }
 if(buf[0]=='*')
  {
  struct mpair *mp=(struct mpair *)calloc(sizeof(struct mpair),1);
  int c=0;
  mp->next=mpairs;
  mpairs=mp;
  for(x=0;buf[x];x++)
   if(buf[x]==' ' || buf[x]=='\t' || buf[x]=='\n')
    {
    c=buf[x];
    buf[x]=0;
    break;
    }
  mp->s=strdupp(buf+1);
  buf[x]=c;
  while(buf[x])
   if(buf[x]!=' ' && buf[x]!='\t' && buf[x]!='\n') break;
   else x++;
  while(buf[x] && buf[x]!=' ' && buf[x]!='\t' && buf[x]!='\n')
   {
   switch(buf[x])
    {
   case 'O':
   case 'o': mp->overwrite=1;
   break;
   case 'W':
   case 'w': mp->wrap=1;
   break;
   case 'a':
   case 'A': mp->autoind=1;
   break;
   case 'p':
   case 'P': mp->pic=1;
   break;
   case 't':
   case 'T': mp->tabmagic=1;
    }
   x++;
   }
  continue;
  }
 if(buf[0]==':' && buf[1]!=' ' && buf[1]!='\t')
  {
  for(x=0;buf[x];x++)
   if(buf[x]==' ' || buf[x]=='\t' || buf[x]=='\n')
    {
    buf[x]=0;
    break;
    }
  context=cmds;
  while(strcmp(buf+1,context->name))
   {
   context=context->next;
   if(!context)
    {
    printf("Unknown context name in keyboard file\n");
    return -1;
    }
   }
  continue;
  }
 for(x=0;buf[x];x++) if(buf[x]==' ' || buf[x]=='\t' || buf[x]=='\n') break;
 if(buf[0]==' ' || buf[0]=='\t' || buf[0]=='\n' || !buf[x]) continue;
 if(!context)
  {
  printf("No context selected for key\n");
  return -1;
  }
 buf[x]=0;
 for(y=0;y!=context->size;y++)
   if(!strcmp(context->cmd[y].name,buf)) goto foundit;
 printf("Key function not found %s\n",buf);
 continue;
 foundit:
 kmap=0;
 n= -1;
 for(++x;buf[x];x++) if(buf[x]!=' ' && buf[x]!='\t') break;
 while(1)
  {
  int c;
  if(buf[x]==' ') x++;
  if(!buf[x]) break;
  if(buf[x]=='\n' || buf[x]==' ' || buf[x]=='\t') break;
  /* Got Next key */
  x++;
  if(buf[x-1]=='^')
   if(buf[x]==' ' || buf[x]=='\t' || buf[x]=='\n' || !buf[x]) c='^';
   else if(buf[x]=='?') c=127, x++;
   else c=(buf[x]&0x1f), x++;
  else if((buf[x-1]&0x5f)=='S' && (buf[x]&0x5f)=='P') c=' ', x++;
  else c=buf[x-1];
  /* Add it as if it were a submap */
  if(!kmap)
   {
   if(!(kmap=context->kmap))
    {
    kmap=(KMAP *)malloc(sizeof(KMAP));
    kmap->keys=(KEY *)malloc(4*sizeof(KEY));
    kmap->size=4;
    kmap->len=0;
    context->kmap=kmap;
    }
   }
  else
   if(kmap->keys[n].k&KEYSUB) kmap=(KMAP *)(kmap->keys[n].n);
   else
    {
    kmap->keys[n].n=(unsigned)malloc(sizeof(KMAP));
    kmap->keys[n].k|=KEYSUB;
    kmap=(KMAP *)(kmap->keys[n].n);
    kmap->keys=(KEY *)malloc(4*sizeof(KEY));
    kmap->len=0;
    kmap->size=4;
    }
  for(n=0;n!=kmap->len;n++)
   if((kmap->keys[n].k&KEYMASK)==c) goto sub;
   else if((kmap->keys[n].k&KEYMASK)>c) break;
  if(kmap->len==kmap->size)
   kmap->keys=(KEY *)realloc(kmap->keys,sizeof(KEY)*(kmap->size+=8));
  for(z=kmap->len;z!=n;z--) kmap->keys[z]=kmap->keys[z-1];
  kmap->len++;
  kmap->keys[n].k=c;
  kmap->keys[n].n=y;
  sub:;
  }
 }
fclose(fd);
printf("done\n");
return 0;
}

int main(argc,argv)
unsigned char *argv[];
{
if(process(KEYMAP,&km))
 {
 unsigned char *hh=(unsigned char *)getenv("HOME");
 if(!hh) goto in;
 strcpy(gfnam,hh);
 strcat(gfnam,"/");
 strcat(gfnam,KEYMAP);
 if(process(gfnam,&km))
  {
  in:
  if(process(KEYDEF,&km))
   {
   printf("Couldn't open keymap\n");
   return 1;
   }
  }
 }
curmap=km.kmap;
if(argc>2)
 {
 fputs("\nIllegal number of command line arguments",stderr);
 fputs("\nEditor Command Format:  joe [filename]\n",stderr);
 return 0;
 }
termtype();
curwin=(struct window *)malloc(sizeof(struct window));
topwin=curwin;
curwin->next=curwin;
curwin->prev=curwin;
markbuf=0;
curwin->height=height;
curwin->wind=0;
curwin->buffer=(struct buffer *)malloc(sizeof(struct buffer));
curbuf=curwin->buffer;
curbuf->count=1;
aopen();
dopen();
fmopen();
bof();
options=0;
sstring[0]=0;
rstring[0]=0;
leave=0;

rmargin=width-2;
tabmagic=0;
wrap=1;
autoind=0;
overwrite=0;
pic=0;
stmode("");

gfnam[0]=0;

if(argc==2)
 {
 strcpy(gfnam,argv[1]);
 stmode(gfnam);
 handle=fopen(argv[1],"r");
 if(handle)
  {
  if(!fminsfil(handle))
   omsg=(unsigned char *)"\\iError reading file\\i";
  else
   changed=0;
  fclose(handle);
  }
 else
  {
  if(errno==ENOENT)
   {
   omsg=(unsigned char *)"New File";
   backup=1;
   }
  else
   omsg=(unsigned char *)"\\iError opening file\\i";
  }
 }
else omsg=(unsigned char *)"New File";
edit();
aclose();
return 0;
}

tsignal(sig)
{
handle=fopen(ABORT,"w+");
fmpoint(0);
fmsave(handle,fmsize());
fclose(handle);
/*
aclose();
printf("\rE aborted by signal %d\r\n",sig);
printf("Last edit file stored in file called aborted.e\r\n");
*/
_exit(1);
}
SHAR_EOF
if test 58207 -ne "`wc -c < 'joe.c'`"
then
	echo shar: error transmitting "'joe.c'" '(should have been 58207 characters)'
fi
fi # end of overwriting check
if test -f 'joe.h'
then
	echo shar: will not over-write existing file "'joe.h'"
else
cat << \SHAR_EOF > 'joe.h'
/* JOE header file
   Copyright (C) 1991 Joseph H. Allen

This file is part of JOE (Joe's Own Editor)

JOE is free software; you can redistribute it and/or modify it under the terms
of the GNU General Public License as published by the Free Software
Foundation; either version 1, or (at your option) any later version.  

JOE is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  

You should have received a copy of the GNU General Public License along with
JOE; see the file COPYING.  If not, write to the Free Software Foundation, 675
Mass Ave, Cambridge, MA 02139, USA.  */ 

/* File characteristics */

#define NL '\n'			/* End of line character */
#define TAB '\t'		/* Tab character */
#define TABWIDTH 8		/* Tab width */
#define NOHIGHBIT		/* Comment this out to send characters with
				   high bit set to terminal as is.  See
				   the function 'showas'. */

/* Types used in the file buffer */

typedef unsigned char * TXTPTR;	/* Pointer to text in the buffer */
typedef unsigned TXTSIZ;	/* Integer to hold size of file */
#define TXTFREE(a) free(a)	/* Free a buffer */
#define TXTMALLOC(a) malloc(a)	/* Allocate a buffer */
#define TXTREALLOC(a,b) realloc((a),(b))	/* Reallocate a buffer */

/* File names and characteristics */

#define PATHSIZE 256		/* Maximum path length */
#define KEYMAP ".joerc"		/* Keymap file */
/* #define KEYDEF "/usr/bin/.joerc"	Default keymap file */
#define ABORT "aborted"		/* Aborted file */

/* The current file buffer */
/* When you change windows, these variables get stored in the 'struct buffer'
   associated with the old window and are load with the values in the
   'struct buffer' for the new window */

extern TXTSIZ bufsiz;		/* Size of malloc block buffer is in */
extern TXTPTR point;		/* The point (cursor) */
extern TXTPTR buffer;		/* The buffer */
extern TXTPTR filend;		/* First char not in buffer */
extern TXTPTR hole;		/* Address of hole */
extern TXTPTR ehole;		/* First char not in hole */
extern int changed;		/* Set if buffer changed */
extern int backup;		/* Set if backup file has been made */
extern unsigned char gfnam[PATHSIZE];
				/* Current edit file name.  "" for unnamed */

#define HOLESIZE 1024		/* Amount file buffer grows by */

/*******************************************************/
/* Basic file buffer manipulation functions and macros */
/*******************************************************/

int fminsu();		/* fminsu(size) Adjust pointers by amnt inserted */
int fmdelu();		/* fmdelu(size) Adjust pointers by amount deleted */ 
/* The pointers the above two functions currently update include:
	The pointer to start of each window which references the current
	buffer.

	The pointer to cursor in each window which reference the current
	buffer but not the one for the current window.

	The begin & end pointers to the marked block if they are in the
	current buffer.
*/

/* Return size of hole */

#define fmholesize() (ehole-hole)

/* Read character at the point */

#define fmrc() (point==hole?*(point=ehole):*point)

/* Overtype character at the point */

#define fmwc(c) (((point==hole)?point=ehole:0),((point==filend)?(fmexpand(1),\
filend++):0),*point=(c),changed=1)

/* Read character at point and advance point */

#define fmgetc() ((point==hole)?(point=ehole+1,*ehole):*(point++))

/* Overtype character at point and advance point */

#define fmputc(c) (((point==hole)?point=ehole:0),((point==filend)?(fmexpand(1),\
filend++):0),*(point++)=(c),changed=1)

/* Insert character at point */

#define fminsc(c) ( fminsu(1), \
(point!=hole?fmhole():0), (hole==ehole?fmbig(1):0),\
*(hole++)=(c), changed=1)

/* Return the byte offset from the beginning of the buffer to the point */

#define fmnote() ((point>=ehole)?(point-buffer)-(ehole-hole):point-buffer)

/* Return the size of the file in the buffer */

#define fmsize() ((filend-buffer)-(ehole-hole))

/* Return true if the point is at the end of the file */

#define fmeof() ((point==hole)?(ehole==filend):(point==filend))

/* Position the point to a byte offset from the beginning of the file */

#define fmpoint(x) (point=buffer+(x), (point>hole)?(point+=ehole-hole):0)

/* Retreat the point and then read the character that's there */

#define fmrgetc() (point==ehole?*(point=hole-1):*(--point))

/* Position the point to the next NL or the end of the file.  If the point
   is already at a NL, it is set to the next NL. Return 0 if not found, 1
   if found */

#define fmnnl() (fmeof()?0:(fmgetc(),fmfnl()))

/* Set the point to the beginning of the file or the previous NL.  If the
   point is already at a NL, it is set to the one before it.  Return 0 if
   not found, 0 if found */

#define fmnrnl() (fmnote()?(fmrgetc(),fmrnl()):0)

int fmopen();			/* fmopen() Initialize current edit buffer */
int fmexpand();			/* fmexpand(amount) Make buffer bigger */
int fmhole();			/* fmhole() Move hole to point */
int fmbig();			/* fmbig(size) Make hole at least size */
int fmfnl();			/* Find first NL.  Returns 0 if not found */
				/* If at an NL already, point is not moved */
int fmrnl();			/* Find NL in reverse.  Rtns 0 if not found */
				/* If at an NL already, point is not moved */
int fminss();			/* fminss(blk,size) Insert a block at point */
int fmcmp();			/* fmcmp(blk,size) return 0 if matching */
int tupp();			/* tupp(c) Convert char to uppercase */
int fmicmp();			/* Same as fmcmp but ignore case */
int fmsave();			/* fmsave(FILE,size) Save at point in file */
int fminsfil();			/* fminsfil(FILE) Insert file at point */

/******************/
/* Terminal stuff */
/******************/

/* Terminal characteristics (terminal must be vt100ish) */

extern int width;		/* Screen width */
extern int height;		/* Screen height */
extern int scroll;		/* Set if terminal has scrolling regions */

/* Terminal state */

extern int smode;		/* Current character attributes */
extern int tops;		/* Scroll region top (-1 for unknown) */
extern int bots;		/* Scroll region bottem */
extern int oxpos;		/* Cursor position */
extern int oypos;
extern int *scrn;		/* Screen buffer
					-1 means unknown character
					0 - 255 means known character
				*/

extern unsigned char *omsg;	/* Opening message */
int dopen();                        /* Open display (clear it, allocate scrn,
				   etc.) */
int dclose();                       /* dclose(s) Show final message and close
				   display */

int cposs();			/* cpos(row,col) Set cursor position */
int cpos();				/* cpos(row,col) Set cursor position and
				   update ox/oypos */
int setregn();			/* setregn(top,bot) Set scroll region */

int attrib();			/* attrib(mask) Set attributes */
#define INVERSE 256
#define BLINK 512
#define UNDERLINE 1024
#define BOLD 2048

/*****************/
/* Screen update */
/*****************/

/* Flags which high-level edit functions set to control the screen
   update.  All three are initialized to 0 before an edit function
   is executed */

extern int uuu;			/* Set is no screen update needed */
extern int cntr;		/* Set to center cursor to middle of
				   screen if the screen will scroll
				   (for search/replace) */
extern int newy;		/* Set if row changed */
extern int updall;		/* Set to update all windows, not just
				   the ones with same buffer */

/* Flags which indicate the current progress of a screen update (I.E., so
   we can continue if user interrupts screen update) */

extern int upd;			/* Set if a screen update should be done */
extern int hupd;		/* Set if a help update should be done */

extern int helpon;		/* Set if help screen is on */
extern int wind;		/* Number of help lines */

extern int xpos;		/* Requested x & y positions (as determined */
extern int ypos;		/* by scroll calculator: dupdate1 */

extern TXTSIZ saddr;		/* Byte offset to first char of first screen
				   line (of current window) */
extern TXTSIZ xoffset;		/* Cols current window is scrolled to right */
extern TXTSIZ extend;		/* Column number if past end of line or in
				   tab stop */

/* Functions for doing screen update */

int clreolchk();		/* clreolchk(lin,col) Clear to end of line if needed */
int udline();		/* udline(lin) Update a single line.  Return true
			   EOF reached */
int udscrn();		/* Update screen (returns true if it finished) */
int dupdate1();		/* dupdate1(flg) Recalculate cursor, scroll & update
			   screen (sets cursor position if flg is set) */
int dupdatehelp();		/* Update help */
int dupdate();		/* Update help and screen */
int invalidate();		/* invalidate(lin) Invalidate a line so it gets upd. */

/****************/
/* Window Stuff */
/****************/

/* Each file that's edited has a 'struct buffer' associated with it.
   This stores the buffer variables when the buffer is not the current
   buffer (I.E., when the cursor is in a window for another file).
*/

struct buffer
 {
 int count;		/* Reference count (No. windows into this buffer) */
 TXTSIZ bufsiz;		/* Size of malloc block buffer is in */
 TXTPTR buf;		/* The buffer */
 TXTPTR filend;		/* First char not in buffer */
 TXTPTR hole;		/* Address of hole */
 TXTPTR ehole;		/* First char not in hole */
 int changed;		/* Set if buffer changed */
 int backup;		/* Set if backup file has been made */
 unsigned char gfnam[PATHSIZE];	/* Current edit file name.  "" for unnamed */
 };

/* Each window has a 'struct window' associated with it */

struct window
 {
 struct window *next;	/* Doubly linked list of windows */
 struct window *prev;

 struct buffer *buffer;	/* The buffer this window looks at */

 /* Screen variables for each window */

 TXTSIZ saddr;		/* Byte offset to first character of first line in
 			   window */
 TXTSIZ xoffset;	/* No. columns the screen is scrolled to the right */

 /* Window size */

 int wind;         /* Starting screen line */
			/* wind is not the same as 'wind' the number of
			   help lines */
 int height;       /* Height of window */
 int hheight;      /* Height before help turned on */

 /* Edit modes */

 int pic;
 int autoind;
 int overwrite;
 int wrap;
 int tabmagic;
 TXTSIZ rmargin;

 /* Cursor position */

 TXTSIZ extend;		/* Column number if cursor is past end of line or
 			   if it's in a tab stop */
 TXTSIZ cursor;		/* Byte offset (in buffer) to the cursor */

 };

extern struct window *wfirst;	/* Doubly linked list of windows */
extern struct window *wlast;

extern struct window *curwin;	/* Current window */
extern struct buffer *curbuf;	/* Current buffer */
extern struct window *topwin;	/* First window on the screen */

/* Keyboard and command table handler */

typedef struct key KEY;
struct key
 {
 int k;                 /* Key value */
 int n;                 /* Command number or submap address */
			/* sizeof(int) had better = sizeof(KMAP *) */
 };

typedef struct kmap KMAP;
struct kmap
 {
 int len;          /* Number of KEY entries */
 int size;         /* Size of malloc block */
 KEY *keys;             /* KEYs.  Sorted. */
 };

/* Masks & bits for k */

#define KEYMASK 0x7fff
#define KEYSUB 0x8000	/* Set for submap */

/* A command entry */

typedef struct cmd CMD;
struct cmd
 {
 char *name;
 int flag;
 int (*func)();
 };

/* A context (group of related commands) */

typedef struct context CONTEXT;
struct context
 {
 CONTEXT *next;		/* List of all contexts */
 char *name;			/* Name of this context */
 KMAP *kmap;		/* Top level keymap for this context */
 int size;		/* Number of entries in this context */
 CMD *cmd;		/* The entries themselves (sorted) */
 };

int dokey();		/* dokey(c) Execute next key */
extern int quoteflg;	/* Set if next key is quoted */
extern int quote8th;	/* Set if next key is quoted */

/* dokey() Return values */

#define Kaccept -1	/* Key accepted but not executed */
#define Kbad -2		/* Bad key */
/* dokey() used to return a function number; now it executes the function
   itself so the return values are meaningless */

/* Messages and queries */

/* These are all hacks because they return/check for exact key values
   and don't know about the key table.  Someday a key 'context' should
   be added for these
*/

int getl();		/* getl(prompt,line) Get a line of input */
			/* Returns: -1 if user hits ^L
				     1 if user hits \n or \r
				     0 if user hits ^C
			    (yes this is a stupid hack)
			*/

int msg();			/* msg(s) Show a message until user hits a key */

int askyn();		/* askyn(s) Yes/No question 
			Returns: 'Y', 'N' or -1 for ^C */

int query();		/* query(s) Show message, wait for user to hit a key,
			   then return key. */

int nquery();		/* nquery(s) Same as query but leave cursor on
			   edit screen */
int imsg();                 /* imsg() Show opening message */

/*******************************************/
/* High-level edit functions and variables */
/*******************************************/

/* Edit modes */

extern int pic;			/* Set for picture mode */
extern int autoind;		/* Set for autoindent */
extern int overwrite;		/* Set for overwrite */
extern int wrap;		/* Set for autowrap */
extern int tabmagic;		/* Set for magical tabs */
extern TXTSIZ rmargin;		/* Current right margin */

/****************************/
/* Search and replace stuff */
/****************************/

/* Search & replace options */

#define s_ignore 1		/* Ignore case */
#define s_backwards 2		/* Search backwards */
#define s_replace 4		/* Replace */
#define s_regex 8		/* Regular expression search */

extern int options;		/* Search options */
extern unsigned char sstring[PATHSIZE];	/* Search string */
extern unsigned char rstring[PATHSIZE];	/* Replace string */
extern int len;			/* Length of search string */

/**********/
/* Blocks */
/**********/

extern TXTSIZ markb;		/* Begining of block */
extern TXTSIZ marke;		/* End of block */
extern struct buffer *markbuf;	/* Buffer block is in or 0 for no block */

/**************************************/
/* High level edit function utilities */
/**************************************/

extern int leave;		/* Edit function sets this to leave the editor
				   after the function returns */

int dnarw();			/* Move cursor to next line */
				/* Column number is preserved */
TXTSIZ calcs();			/* Calculate number of whitespace columns
				   at beginning of line.  Cursor is left
				   at first non-whitespace character */
int saveit1();			/* saveit1(s) Save buffer in file & clear
				   changed */
int itype();
int ltarw();			/* Move cursor left (goes to end of previous
				   line if at beginning of line) */
int uparw();			/* Move cursor up (preserves column) */
int rtarw();                        /* Move cursor right (goes to beginning of
				   next line if at end of line) */

/* Return current column number of cursor */

#define getcol() (extend?extend:getrcol())

TXTSIZ getrcol();		/* Get column number of point */
int gocol();			/* gocol(col) Set cursor (point/extend) to
				   column number */
int unfill();			/* Remove trailing spaces from line */
int fillup();                       /* Fill to extend position (use this only
				   if extend if past end of line, not for
				   if extend is in tab stop) */

int search();			/* Execute a search.  Returns 1 if found,
				   0 if not */

/* Window functions */

int ldwin();			/* ldwin(window) load window */
int stwin();			/* stwin(window) save window */
int ldbuf();			/* ldbuf(buf) load buf if it's not already */
int ldbuf1();			/* ldbuf1(buf) load buf always */
int stbuf();			/* stbuf(buf) store buffer */
int wfit();			/* make sure the current window is on screen */

/* High Level (user) edit functions */

int wnext();			/* goto next window */
int wprev();			/* goto previous window */
int wexplode();			/* show 1 or all windows */
int wgrow();			/* make window bigger */
int wshrink();			/* make window smaller */
int wedit();			/* edit a new file */
int wsplit();			/* Split window into 2 */

int rewrite();			/* Rewrite screen */
int thelp();			/* Toggle help screen */
int bof();			/* Goto beginning of file */
int eof();			/* Goto end of file */
int bol();			/* Goto beginning of line */
int eol();				/* Goto end of line */
int urtarw();			/* Move cursor right (scroll if need to) */
int ultarw();
int uuparw();
int udnarw();
int delch();			/* Delete character */
int type();				/* type(c) type a character */
int inss();				/* insert a space */
int backs();			/* backspace */
int eexit();			/* Exit & abort */
int pgup();				/* 1/2 Page up */
int pgdn();				/* 1/2 Page down */
int deleol();			/* Erase end of line */
int dellin();			/* Erase entire line */
int exsave();			/* Save and exit */
int saveit();			/* Save current file */
int findline();			/* Goto line No. */
int findfirst();			/* Find some text */
int findnext();			/* Find next occurance */
int setbeg();			/* Set beginning of block */
int setend();			/* Set end of block */
int writeblk();			/* Write block to file */
int moveblk();			/* Move block to point */
int cpyblk();			/* Copy block to point */
int delblk();			/* Delete block */
int insfil();			/* Insert a file */
int push();				/* Execute a shell */
int mode();				/* Change edit mode */
int ctrlin();			/* Center current line */
int reformat();			/* Reformat current paragraph */
int killword();			/* Delete word */
int backword();			/* Delete word to the left */
int wrdl();				/* goto previous word */
int wrdr();				/* goto next word */
int edit();				/* Main edit loop */

extern FILE *handle;		/* File handle used for many various things */
extern TXTSIZ added;		/* Number of chars autoindent added
				(obsolete?) */

/* Portable strdup() */

#define strdupp(x) ((unsigned char *)strcpy((unsigned char *)malloc(strlen(x)+1),(x)))
SHAR_EOF
if test 17677 -ne "`wc -c < 'joe.h'`"
then
	echo shar: error transmitting "'joe.h'" '(should have been 17677 characters)'
fi
fi # end of overwriting check
if test -f '.joerc'
then
	echo shar: will not over-write existing file "'.joerc'"
else
cat << \SHAR_EOF > '.joerc'
                          Initializtaion file for JOE

 JOE looks for this file in:
        1 - Current directory
        2 - User's home directory
        3 - /usr/bin  (or whatever KEYDEF was set to in the Makefile)
 
 Comments:
   Any line beginning with whitespace is a comment line.  At least 2
   characters of whitespace past the end of a line also begin a comment.

 FIRST SECTION:  File name dependant mode settings

 Each line with '*' in the first column indicates the modes which should be
 set for a particular extension (or ending actually).  If there are more than
 one of these lines which match a particular file name, then the last line
 which matches the name is the one which is chosen.

 Here is a list of characters.  Each sets a particular mode.  If the character
 is missing, then the mode shown in the parenthasis is set.

		a	autoindent (no auto indent)
		o	overwrite  (insert)
		p	picture mode (no picture mode)
		w	word wrap (no word wrap)
		t	tab magic (no tab magic)

 Here are the file name dependant mode setting lines:

*		wt		Default for unknown extensions.  This line
				must appear first.
*.c		at		C programs
*.h		at		C header files
*.p		at		Pascal programs
*.f		at		Fortran programs
*.joerc		at		This file

 SECOND SECTION:  Lines between the { and the } are the on-line help text.  Use
 \u to turn underline on or off.  Use \i to turn inverse on or off.  Use \\
 to display \

{
\i   Help Screen    turn off with ^KH                                            \i
\i \i\uGO\u \uTO\u              \uDELETE\u    \uMISC\u      \uBLOCK\u    \uFIND\u     \uQUOTE\u    \uWINDOW\u     \i \i
\i \i^B left  ^F right ^D single ^T  mode   ^KB mark ^KF text `  Ctrl  ^KO split  \i \i
\i \i^Z word  ^X word  ^W >word  ^R  retype ^KK end  ^L  next ^\\ bit-7 ^KI 1 / all\i \i
\i \i^A edge  ^E edge  ^O word<  ^KA center ^KC copy ^KL line \uFILE\u     ^KP up     \i \i
\i \i^P up    ^N down  ^J >line  ^KJ format ^KM move \uEXIT\u     ^KD save ^KN down   \i \i
\i \i^U page  ^V page  ^Y line   ^KZ shell  ^KW save ^KX save ^KR read ^KG grow   \i \i
\i \i^KU top ^KV end   ^K- undo  ^K, indnt< ^KY kill ^C abort/         ^KT shrink \i \i
\i \i^G matching ([<{` ^K+ redo  ^K. indnt>             close window  ^KE get file\i \i
}

 THIRD SECTION:  Key sequence to command bindings.  Use ^@ to ^_ and ^? to
 specify control characters.

:main

backs		^H			Backspace
backs		^?
backword	^O			Backspace word
bof		^K U			Move cursor to beginning of file
bof		^K ^U
bof		^K u
bol		^A			Move cursor to beginning of line
bol		^[ [ H
bol		^K ^[ [ H
bol		^[ O P
bol		^K ^[ O P
cpyblk		^K C			Copy previously marked block
cpyblk		^K ^C
cpyblk		^K c
ctrlin		^K A			Center line
ctrlin		^K ^A
ctrlin		^K a
delblk		^K Y			Delete previously marked block
delblk		^K ^Y
delblk		^K y
delch		^D			Delete character
deleol		^J			Delete to end of line
dellin		^Y			Delete entire line
dnarw		^N			Move cursor down
dnarw		^[ [ B
dnarw		^[ O B
dnarw		^K ^[ [ B
dnarw		^K ^[ O B
eexit		^C			Exit (window/file)
eexit		^K Q
eexit		^K q
eof		^K V			Move cursor to end of file
eof		^K ^V
eof		^K v
eol		^E			Move cursor to end of line
eol		^[ [ F
eol		^K ^[ [ F
eol		^[ O S
eol		^K ^[ O S
exsave		^K X			Save & exit
exsave		^K ^X
exsave		^K x
findfirst	^K F			Find text
findfirst	^K ^F
findfirst	^K f
findnext	^L			Find next
findline	^K L			Goto line number
findline	^K ^L
findline	^K l
gotomatching	^G
indentl		^K ,			Indent left
indentr		^K .			Indent right
insfil		^K R			Insert a file
insfil		^K ^R
insfil		^K r
 inss		^G			Insert a space
inss		^[ [ L
inss		^K ^[ [ L
killlin		^K |			Emacs-style kill line
killword	^W			Delete word under cursor
ltarw		^B			Move cursor left
ltarw		^[ [ D
ltarw		^K ^[ [ D
ltarw		^[ O D
ltarw		^K ^[ O D
mode		^T			Change mode
moveblk		^K M			Move previously marked block
moveblk		^K ^M
moveblk		^K m
pgdn		^V			Move cursor 1/2 page down
pgdn		^[ [ G
pgdn		^K ^[ [ G
pgdn		^[ [ 6 ~
pgdn		^K ^[ [ 6 ~
pgup		^U			Move cursor 1/2 page up
pgup		^[ [ I
pgup		^K ^[ [ I
pgup		^[ [ 5 ~
pgup		^K ^[ [ 5 ~
push		^K Z			Push to a shell
push		^K ^Z
push		^K z
redo		^K +			Redo
reformat	^K J			Reformat paragraph
reformat	^K ^J
reformat	^K j
rewrite		^R			Retype screen
rtarw		^F			Move cursor right
rtarw		^[ [ C
rtarw		^K ^[ [ C
rtarw		^[ O C
rtarw		^K ^[ O C
rtn		^M			The return key
saveit		^K D			Save file
saveit		^K ^D
saveit		^K d
saveit		^K S
saveit		^K s
setbeg		^K B			Set beginning of block
setbeg		^K ^B
setbeg		^K b
setend		^K K			Set end of block
setend		^K ^K
setend		^K k
stquote		`			Next character is a control character
stquote8th	^\			Next character has 7th bit set
thelp		^K H			Toggle help text on/off
thelp		^K ^H
thelp		^K h
thelp		^[ [ 2 8 ~
thelp		^K ^[ [ 2 8 ~
undo		^K -			Undelete
uparw		^P			Move cursor up
uparw		^[ [ A
uparw		^K ^[ [ A
uparw		^[ O A
uparw		^K ^[ O A
wedit		^K E			Edit another file
wedit		^K ^E
wedit		^K e
wexplode	^K I			Show 1 or all windows
wexplode	^K ^I
wexplode	^K i
wgrow		^K G			Grow window
wgrow		^K ^G
wgrow		^K g
wnext		^K N			Goto next window
wnext		^K ^N
wnext		^K n
wprev		^K P			Goto previous window
wprev		^K ^P
wprev		^K p
wrdl		^Z			Move to previous word
wrdl		^[ O Q
wrdl		^K ^[ O Q
wrdr		^X			Move to next word
wrdr		^[ O R
wrdr		^K ^[ O R
writeblk	^K W			Write previously marked block to a file
writeblk	^K ^W
writeblk	^K w
wshrink		^K T			Shrink window
wshrink		^K ^T
wshrink		^K t
wsplit		^K O			Split window
wsplit		^K ^O
wsplit		^K o

type		^I			Tab

type		sp			Typable characters
type		!
type		"
type		#       
type		$
type		%
type		&
type		'
type		(
type		)
type		*
type		+
type		,
type		-
type		.
type		/
type		0
type		1
type		2
type		3
type		4
type		5
type		6
type		7
type		8
type		9
type		:
type		;
type		<
type		=
type		>
type		?
type		@
type		A
type		B
type		C
type		D
type		E
type		F
type		G
type		H
type		I
type		J
type		K
type		L
type		M
type		N
type		O
type		P
type		Q
type		R
type		S
type		T
type		U
type		V
type		W
type		X
type		Y
type		Z
type		[
type		\
type		]
type		^
type		_
type		a
type		b
type		c
type		d
type		e
type		f
type		g
type		h
type		i
type		j
type		k
type		l
type		m
type		n
type		o
type		p
type		q
type		r
type		s
type		t
type		u
type		v
type		w
type		x
type		y
type		z
type		{
type		|
type		}
type		~
SHAR_EOF
if test 6221 -ne "`wc -c < '.joerc'`"
then
	echo shar: error transmitting "'.joerc'" '(should have been 6221 characters)'
fi
fi # end of overwriting check
#	End of shell archive
exit 0
