#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of shell archive."
# Contents:  COPYING Makefile NEWS README async.h asyncbsd.c
#   asyncesix.c asynchpux.c asynclinux.c asyncposix.c asyncxenix.c
#   blocks.c blocks.h cruddy.c joe.1 joe.c joe.h .joerc
# Wrapped by rcarter@wpi on Thu Jan 23 05:55:34 1992
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'COPYING' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'COPYING'\"
else
echo shar: Extracting \"'COPYING'\" \(12488 characters\)
sed "s/^X//" >'COPYING' <<'END_OF_FILE'
X
X		    GNU GENERAL PUBLIC LICENSE
X		     Version 1, February 1989
X
X Copyright (C) 1989 Free Software Foundation, Inc.
X                    675 Mass Ave, Cambridge, MA 02139, USA
X Everyone is permitted to copy and distribute verbatim copies
X of this license document, but changing it is not allowed.
X
X			    Preamble
X
X  The license agreements of most software companies try to keep users
Xat the mercy of those companies.  By contrast, our General Public
XLicense is intended to guarantee your freedom to share and change free
Xsoftware--to make sure the software is free for all its users.  The
XGeneral Public License applies to the Free Software Foundation's
Xsoftware and to any other program whose authors commit to using it.
XYou can use it for your programs, too.
X
X  When we speak of free software, we are referring to freedom, not
Xprice.  Specifically, the General Public License is designed to make
Xsure that you have the freedom to give away or sell copies of free
Xsoftware, that you receive source code or can get it if you want it,
Xthat you can change the software or use pieces of it in new free
Xprograms; and that you know you can do these things.
X
X  To protect your rights, we need to make restrictions that forbid
Xanyone to deny you these rights or to ask you to surrender the rights.
XThese restrictions translate to certain responsibilities for you if you
Xdistribute copies of the software, or if you modify it.
X
X  For example, if you distribute copies of a such a program, whether
Xgratis or for a fee, you must give the recipients all the rights that
Xyou have.  You must make sure that they, too, receive or can get the
Xsource code.  And you must tell them their rights.
X
X  We protect your rights with two steps: (1) copyright the software, and
X(2) offer you this license which gives you legal permission to copy,
Xdistribute and/or modify the software.
X
X  Also, for each author's protection and ours, we want to make certain
Xthat everyone understands that there is no warranty for this free
Xsoftware.  If the software is modified by someone else and passed on, we
Xwant its recipients to know that what they have is not the original, so
Xthat any problems introduced by others will not reflect on the original
Xauthors' reputations.
X
X  The precise terms and conditions for copying, distribution and
Xmodification follow.
X
X		    GNU GENERAL PUBLIC LICENSE
X   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
X
X  0. This License Agreement applies to any program or other work which
Xcontains a notice placed by the copyright holder saying it may be
Xdistributed under the terms of this General Public License.  The
X"Program", below, refers to any such program or work, and a "work based
Xon the Program" means either the Program or any work containing the
XProgram or a portion of it, either verbatim or with modifications.  Each
Xlicensee is addressed as "you".
X
X  1. You may copy and distribute verbatim copies of the Program's source
Xcode as you receive it, in any medium, provided that you conspicuously and
Xappropriately publish on each copy an appropriate copyright notice and
Xdisclaimer of warranty; keep intact all the notices that refer to this
XGeneral Public License and to the absence of any warranty; and give any
Xother recipients of the Program a copy of this General Public License
Xalong with the Program.  You may charge a fee for the physical act of
Xtransferring a copy.
X
X  2. You may modify your copy or copies of the Program or any portion of
Xit, and copy and distribute such modifications under the terms of Paragraph
X1 above, provided that you also do the following:
X
X    a) cause the modified files to carry prominent notices stating that
X    you changed the files and the date of any change; and
X
X    b) cause the whole of any work that you distribute or publish, that
X    in whole or in part contains the Program or any part thereof, either
X    with or without modifications, to be licensed at no charge to all
X    third parties under the terms of this General Public License (except
X    that you may choose to grant warranty protection to some or all
X    third parties, at your option).
X
X    c) If the modified program normally reads commands interactively when
X    run, you must cause it, when started running for such interactive use
X    in the simplest and most usual way, to print or display an
X    announcement including an appropriate copyright notice and a notice
X    that there is no warranty (or else, saying that you provide a
X    warranty) and that users may redistribute the program under these
X    conditions, and telling the user how to view a copy of this General
X    Public License.
X
X    d) You may charge a fee for the physical act of transferring a
X    copy, and you may at your option offer warranty protection in
X    exchange for a fee.
X
XMere aggregation of another independent work with the Program (or its
Xderivative) on a volume of a storage or distribution medium does not bring
Xthe other work under the scope of these terms.
X
X  3. You may copy and distribute the Program (or a portion or derivative of
Xit, under Paragraph 2) in object code or executable form under the terms of
XParagraphs 1 and 2 above provided that you also do one of the following:
X
X    a) accompany it with the complete corresponding machine-readable
X    source code, which must be distributed under the terms of
X    Paragraphs 1 and 2 above; or,
X
X    b) accompany it with a written offer, valid for at least three
X    years, to give any third party free (except for a nominal charge
X    for the cost of distribution) a complete machine-readable copy of the
X    corresponding source code, to be distributed under the terms of
X    Paragraphs 1 and 2 above; or,
X
X    c) accompany it with the information you received as to where the
X    corresponding source code may be obtained.  (This alternative is
X    allowed only for noncommercial distribution and only if you
X    received the program in object code or executable form alone.)
X
XSource code for a work means the preferred form of the work for making
Xmodifications to it.  For an executable file, complete source code means
Xall the source code for all modules it contains; but, as a special
Xexception, it need not include source code for modules which are standard
Xlibraries that accompany the operating system on which the executable
Xfile runs, or for standard header files or definitions files that
Xaccompany that operating system.
X
X  4. You may not copy, modify, sublicense, distribute or transfer the
XProgram except as expressly provided under this General Public License.
XAny attempt otherwise to copy, modify, sublicense, distribute or transfer
Xthe Program is void, and will automatically terminate your rights to use
Xthe Program under this License.  However, parties who have received
Xcopies, or rights to use copies, from you under this General Public
XLicense will not have their licenses terminated so long as such parties
Xremain in full compliance.
X
X  5. By copying, distributing or modifying the Program (or any work based
Xon the Program) you indicate your acceptance of this license to do so,
Xand all its terms and conditions.
X
X  6. Each time you redistribute the Program (or any work based on the
XProgram), the recipient automatically receives a license from the original
Xlicensor to copy, distribute or modify the Program subject to these
Xterms and conditions.  You may not impose any further restrictions on the
Xrecipients' exercise of the rights granted herein.
X
X  7. The Free Software Foundation may publish revised and/or new versions
Xof the General Public License from time to time.  Such new versions will
Xbe similar in spirit to the present version, but may differ in detail to
Xaddress new problems or concerns.
X
XEach version is given a distinguishing version number.  If the Program
Xspecifies a version number of the license which applies to it and "any
Xlater version", you have the option of following the terms and conditions
Xeither of that version or of any later version published by the Free
XSoftware Foundation.  If the Program does not specify a version number of
Xthe license, you may choose any version ever published by the Free Software
XFoundation.
X
X  8. If you wish to incorporate parts of the Program into other free
Xprograms whose distribution conditions are different, write to the author
Xto ask for permission.  For software which is copyrighted by the Free
XSoftware Foundation, write to the Free Software Foundation; we sometimes
Xmake exceptions for this.  Our decision will be guided by the two goals
Xof preserving the free status of all derivatives of our free software and
Xof promoting the sharing and reuse of software generally.
X
X			    NO WARRANTY
X
X  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
XFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
XOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
XPROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
XOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
XMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
XTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
XPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
XREPAIR OR CORRECTION.
X
X  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
XWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
XREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
XINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
XOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
XTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
XYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
XPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
XPOSSIBILITY OF SUCH DAMAGES.
X
X		     END OF TERMS AND CONDITIONS
X
X	Appendix: How to Apply These Terms to Your New Programs
X
X  If you develop a new program, and you want it to be of the greatest
Xpossible use to humanity, the best way to achieve this is to make it
Xfree software which everyone can redistribute and change under these
Xterms.
X
X  To do so, attach the following notices to the program.  It is safest to
Xattach them to the start of each source file to most effectively convey
Xthe exclusion of warranty; and each file should have at least the
X"copyright" line and a pointer to where the full notice is found.
X
X    <one line to give the program's name and a brief idea of what it does.>
X    Copyright (C) 19yy  <name of author>
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 1, or (at your option)
X    any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
XAlso add information on how to contact you by electronic and paper mail.
X
XIf the program is interactive, make it output a short notice like this
Xwhen it starts in an interactive mode:
X
X    Gnomovision version 69, Copyright (C) 19xx name of author
X    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
X    This is free software, and you are welcome to redistribute it
X    under certain conditions; type `show c' for details.
X
XThe hypothetical commands `show w' and `show c' should show the
Xappropriate parts of the General Public License.  Of course, the
Xcommands you use may be called something other than `show w' and `show
Xc'; they could even be mouse-clicks or menu items--whatever suits your
Xprogram.
X
XYou should also get your employer (if you work as a programmer) or your
Xschool, if any, to sign a "copyright disclaimer" for the program, if
Xnecessary.  Here a sample; alter the names:
X
X  Yoyodyne, Inc., hereby disclaims all copyright interest in the
X  program `Gnomovision' (a program to direct compilers to make passes
X  at assemblers) written by James Hacker.
X
X  <signature of Ty Coon>, 1 April 1989
X  Ty Coon, President of Vice
X
XThat's all there is to it!
END_OF_FILE
if test 12488 -ne `wc -c <'COPYING'`; then
    echo shar: \"'COPYING'\" unpacked with wrong size!
fi
# end of 'COPYING'
fi
if test -f 'Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Makefile'\"
else
echo shar: Extracting \"'Makefile'\" \(1452 characters\)
sed "s/^X//" >'Makefile' <<'END_OF_FILE'
X# Makefile for Joe's Own Editor
X
X# Directory to install joe and .joerc into
XWHEREJOE = /usr/local/stusrc/joe
XWHEREJOERC = /usr/local/stusrc/joe
X
X# Use these two for 'cc'
XCC = cc
XCFLAGS = -DKEYDEF=\"$(WHEREJOERC)/.joerc\" -O
X
X# Use these two for 'gcc'
X#CC = gcc
X#CFLAGS = -DKEYDEF=\"$(WHEREJOERC)/.joerc\"
X
Xfoo:
X	@echo Type make followed by one of the following
X	@echo
X	@echo bsd hpux xenix esix posix cruddy install clean
X
Xbsd: joe.o asyncbsd.o blocks.o
X	$(CC) $(CFLAGS) joe.o asyncbsd.o blocks.o -ltermcap -o joe
X
Xxenix: joe.o asyncxenix.o blocks.o
X	$(CC) $(CFLAGS) joe.o asyncxenix.o blocks.o -lx -ltermcap -o joe
X
Xhpux: joe.o asynchpux.o blocks.o
X	$(CC) $(CFLAGS) joe.o asynchpux.o blocks.o -ltermcap -o joe
X
Xesix: joe.o asyncesix.o blocks.o
X	$(CC) $(CFLAGS) joe.o asyncesix.o blocks.o -lcurses -lbsd -o joe
X
Xposix: joe.o asyncposix.o blocks.o
X	$(CC) $(CFLAGS) joe.o asyncposix.o blocks.o -ltermcap -o joe
X
Xlinux: joe.o asynclinux.o blocks.o
X	$(CC) $(CFLAGS) joe.o asynclinux.o blocks.o -o joe
X
Xcruddy: joe.o cruddy.o blocks.o
X	$(CC) $(CFLAGS) joe.o cruddy.o blocks.o -o joe
X
Xinstall:
X	strip joe
X	mv joe $(WHEREJOE)
X	cp .joerc $(WHEREJOERC)
X	chmod a+x $(WHEREJOE)/joe
X	chmod a+r $(WHEREJOERC)/.joerc
X
Xclean:
X	rm -f asyncbsd.o asyncxenix.o asynchpux.o asyncesix.o asyncposix.o \
Xcruddy.o blocks.o joe.o asynclinux.o
X
Xasyncbsd.o asynclinux.o cruddy.o asyncxenix.o asynxhpux.o asyncesix.o : async.h
X
Xblocks.o : blocks.h
X
Xjoe.o : blocks.h joe.h async.h
END_OF_FILE
if test 1452 -ne `wc -c <'Makefile'`; then
    echo shar: \"'Makefile'\" unpacked with wrong size!
fi
# end of 'Makefile'
fi
if test -f 'NEWS' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'NEWS'\"
else
echo shar: Extracting \"'NEWS'\" \(7144 characters\)
sed "s/^X//" >'NEWS' <<'END_OF_FILE'
X
XRelease 0.1.2 of JOE
X
XFIXES AND NEW FEATURES
X
X	* undo/redo are now a real undo system instead of undelete
X
X	* keyboard macros added
X
X	* repeat prefix added
X
X	* capture shell output and pipe block through shell command added
X
X	* A version for Linux is now included
X
X	* Simple macros may be specified in the .joerc file
X
X	* Some bugs in the paragraph reformat routine were fixed
X
X	* The right margin may be specified in the .joerc file
X
X	* A bug where strange things would happen if you typed \ in the
X          search & replace prompt is fixed
X
XRelease 0.1.1 of JOE (Joe's Own Editor):  Note that this program was
Xpreviously calles 'E' (which turned out to be the RAND EDITOR and one of the
Xsynonyms for vi) and 'J' (which turned out to be a language and the name of
Xanother UNIX editor).  See below for list of big fixes and new features. 
XFind the source for this release in 'alt.sources'
X
XFIXES AND NEW FEATURES FOR THIS VERSION
X
X	* Left arrow jumping fixed
X
X	* No longer touches the IXON IXOFF setting
X
X	* Reference to Gnu EMACS removed from the copyright notice :-)
X
X	* The patch for Undo and Redo is not needed for this version.
X
X	* Name of initialization file changed to '.joerc'
X
X	* Versions for ESIX and POSIX now included
X	  (think you Mike Lijewski for the POSIX driver)
X
X	* Users can now customize the help text.  The help text is now placed
X	  in the initialization file
X
X	* A compile option for passing characters with bit 7 set has been
X	  added.  This is for Iceland
X
X	* Added kill line function for the emacs people.  See 'killlin' in
X          the .joerc file
X
X	* The ioctls TIOCGSIZE and TIOCGWINSZ are used to get the
X	  screen/window size.  If the window changes size, JOE resizes the
X	  screen on the next key press
X
X	* Prompts and messages wider than the screen width are now handled
X	  properly
X
X=-=-=-=-=-=
X
XRelease 0.0.0 of 'J' (Joe's Editor):  This release supersedes all previous
Xversions which lack a release number.  Note that this program was previously
Xcalled 'E' but the name has been changed ('E' turns out to be one of the
Xsynonyms for 'vi').  See below for list of bug fixes and new features.  The
X2 following posts contain the source.
X
XIntroduction
X
X	'J' is a small screen editor which was designed to be easy to use for
Xnovice users but also to be powerful and complete enough for experienced
Xusers.  Several elements of its design are unique innovations.  Here is a
Xcopy of the on-line help text to give you a feel for this editor:
X
XGO TO              DELETE    MISC      BLOCK    FIND     QUOTE    WINDOW
X^B left  ^F right ^D single ^T  mode   ^KB mark ^KF text `  Ctrl  ^KO split
X^Z word  ^X word  ^W >word  ^R  retype ^KK end  ^L  next ^\ bit-7 ^KI 1 / all
X^A edge  ^E edge  ^O word<  ^KA center ^KC copy ^KL line FILE     ^KP up
X^P up    ^N down  ^J >line  ^KJ format ^KM move EXIT     ^KD save ^KN down
X^U page  ^V page  ^Y line   ^KZ shell  ^KW save ^KX save ^KR read ^KG grow
X^KU top ^KV end   ^K- undo  ^K, indnt< ^KY kill ^C abort/         ^KT shrink
X^G matching ([<{` ^K+ redo  ^K. indnt>             close window  ^KE get file
X
XOther relevent features:
X
X	* Extremely small - the XENIX version is only 58K
X
X	* Help text can be left on while editing
X
X	* Key layout designed to eliminate headaches: ^Q and ^S are not used,
X	  both ^H and DEL are backspace.  Also, each user may customize
X	  his key layout by modifying a simple initialization file
X
X	* Versions for BSD, HPUX and XENIX 386 are included.  A simple tty
X	  driver is also provided to ease porting to other systems
X
X	* Currently only VT100/ANSI terminals are supported.  If the terminal
X	  has scrolling regions, J uses them.  Has well-tuned interruptable
X	  screen update algorithm
X
X	* Has: autoindent, word-wrap, overtype/insert, picture mode (right-
X	  arrow makes space past ends of lines), right margin (for paragraph
X	  formatting and center), and magic tabs (the column number of text
X	  after tab stops is preserved when inserting and deleting)
X
X	* The cursor column doesn't 'jump' when you move between long and
X	  short lines.  Instead the cursor column only jumps when you try to
X	  edit in an invalid place or if picture mode is set, the invalid
X	  place is made real by space filling
X
X	* Editor modes can be set depending on file extension
X
X	* No line length restrictions.  Binary files can be edited without
X	  difficulty
X
X	* Long lines are truncated, not wrapped (I.E., the screen scrolls to
X	  the right to get to the truncated parts)
X
XFIXES FOR THIS VERSION
X
X	* Shell escape lock-ups are fixed
X
X	* Paragraph reformat glitch is fixed
X
X	* Cursor update screwynesses fixed for picture mode
X
X	* Goto next word/Goto previous word/Delete word left and Delete word
X	  right were made more consistant
X
XNEW FEATURES FOR THIS VERSION
X
X	* ~ can be used at file name prompts to expand user home directories
X
X	* J now has undelete and redelete (you can go backwards and forewards
X	  through the delete buffer to select which text you want to undelete)
X
X	* J now has indent functions.  A marked block can be indented more
X	  or less. If you use an indent function outside a marked block, the
X	  lines with the same or greater indent level surrounding the cursor
X	  are marked
X
X	* Right margin was added for paragraph format and center line
X
X	* Goto matching parenthasis (or [ { ` < )
X
X	* ` was made the quote control character key because ^_ is not easy
X	  generate on many keyboard.  `` gets `
X
X	* tty drivers were rewritten.  This made the screen update faster
X	  (now the screen update is instantaneous on 20MHz 386s).  Screen
X	  update preempting also works better
X
XTHE PLAN
X
X	Version 1.0.0 will be a complete rewrite.  It should be done sometime
Xbefore january.  These are my goals for it:
X
X	* Block oriented software virtual memory support (for less thrashing
X	  and elimination of file size limits caused by the system's process
X	  size limit)
X
X	* MS-DOS support
X
X	* X windows support
X
X	* Better integration with UNIX:  J will be able to process text
X	  through pipes (like vi), will have standard unix regular expressions,
X	  and will be usable as a 'more' program.
X
X	* Will be terminal independant and use termcap and terminfo
X
X	* Will have a ASCII/HEX dump display mode
X
X	* Will have complete program developement support (save&make, next
X	  error/previous error, tags file support)
X
X	* Will have a much more powerful scrolling algorithm.  I have a
X	  methode which is simpler and faster than even GNU-EMACS' Gosling
X	  algorithm
X
X	* All of this will require no changes to the basic keyboard layout-
X	  maybe one more added line of help text for new things
X
X	* It will probably have keyboard macros but it won't have much of
X	  an extension language.  Maybe in version 2.0.0
X
X	* I expect all of this not to add more than 30 or 40% to the size
X
X		Joseph H. Allen
X		28 Dale Lane
X		Smithtown, N.Y. 11787
X
X/*  rcarter@wpi.wpi.edu */      /* Amazing */             /* Joseph H. Allen */
Xint a[1817];main(z,p,q,r){for(p=80;q+p-80;p-=2*a[p])for(z=9;z--;)q=3&(r=time(0)
X+r*57)/7,q=q?q-1?q-2?1-p%79?-1:0:p%79-77?1:0:p<1659?79:0:p>158?-79:0,q?!a[p+q*2
X]?a[p+=a[p+=q]=q]=q:0:0;for(;q++-1817;)printf(q%79?"%c":"%c\n"," #"[!a[q-1]]);}
END_OF_FILE
if test 7144 -ne `wc -c <'NEWS'`; then
    echo shar: \"'NEWS'\" unpacked with wrong size!
fi
# end of 'NEWS'
fi
if test -f 'README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'README'\"
else
echo shar: Extracting \"'README'\" \(1569 characters\)
sed "s/^X//" >'README' <<'END_OF_FILE'
XIf you don't know what this is, read the NEWS file.
X
XTo compile:
X
X	(1) Determine where you want to install the editor program and the
X	    system default keymap file.  Put this path in the Makefile.  If
X	    you're a mere user, don't worry about this.  Instead, place a copy
X	    of the '.joerc' file in your home directory.  
X
X	(2) If you need to be able to display characters with bit 7 set as-
X	    is (instead of in inverse), comment out the '#define NOHIGHBIT'
X	    line in the file 'joe.h' 
X
X	(3) type 'make xenix' for Xenix systems, 'make hpux' for HPUX systems
X	    or 'make bsd' for BSD systems, 'make posix' for AIX systems or
X	    'make esix' for esix systems.  If none of these work, type 'make
X	    linux' or 'make cruddy' to make a version with an inferior
X	    terminal driver (The linux version is for system V systems
X	    without timers or asynchronous ttys.  Cruddy is for systems which
X	    don't even have a termio structure).
X
X	(4) To install it in the system, log in as superuser and do
X	    'make install'
X
X	(5) When JOE is used, be sure the baud rate as reported by stty is
X	    correctly set.  If you're not on a real serial terminal, try to
X	    set the baud rate to the best guess of what the actual throughput
X	    is.  In particular, if you use JOE on a windowing system, the
X	    window updates will be much faster if you set the baud rate to
X	    'extb' or '38400'.  
X
X	(6) PC users may wish to change the line 'backs   ^?' in the .joerc
X	    file to 'delch    ^?'.  This way, the Del key deletes characters
X	    instead of backspacing.
END_OF_FILE
if test 1569 -ne `wc -c <'README'`; then
    echo shar: \"'README'\" unpacked with wrong size!
fi
# end of 'README'
fi
if test -f 'async.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'async.h'\"
else
echo shar: Extracting \"'async.h'\" \(2180 characters\)
sed "s/^X//" >'async.h' <<'END_OF_FILE'
X/* Terminal interface header file
X   Copyright (C) 1991 Joseph H. Allen
X
XThis file is part of JOE (Joe's Own Editor)
X
XJOE is free software; you can redistribute it and/or modify it under the terms
Xof the GNU General Public License as published by the Free Software
XFoundation; either version 1, or (at your option) any later version.  
X
XJOE is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
XA PARTICULAR PURPOSE.  See the GNU General Public License for more details.  
X
XYou should have received a copy of the GNU General Public License
Xalong with JOE; see the file COPYING.  If not, write to
Xthe Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
X
Xint aopen();		/* fflush(stdout) and then set terminal to
X			   character at a time mode */
Xint aclose();		/* Flush output and then restore original tty mode */
Xint aflush();		/* Flush the output and sleep for the amount of time
X			   the output will need to get to the terminal (I.E.,
X			   depends on the baud rate).  Then check if there's
X			   any typeahead and set 'have' if there is */
Xint anext();		/* Call aflush() and then return next char from
X			   terminal */
Xint sigjoe();		/* Set signal handling for JOE */
Xint signorm();		/* Set signal handling back to default */
X
Xextern int have;	/* Set if there is typeahead */
X
Xint eputs();		/* Write string to terminal */
Xint eputc();		/* Write character to terminal */
X			/* If the output buffer gets full, these call
X			   aflush() */
X
Xint shell();		/* Shell escape */
Xint susp();		/* Suspend */
X
Xint termtype();             /* Determine the following terminal parameters */
X
Xextern int width;       /* Screen width */
Xextern int height;      /* Screen height */
Xextern int scroll;      /* Set=use scrolling regions, Clr=don't use them */
Xextern int record;
Xextern unsigned char *take;
X		/* String to use as input instead of keyboard */
X
Xint getsize();		/* Set width and height again with TIOCGSIZE */
X
X/* If termtype does nothing, these values defualt to: width=80, height=24,
X   scroll=1 (true).
X 
X   Note that the only terminal type supported is ANSI/VT100
X */
END_OF_FILE
if test 2180 -ne `wc -c <'async.h'`; then
    echo shar: \"'async.h'\" unpacked with wrong size!
fi
# end of 'async.h'
fi
if test -f 'asyncbsd.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'asyncbsd.c'\"
else
echo shar: Extracting \"'asyncbsd.c'\" \(6059 characters\)
sed "s/^X//" >'asyncbsd.c' <<'END_OF_FILE'
X/* Terminal interface for BSD
X   Copyright (C) 1991 Joseph H. Allen
X
XThis file is part of JOE (Joe's Own Editor)
X
XJOE is free software; you can redistribute it and/or modify it under the terms
Xof the GNU General Public License as published by the Free Software
XFoundation; either version 1, or (at your option) any later version. 
X
XJOE is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
XA PARTICULAR PURPOSE.  See the GNU General Public License for more details.  
X
XYou should have received a copy of the GNU General Public License
Xalong with JOE; see the file COPYING.  If not, write to
Xthe Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
X
X#include <sgtty.h>
X#include <fcntl.h>
X#include <stdio.h>
X#include <signal.h>
X#include <sys/time.h>
X#include "async.h"
X
X#define HZ 10			/* Clock ticks/second */
X
X#define DIVISOR 11000000	/* The baud rate divided into this should
X				   give the number of microseconds per
X				   character.  It should attempt to
X				   reflect the true throughput, which is
X				   usually slower than the best possible
X				   for a given baud rate */
X
X#define TIMES 3			/* Times per second that we check for
X				   typeahead */
X
Xstatic struct sgttyb oarg;
Xstatic struct tchars otarg;
Xstatic struct ltchars oltarg;
X
Xstatic unsigned char *obuf=0;
Xstatic unsigned obufp=0;
Xstatic unsigned obufsiz;
Xstatic unsigned long ccc;
X
Xstatic unsigned speeds[]=
X{
XB50,50,B75,75,B110,110,B134,134,B150,150,B200,200,B300,300,B600,600,B1200,1200,
XB1800,1800,B2400,2400,B4800,4800,B9600,9600,EXTA,19200,EXTB,38400
X};
X
Xint tsignal();
X
Xsigjoe()
X{
Xsignal(SIGHUP,tsignal);
Xsignal(SIGTERM,tsignal);
Xsignal(SIGINT,SIG_IGN);
Xsignal(SIGPIPE,SIG_IGN);
Xsignal(SIGQUIT,SIG_IGN);
X}
X
Xsignorm()
X{
Xsignal(SIGHUP,SIG_DFL);
Xsignal(SIGTERM,SIG_DFL);
Xsignal(SIGINT,SIG_DFL);
Xsignal(SIGPIPE,SIG_DFL);
Xsignal(SIGQUIT,SIG_DFL);
X}
X
Xaopen()
X{
Xint x;
Xstruct sgttyb arg;
Xstruct tchars targ;
Xstruct ltchars ltarg;
Xfflush(stdout);
Xioctl(fileno(stdin),TIOCGETP,&arg);
Xioctl(fileno(stdin),TIOCGETC,&targ);
Xioctl(fileno(stdin),TIOCGLTC,&ltarg);
Xoarg=arg; otarg=targ; oltarg=ltarg;
Xarg.sg_flags=( (arg.sg_flags&~(ECHO|CRMOD) ) | CBREAK) ;
Xtarg.t_intrc= -1;
Xtarg.t_quitc= -1;
Xtarg.t_eofc= -1;
Xtarg.t_brkc= -1;
Xltarg.t_suspc= -1;
Xltarg.t_dsuspc= -1;
Xltarg.t_rprntc= -1;
Xltarg.t_flushc= -1;
Xltarg.t_werasc= -1;
Xltarg.t_lnextc= -1;
Xioctl(fileno(stdin),TIOCSETN,&arg);
Xioctl(fileno(stdin),TIOCSETC,&targ);
Xioctl(fileno(stdin),TIOCSLTC,&ltarg);
Xccc=0;
Xfor(x=0;x!=30;x+=2)
X if(arg.sg_ospeed==speeds[x])
X  {
X  ccc=DIVISOR/speeds[x+1];
X  break;
X  }
Xif(obuf) free(obuf);
Xif(!(TIMES*ccc)) obufsiz=4096;
Xelse
X {
X obufsiz=1000000/(TIMES*ccc);
X if(obufsiz>4096) obufsiz=4096;
X }
Xif(!obufsiz) obufsiz=1;
Xobuf=(unsigned char *)malloc(obufsiz);
X}
X
Xaclose()
X{
Xaflush();
Xioctl(fileno(stdin),TIOCSETN,&oarg);
Xioctl(fileno(stdin),TIOCSETC,&otarg);
Xioctl(fileno(stdin),TIOCSLTC,&oltarg);
X}
X
Xint have=0;
Xstatic unsigned char havec;
Xstatic int yep;
X
Xstatic dosig()
X{
Xyep=1;
X}
X
Xaflush()
X{
Xif(obufp)
X {
X struct itimerval a,b;
X unsigned long usec=obufp*ccc;
X if(usec>=500000/HZ)
X  {
X  a.it_value.tv_sec=usec/1000000;
X  a.it_value.tv_usec=usec%1000000;
X  a.it_interval.tv_usec=0;
X  a.it_interval.tv_sec=0;
X  signal(SIGALRM,dosig);
X  yep=0;
X  sigsetmask(sigmask(SIGALRM));
X  setitimer(ITIMER_REAL,&a,&b);
X  write(fileno(stdout),obuf,obufp);
X  while(!yep) sigpause(0);
X  signal(SIGALRM,SIG_DFL);
X  }
X else write(fileno(stdout),obuf,obufp);
X obufp=0;
X }
Xif(!have)
X {
X fcntl(fileno(stdin),F_SETFL,FNDELAY);
X if(read(fileno(stdin),&havec,1)==1) have=1;
X fcntl(fileno(stdin),F_SETFL,0);
X }
X}
X
Xunsigned char *take=0;
X
Xanext()
X{
Xif(take)
X if(*take)
X  {
X  int c;
X  if(*take!='\\') return *take++;
X  ++take;
X  if(!*take) return '\\';
X  else if(*take=='r') c='\r';
X  else if(*take=='b') c=8;
X  else if(*take=='n') c=10;
X  else if(*take=='f') c=12;
X  else if(*take=='a') c=7;
X  else if(*take=='\"') c='\"';
X  else if(*take>='0' && *take<='7')
X        {
X        c= *take++-'0';
X        if(*take>='0' && *take<='7')
X         {
X         c=c*8+*take++-'0';
X         if(*take>='0' && *take<='7') c=c*8+*take++-'0';
X         }
X        --take;
X        }
X  else c= *take;
X  ++take;
X  return c;
X  }
X else take=0;
Xaflush();
Xif(have) have=0;
Xelse if(read(fileno(stdin),&havec,1)<1) tsignal(0);
Xif(record) macroadd(havec);
Xreturn havec;
X}
X
Xeputc(c)
Xunsigned char c;
X{
Xobuf[obufp++]=c;
Xif(obufp==obufsiz) aflush();
X}
X
Xeputs(s)
Xchar *s;
X{
Xwhile(*s)
X {
X obuf[obufp++]= *(s++);
X if(obufp==obufsiz) aflush();
X }
X}
X
Xgetsize()
X{
X#ifdef TIOCGSIZE
Xstruct ttysize getit;
X#else
X#ifdef TIOCGWINSZ
Xstruct winsize getit;
X#else
Xchar *p;
X#endif
X#endif
X#ifdef TIOCGSIZE
Xif(ioctl(fileno(stdout),TIOCGSIZE,&getit)!= -1)
X {
X if(getit.ts_lines>=3) height=getit.ts_lines;
X if(getit.ts_cols>=2) width=getit.ts_cols;
X }
X#else
X#ifdef TIOCGWINSZ
Xif(ioctl(fileno(stdout),TIOCGWINSZ,&getit)!= -1)
X {
X if(getit.ws_row>=3) height=getit.ws_row;
X if(getit.ws_col>=2) width=getit.ws_col;
X }
X#else
Xif(p=getenv("ROWS")) sscanf(p,"%d",&height);
Xif(p=getenv("COLS")) sscanf(p,"%d",&width);
Xif(height<3) height=24;
Xif(width<2) width=80;
X#endif
X#endif
X}
X
Xtermtype()
X{
Xunsigned char entry[1024];
Xunsigned char area[1024];
Xunsigned char *foo=area;
Xunsigned char *x=(unsigned char *)getenv("TERM");
Xif(!x) goto down;
Xif(tgetent(entry,x)!=1) goto down;
Xheight=tgetnum("li");
Xif(height<3) height=24;
Xwidth=tgetnum("co");
Xif(width<2) width=80;
Xif(!tgetstr("cs",&foo)) scroll=0;
Xdown:
Xgetsize();
X}
X
Xshell()
X{
Xint x;
Xchar *s=(char *)getenv("SHELL");
Xif(!s)
X {
X puts("\nSHELL variable not set");
X return;
X }
Xeputs("\nYou are at the command shell.  Type 'exit' to continue editing\r\n");
Xaclose();
Xif(x=fork())
X {
X if(x!= -1) wait(0);
X }
Xelse
X {
X signorm();
X execl(s,s,0);
X _exit(0);
X }
Xaopen();
X}
X
Xsusp()
X{
X#ifdef SIGCONT
Xeputs("\nThe editor has been suspended.  Type 'fg' to continue editing\r\n");
Xyep=0;
Xaclose();
Xsignal(SIGCONT,dosig);
Xsigsetmask(sigmask(SIGCONT));
Xkill(0,SIGTSTP);
Xwhile(!yep) sigpause(0);
Xsignal(SIGCONT,SIG_DFL);
Xaopen();
X#else
Xshell();
X#endif
X}
END_OF_FILE
if test 6059 -ne `wc -c <'asyncbsd.c'`; then
    echo shar: \"'asyncbsd.c'\" unpacked with wrong size!
fi
# end of 'asyncbsd.c'
fi
if test -f 'asyncesix.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'asyncesix.c'\"
else
echo shar: Extracting \"'asyncesix.c'\" \(5418 characters\)
sed "s/^X//" >'asyncesix.c' <<'END_OF_FILE'
X/* Terminal interface for ESIX
X   Copyright (C) 1991 Joseph H. Allen
X
XThis file is part of JOE (Joe's Own Editor)
X
XJOE is free software; you can redistribute it and/or modify it under the terms
Xof the GNU General Public License as published by the Free Software
XFoundation; either version 1, or (at your option) any later version. 
X
XJOE is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
XA PARTICULAR PURPOSE.  See the GNU General Public License for more details.  
X
XYou should have received a copy of the GNU General Public License
Xalong with JOE; see the file COPYING.  If not, write to
Xthe Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
X
X#include <stdio.h>
X#include <signal.h>
X#include <fcntl.h>
X#include <sys/time.h>
X#include <sys/param.h>
X#include <termio.h>
X#include "async.h"
X
Xstruct winsize
X{
Xunsigned short ws_row;
Xunsigned short ws_col;
Xunsigned short ws_xpixel;
Xunsigned short ws_ypixel;
X};
X
X#define DIVISOR 12000000
X#define TIMES 2
X
Xstatic struct termio oldterm;
X
Xstatic unsigned char *obuf=0;
Xstatic unsigned obufp=0;
Xstatic unsigned obufsiz;
Xstatic unsigned long ccc;
X
Xstatic unsigned speeds[]=
X{
XB50,50,B75,75,B110,110,B134,134,B150,150,B200,200,B300,300,B600,600,B1200,1200,
XB1800,1800,B2400,2400,B4800,4800,B9600,9600,EXTA,19200,EXTB,38400
X};
X
Xvoid tsignal();
X
Xsigjoe()
X{
Xsignal(SIGHUP,tsignal);
Xsignal(SIGTERM,tsignal);
Xsignal(SIGINT,SIG_IGN);
Xsignal(SIGPIPE,SIG_IGN);
Xsignal(SIGQUIT,SIG_IGN);
X}
X
Xsignorm()
X{
Xsignal(SIGHUP,SIG_DFL);
Xsignal(SIGTERM,SIG_DFL);
Xsignal(SIGINT,SIG_DFL);
Xsignal(SIGPIPE,SIG_DFL);
Xsignal(SIGQUIT,SIG_DFL);
X}
X
Xaopen()
X{
Xint x;
Xstruct termio newterm;
Xfflush(stdout);
Xioctl(fileno(stdin),TCGETA,&oldterm);
Xnewterm=oldterm;
Xnewterm.c_lflag=0;
Xnewterm.c_iflag&=~(ICRNL|IGNCR|INLCR);
Xnewterm.c_oflag=0;
Xnewterm.c_cc[VMIN]=1;
Xnewterm.c_cc[VTIME]=0;
Xioctl(fileno(stdin),TCSETAW,&newterm);
Xccc=0;
Xfor(x=0;x!=30;x+=2)
X if((newterm.c_cflag&CBAUD)==speeds[x])
X  {
X  ccc=DIVISOR/speeds[x+1];
X  break;
X  }
Xif(obuf) free(obuf);
Xif(!(TIMES*ccc)) obufsiz=4096;
Xelse
X {
X obufsiz=1000000/(TIMES*ccc);
X if(obufsiz>4096) obufsiz=4096;
X }
Xif(!obufsiz) obufsiz=1;
Xobuf=(unsigned char *)malloc(obufsiz);
X}
X
Xaclose()
X{
Xaflush();
Xioctl(fileno(stdin),TCSETAW,&oldterm);
X}
X
Xint have=0;
Xstatic unsigned char havec;
Xstatic int yep;
X
Xstatic dosig()
X{
Xyep=1;
X}
X
Xaflush()
X{
Xif(obufp)
X {
X struct itimerval a,b;
X unsigned long usec=obufp*ccc;
X if(usec>=500000/10 /* HZ */)
X  {
X  a.it_value.tv_sec=usec/1000000;
X  a.it_value.tv_usec=usec%1000000;
X  a.it_interval.tv_usec=0;
X  a.it_interval.tv_sec=0;
X  signal(SIGALRM,dosig);
X  yep=0;
X  sigsetmask(sigmask(SIGALRM));
X  setitimer(ITIMER_REAL,&a,&b);
X  write(fileno(stdout),obuf,obufp);
X  while(!yep) sigpause(0);
X  signal(SIGALRM,SIG_DFL);
X  }
X else write(fileno(stdout),obuf,obufp);
X obufp=0;
X }
Xif(!have)
X {
X fcntl(fileno(stdin),F_SETFL,O_NDELAY);
X if(read(fileno(stdin),&havec,1)==1) have=1;
X fcntl(fileno(stdin),F_SETFL,0);
X }
X}
X
Xunsigned char *take=0;
X
Xanext()
X{
Xif(take)
X if(*take)
X  {
X  int c;
X  if(*take!='\\') return *take++;
X  ++take;
X  if(!*take) return '\\';
X  else if(*take=='r') c='\r';
X  else if(*take=='b') c=8;
X  else if(*take=='n') c=10;
X  else if(*take=='f') c=12;
X  else if(*take=='a') c=7;
X  else if(*take=='\"') c='\"';
X  else if(*take>='0' && *take<='7')
X        {
X        c= *take++-'0';
X        if(*take>='0' && *take<='7')
X         {
X         c=c*8+*take++-'0';
X         if(*take>='0' && *take<='7') c=c*8+*take++-'0';
X         }
X        --take;
X        }
X  else c= *take;
X  ++take;
X  return c;
X  }
X else take=0;
Xaflush();
Xif(have) have=0;
Xelse if(read(fileno(stdin),&havec,1)<1) tsignal(0);
Xif(record) macroadd(havec);
Xreturn havec;
X}
X
Xeputc(c)
Xunsigned char c;
X{
Xobuf[obufp++]=c;
Xif(obufp==obufsiz) aflush();
X}
X
Xeputs(s)
Xchar *s;
X{
Xwhile(*s)
X {
X obuf[obufp++]= *(s++);
X if(obufp==obufsiz) aflush();
X }
X}
X
Xgetsize()
X{
X#ifdef TIOCGSIZE
Xstruct ttysize getit;
X#else
X#ifdef TIOCGWINSZ
Xstruct winsize getit;
X#else
Xchar *p;
X#endif
X#endif
X#ifdef TIOCGSIZE
Xif(ioctl(fileno(stdout),TIOCGSIZE,&getit)!= -1)
X {
X if(getit.ts_lines>=3) height=getit.ts_lines;
X if(getit.ts_cols>=2) width=getit.ts_cols;
X }
X#else
X#ifdef TIOCGWINSZ
Xif(ioctl(fileno(stdout),TIOCGWINSZ,&getit)!= -1)
X {
X if(getit.ws_row>=3) height=getit.ws_row;
X if(getit.ws_col>=2) width=getit.ws_col;
X }
X#else
Xif(p=getenv("ROWS")) sscanf(p,"%d",&height);
Xif(p=getenv("COLS")) sscanf(p,"%d",&width);
Xif(height<3) height=24;
Xif(width<2) width=80;
X#endif
X#endif
X}
X
Xtermtype()
X{
Xunsigned char entry[1024];
Xunsigned char area[1024];
Xunsigned char *foo=area;
Xunsigned char *x=(unsigned char *)getenv("TERM");
Xif(!x) goto down;
Xif(tgetent(entry,x)!=1) goto down;
Xheight=tgetnum("li");
Xif(height<3) height=24;
Xwidth=tgetnum("co");
Xif(width<2) width=80;
Xif(!tgetstr("cs",&foo)) scroll=0;
Xdown:
Xgetsize();
X}
X
Xshell()
X{
Xint x;
Xchar *s=(char *)getenv("SHELL");
Xif(!s)
X {
X puts("\nSHELL variable not set");
X return;
X }
Xeputs("\nYou are at the command shell.  Type 'exit' to continue editing\r\n");
Xaclose();
Xif(x=fork())
X {
X if(x!= -1) wait(0);
X }
Xelse
X {
X signorm();
X execl(s,s,0);
X _exit(0);
X }
Xaopen();
X}
X
Xsusp()
X{
X#ifdef SIGCONT
Xeputs("\nThe editor has been suspended.  Type 'fg' to continue editing\r\n");
Xyep=0;
Xaclose();
Xsignal(SIGCONT,dosig);
Xsigsetmask(sigmask(SIGCONT));
Xkill(0,SIGTSTP);
Xwhile(!yep) sigpause(0);
Xsignal(SIGCONT,SIG_DFL);
Xaopen();
X#else
Xshell();
X#endif
X}
END_OF_FILE
if test 5418 -ne `wc -c <'asyncesix.c'`; then
    echo shar: \"'asyncesix.c'\" unpacked with wrong size!
fi
# end of 'asyncesix.c'
fi
if test -f 'asynchpux.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'asynchpux.c'\"
else
echo shar: Extracting \"'asynchpux.c'\" \(5295 characters\)
sed "s/^X//" >'asynchpux.c' <<'END_OF_FILE'
X/* Terminal interface for HPUX
X   Copyright (C) 1991 Joseph H. Allen
X
XThis file is part of JOE (Joe's Own Editor)
X
XJOE is free software; you can redistribute it and/or modify it under the terms
Xof the GNU General Public License as published by the Free Software
XFoundation; either version 1, or (at your option) any later version. 
X
XJOE is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
XA PARTICULAR PURPOSE.  See the GNU General Public License for more details.  
X
XYou should have received a copy of the GNU General Public License
Xalong with JOE; see the file COPYING.  If not, write to
Xthe Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
X
X#include <stdio.h>
X#include <signal.h>
X#include <fcntl.h>
X#include <time.h>
X#include <sys/param.h>
X#include <termio.h>
X#include "async.h"
X
X#define DIVISOR 12000000
X#define TIMES 2
X
Xstatic struct termio oldterm;
X
Xstatic unsigned char *obuf=0;
Xstatic unsigned obufp=0;
Xstatic unsigned obufsiz;
Xstatic unsigned long ccc;
X
Xstatic unsigned speeds[]=
X{
XB50,50,B75,75,B110,110,B134,134,B150,150,B200,200,B300,300,B600,600,B1200,1200,
XB1800,1800,B2400,2400,B4800,4800,B9600,9600,EXTA,19200,EXTB,38400
X};
X
Xvoid tsignal();
X
Xsigjoe()
X{
Xsignal(SIGHUP,tsignal);
Xsignal(SIGTERM,tsignal);
Xsignal(SIGINT,SIG_IGN);
Xsignal(SIGPIPE,SIG_IGN);
Xsignal(SIGQUIT,SIG_IGN);
X}
X
Xsignorm()
X{
Xsignal(SIGHUP,SIG_DFL);
Xsignal(SIGTERM,SIG_DFL);
Xsignal(SIGINT,SIG_DFL);
Xsignal(SIGPIPE,SIG_DFL);
Xsignal(SIGQUIT,SIG_DFL);
X}
X
Xaopen()
X{
Xint x;
Xstruct termio newterm;
Xfflush(stdout);
Xioctl(fileno(stdin),TCGETA,&oldterm);
Xnewterm=oldterm;
Xnewterm.c_lflag=0;
Xnewterm.c_iflag&=~(ICRNL|IGNCR|INLCR);
Xnewterm.c_oflag=0;
Xnewterm.c_cc[VMIN]=1;
Xnewterm.c_cc[VTIME]=0;
Xioctl(fileno(stdin),TCSETAW,&newterm);
Xccc=0;
Xfor(x=0;x!=30;x+=2)
X if((newterm.c_cflag&CBAUD)==speeds[x])
X  {
X  ccc=DIVISOR/speeds[x+1];
X  break;
X  }
Xif(obuf) free(obuf);
Xif(!(TIMES*ccc)) obufsiz=4096;
Xelse
X {
X obufsiz=1000000/(TIMES*ccc);
X if(obufsiz>4096) obufsiz=4096;
X }
Xif(!obufsiz) obufsiz=1;
Xobuf=(unsigned char *)malloc(obufsiz);
X}
X
Xaclose()
X{
Xaflush();
Xioctl(fileno(stdin),TCSETAW,&oldterm);
X}
X
Xint have=0;
Xstatic unsigned char havec;
Xstatic int yep;
X
Xstatic dosig()
X{
Xyep=1;
X}
X
Xaflush()
X{
Xif(obufp)
X {
X struct itimerval a,b;
X unsigned long usec=obufp*ccc;
X if(usec>=500000/10 /* HZ */)
X  {
X  a.it_value.tv_sec=usec/1000000;
X  a.it_value.tv_usec=usec%1000000;
X  a.it_interval.tv_usec=0;
X  a.it_interval.tv_sec=0;
X  signal(SIGALRM,dosig);
X  yep=0;
X  sigsetmask(sigmask(SIGALRM));
X  setitimer(ITIMER_REAL,&a,&b);
X  write(fileno(stdout),obuf,obufp);
X  while(!yep) sigpause(0);
X  signal(SIGALRM,SIG_DFL);
X  }
X else write(fileno(stdout),obuf,obufp);
X obufp=0;
X }
Xif(!have)
X {
X fcntl(fileno(stdin),F_SETFL,O_NDELAY);
X if(read(fileno(stdin),&havec,1)==1) have=1;
X fcntl(fileno(stdin),F_SETFL,0);
X }
X}
X
Xunsigned char *take=0;
X
Xanext()
X{
Xif(take)
X if(*take)
X  {
X  int c;
X  if(*take!='\\') return *take++;
X  ++take;
X  if(!*take) return '\\';
X  else if(*take=='r') c='\r';
X  else if(*take=='b') c=8;
X  else if(*take=='n') c=10;
X  else if(*take=='f') c=12;
X  else if(*take=='a') c=7;
X  else if(*take=='\"') c='\"';
X  else if(*take>='0' && *take<='7')
X        {
X        c= *take++-'0';
X        if(*take>='0' && *take<='7')
X         {
X         c=c*8+*take++-'0';
X         if(*take>='0' && *take<='7') c=c*8+*take++-'0';
X         }
X        --take;
X        }
X  else c= *take;
X  ++take;
X  return c;
X  }
X else take=0;
Xaflush();
Xif(have) have=0;
Xelse if(read(fileno(stdin),&havec,1)<1) tsignal(0);
Xif(record) macroadd(havec);
Xreturn havec;
X}
X
Xeputc(c)
Xunsigned char c;
X{
Xobuf[obufp++]=c;
Xif(obufp==obufsiz) aflush();
X}
X
Xeputs(s)
Xchar *s;
X{
Xwhile(*s)
X {
X obuf[obufp++]= *(s++);
X if(obufp==obufsiz) aflush();
X }
X}
X
Xgetsize()
X{
X#ifdef TIOCGSIZE
Xstruct ttysize getit;
X#else
X#ifdef TIOCGWINSZ
Xstruct winsize getit;
X#else
Xchar *p;
X#endif
X#endif
X#ifdef TIOCGSIZE
Xif(ioctl(fileno(stdout),TIOCGSIZE,&getit)!= -1)
X {
X if(getit.ts_lines>=3) height=getit.ts_lines;
X if(getit.ts_cols>=2) width=getit.ts_cols;
X }
X#else
X#ifdef TIOCGWINSZ
Xif(ioctl(fileno(stdout),TIOCGWINSZ,&getit)!= -1)
X {
X if(getit.ws_row>=3) height=getit.ws_row;
X if(getit.ws_col>=2) width=getit.ws_col;
X }
X#else
Xif(p=getenv("ROWS")) sscanf(p,"%d",&height);
Xif(p=getenv("COLS")) sscanf(p,"%d",&width);
Xif(height<3) height=24;
Xif(width<2) width=80;
X#endif
X#endif
X}
X
Xtermtype()
X{
Xunsigned char entry[1024];
Xunsigned char area[1024];
Xunsigned char *foo=area;
Xunsigned char *x=(unsigned char *)getenv("TERM");
Xif(!x) goto down;
Xif(tgetent(entry,x)!=1) goto down;
Xheight=tgetnum("li");
Xif(height<3) height=24;
Xwidth=tgetnum("co");
Xif(width<2) width=80;
Xif(!tgetstr("cs",&foo)) scroll=0;
Xdown:
Xgetsize();
X}
X
Xshell()
X{
Xint x;
Xchar *s=(char *)getenv("SHELL");
Xif(!s)
X {
X puts("\nSHELL variable not set");
X return;
X }
Xeputs("\nYou are at the command shell.  Type 'exit' to continue editing\r\n");
Xaclose();
Xif(x=fork())
X {
X if(x!= -1) wait(0);
X }
Xelse
X {
X signorm();
X execl(s,s,0);
X _exit(0);
X }
Xaopen();
X}
X
Xsusp()
X{
X#ifdef SIGCONT
Xeputs("\nThe editor has been suspended.  Type 'fg' to continue editing\r\n");
Xyep=0;
Xaclose();
Xsignal(SIGCONT,dosig);
Xsigsetmask(sigmask(SIGCONT));
Xkill(0,SIGTSTP);
Xwhile(!yep) sigpause(0);
Xsignal(SIGCONT,SIG_DFL);
Xaopen();
X#else
Xshell();
X#endif
X}
END_OF_FILE
if test 5295 -ne `wc -c <'asynchpux.c'`; then
    echo shar: \"'asynchpux.c'\" unpacked with wrong size!
fi
# end of 'asynchpux.c'
fi
if test -f 'asynclinux.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'asynclinux.c'\"
else
echo shar: Extracting \"'asynclinux.c'\" \(5357 characters\)
sed "s/^X//" >'asynclinux.c' <<'END_OF_FILE'
X/* Terminal interface for POSIX
X   Copyright (C) 1991 Joseph H. Allen
X   (Contributed by Mike Lijewski)
X
XThis file is part of JOE (Joe's Own Editor)
X
XJOE is free software; you can redistribute it and/or modify it under the terms
Xof the GNU General Public License as published by the Free Software
XFoundation; either version 1, or (at your option) any later version.  
X
XJOE is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
XA PARTICULAR PURPOSE.  See the GNU General Public License for more details.  
X
XYou should have received a copy of the GNU General Public License along with
XJOE; see the file COPYING.  If not, write to the Free Software Foundation, 675
XMass Ave, Cambridge, MA 02139, USA.  */ 
X
X#include <stdio.h>
X#include <signal.h>
X#include <fcntl.h>
X#include <sys/time.h>
X#include <termios.h>
X#include <unistd.h>
X#include "async.h"
X
Xvoid tsignal();
X#define DIVISOR 12000000
X#define TIMES 2
X
Xstatic struct termios oldterm;
X
Xstatic unsigned char *obuf=0;
Xstatic unsigned obufp=0;
Xstatic unsigned obufsiz;
Xstatic unsigned long ccc;
X
Xstatic speed_t speeds[]=
X{
XB50,50,B75,75,B110,110,B134,134,B150,150,B200,200,B300,300,B600,600,B1200,1200,
XB1800,1800,B2400,2400,B4800,4800,B9600,9600,EXTA,19200,EXTB,38400,B19200,19200,
XB38400,38400
X};
X
Xsigjoe()
X{
Xsignal(SIGHUP,tsignal);
Xsignal(SIGTERM,tsignal);
Xsignal(SIGPIPE,SIG_IGN);
Xsignal(SIGINT,SIG_IGN);
Xsignal(SIGQUIT,SIG_IGN);
X}
X
Xsignorm()
X{
Xsignal(SIGHUP,SIG_DFL);
Xsignal(SIGTERM,SIG_DFL);
Xsignal(SIGQUIT,SIG_DFL);
Xsignal(SIGPIPE,SIG_DFL);
Xsignal(SIGINT,SIG_DFL);
X}
X
Xaopen()
X{
Xint x;
Xspeed_t baud;
Xstruct termios newterm;
Xfflush(stdout);
X/* tcdrain(STDOUT_FILENO); */
Xtcgetattr(STDIN_FILENO,&oldterm);
Xnewterm=oldterm;
Xnewterm.c_lflag&=0;
Xnewterm.c_iflag&=~(ICRNL|IGNCR|INLCR);
Xnewterm.c_oflag&=0;
Xnewterm.c_cc[VMIN]=1;
Xnewterm.c_cc[VTIME]=0;
Xtcsetattr(STDIN_FILENO,TCSANOW,&newterm);
Xccc=0;
Xbaud=cfgetospeed(&newterm);
Xfor(x=0;x!=34;x+=2)
X if(baud==speeds[x])
X  {
X  ccc=DIVISOR/speeds[x+1];
X  break;
X  }
Xif(obuf) free(obuf);
Xif(!(TIMES*ccc)) obufsiz=4096;
Xelse
X {
X obufsiz=1000000/(TIMES*ccc);
X if(obufsiz>4096) obufsiz=4096;
X }
Xif(!obufsiz) obufsiz=1;
Xobuf=(unsigned char *)malloc(obufsiz);
X}
X
Xaclose()
X{
Xaflush();
Xtcsetattr(STDIN_FILENO,TCSANOW,&oldterm);
X}
X
Xint have=0;
Xstatic unsigned char havec;
Xstatic int yep;
X
Xstatic void dosig()
X{
Xyep=1;
X}
X
Xaflush()
X{
Xif(obufp)
X {
X unsigned long usec=obufp*ccc;
X if(usec>=500000/10  /* HZ */)
X  {
X  /* well there's no point in doing this since...
X  struct timeval timeval;
X  timeval.tv_sec=usec/1000000;
X  timeval.tv_usec=usec%1000000; */
X  write(fileno(stdout),obuf,obufp);
X  /*
X  select(0,0,0,0,&timeval); */
X  }
X else write(fileno(stdout),obuf,obufp);
X obufp=0;
X }
Xif(!have)
X {/* this doesn't work
X fcntl(STDIN_FILENO,F_SETFL,O_NDELAY);
X if(read(STDIN_FILENO,&havec,1)==1) have=1;
X fcntl(STDIN_FILENO,F_SETFL,0); */
X }
X}
X
Xunsigned char *take=0;
X
Xanext()
X{
Xif(take)
X if(*take)
X  {
X  int c;
X  if(*take!='\\') return *take++;
X  ++take;
X  if(!*take) return '\\';
X  else if(*take=='r') c='\r';
X  else if(*take=='b') c=8;
X  else if(*take=='n') c=10;
X  else if(*take=='f') c=12;
X  else if(*take=='a') c=7;
X  else if(*take=='\"') c='\"';
X  else if(*take>='0' && *take<='7')
X        {
X        c= *take++-'0';
X        if(*take>='0' && *take<='7')
X         {
X         c=c*8+*take++-'0';
X         if(*take>='0' && *take<='7') c=c*8+*take++-'0';
X         }
X        --take;
X        }
X  else c= *take;
X  ++take;
X  return c;
X  }
X else take=0;
Xaflush();
Xif(have) have=0;
Xelse if(read(STDIN_FILENO,&havec,1)<1) tsignal(0);
Xif(record) macroadd(havec);
Xreturn havec;
X}
X
Xeputc(c)
Xunsigned char c;
X{
Xobuf[obufp++]=c;
Xif(obufp==obufsiz) aflush();
X}
X
Xeputs(s)
Xchar *s;
X{
Xwhile(*s)
X {
X obuf[obufp++]= *(s++);
X if(obufp==obufsiz) aflush();
X }
X}
X
Xgetsize()
X{
X#ifdef TIOCGSIZE
Xstruct ttysize getit;
X#else
X#ifdef TIOCGWINSZ
Xstruct winsize getit;
X#else
Xchar *p;
X#endif
X#endif
X#ifdef TIOCGSIZE
Xif(ioctl(fileno(stdout),TIOCGSIZE,&getit)!= -1)
X {
X if(getit.ts_lines>=3) height=getit.ts_lines;
X if(getit.ts_cols>=2) width=getit.ts_cols;
X }
X#else
X#ifdef TIOCGWINSZ
Xif(ioctl(fileno(stdout),TIOCGWINSZ,&getit)!= -1)
X {
X if(getit.ws_row>=3) height=getit.ws_row;
X if(getit.ws_col>=2) width=getit.ws_col;
X }
X#else
Xif(p=getenv("ROWS")) sscanf(p,"%d",&height);
Xif(p=getenv("COLS")) sscanf(p,"%d",&width);
Xif(height<3) height=24;
Xif(width<2) width=80;
X#endif
X#endif
X}
X
Xtermtype()
X{
Xunsigned char entry[1024];
Xunsigned char area[1024];
Xunsigned char *foo=area;
Xunsigned char *x=(unsigned char *)getenv("TERM");
Xif(!x) goto down;
Xif(tgetent(entry,x)!=1) goto down;
Xheight=tgetnum("li");
Xif(height<3) height=24;
Xwidth=tgetnum("co");
Xif(width<2) width=80;
Xif(!tgetstr("cs",&foo)) scroll=0;
Xdown:
Xgetsize();
X}
X
Xshell()
X{
Xint x;
Xchar *s=(char *)getenv("SHELL");
Xif(!s)
X {
X puts("\nSHELL variable not set");
X return;
X }
Xeputs("\nYou are at the command shell.  Type 'exit' to continue editing\r\n");
Xaclose();
Xif(x=fork())
X {
X if(x!= -1) wait(0);
X }
Xelse
X {
X signorm();
X execl(s,s,0);
X _exit(0);
X }
Xaopen();
X}
X
Xsusp()
X{
X#ifdef SIGCONT
Xeputs("\nThe editor has been suspended.  Type 'fg' to continue editing\r\n");
Xyep=0;
Xaclose();
Xsignal(SIGCONT,dosig);
X/* sigsetmask(sigmask(SIGCONT)); */
Xkill(0,SIGTSTP);
X/* while(!yep) sigpause(0); */
Xwhile(!yep) pause();
Xsignal(SIGCONT,SIG_DFL);
Xaopen();
X#else
Xshell();
X#endif
X}
END_OF_FILE
if test 5357 -ne `wc -c <'asynclinux.c'`; then
    echo shar: \"'asynclinux.c'\" unpacked with wrong size!
fi
# end of 'asynclinux.c'
fi
if test -f 'asyncposix.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'asyncposix.c'\"
else
echo shar: Extracting \"'asyncposix.c'\" \(5603 characters\)
sed "s/^X//" >'asyncposix.c' <<'END_OF_FILE'
X/* Terminal interface for POSIX
X   Copyright (C) 1991 Joseph H. Allen
X   (Contributed by Mike Lijewski)
X
XThis file is part of JOE (Joe's Own Editor)
X
XJOE is free software; you can redistribute it and/or modify it under the terms
Xof the GNU General Public License as published by the Free Software
XFoundation; either version 1, or (at your option) any later version.  
X
XJOE is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
XA PARTICULAR PURPOSE.  See the GNU General Public License for more details.  
X
XYou should have received a copy of the GNU General Public License along with
XJOE; see the file COPYING.  If not, write to the Free Software Foundation, 675
XMass Ave, Cambridge, MA 02139, USA.  */ 
X
X#include <stdio.h>
X#include <signal.h>
X#include <fcntl.h>
X#include <sys/time.h>
X#include <sys/param.h>
X#include <termios.h>
X#include <unistd.h>
X#include "async.h"
X
Xvoid tsignal();
X#define DIVISOR 12000000
X#define TIMES 2
X
Xstatic struct termios oldterm;
X
Xstatic unsigned char *obuf=0;
Xstatic unsigned obufp=0;
Xstatic unsigned obufsiz;
Xstatic unsigned long ccc;
X
Xstatic speed_t speeds[]=
X{
XB50,50,B75,75,B110,110,B134,134,B150,150,B200,200,B300,300,B600,600,B1200,1200,
XB1800,1800,B2400,2400,B4800,4800,B9600,9600,EXTA,19200,EXTB,38400,B19200,19200,
XB38400,38400
X};
X
Xesignal(a,b)
Xvoid (*b)();
X{
Xstruct sigaction action;
Xsigemptyset(&actions.sa_mask);
Xaction.sa_handler=b;
Xsigaction(a,&action,NULL);
X}
X
Xsigjoe()
X{
Xesignal(SIGHUP,tsignal);
Xesignal(SIGTERM,tsignal);
Xesignal(SIGPIPE,SIG_IGN);
Xesignal(SIGINT,SIG_IGN);
Xesignal(SIGQUIT,SIG_IGN);
X}
X
Xsignorm()
X{
Xesignal(SIGHUP,SIG_DFL);
Xesignal(SIGTERM,SIG_DFL);
Xesignal(SIGQUIT,SIG_DFL);
Xesignal(SIGPIPE,SIG_DFL);
Xesignal(SIGINT,SIG_DFL);
X}
X
Xaopen()
X{
Xint x;
Xspeed_t baud;
Xstruct termios newterm;
Xfflush(stdout);
Xtcdrain(STDOUT_FILENO);
Xtcgetattr(STDIN_FILENO,&oldterm);
Xnewterm=oldterm;
Xnewterm.c_lflag&=0;
Xnewterm.c_iflag&=~(ICRNL|IGNCR|INLCR);
Xnewterm.c_oflag&=0;
Xnewterm.c_cc[VMIN]=1;
Xnewterm.c_cc[VTIME]=0;
Xtcsetattr(STDIN_FILENO,TCSANOW,&newterm);
Xccc=0;
Xbaud=cfgetospeed(&newterm);
Xfor(x=0;x!=34;x+=2)
X if(baud==speeds[x])
X  {
X  ccc=DIVISOR/speeds[x+1];
X  break;
X  }
Xif(obuf) free(obuf);
Xif(!(TIMES*ccc)) obufsiz=4096;
Xelse
X {
X obufsiz=1000000/(TIMES*ccc);
X if(obufsiz>4096) obufsiz=4096;
X }
Xif(!obufsiz) obufsiz=1;
Xobuf=(unsigned char *)malloc(obufsiz);
X}
X
Xaclose()
X{
Xaflush();
Xtcsetattr(STDIN_FILENO,TCSANOW,&oldterm);
X}
X
Xint have=0;
Xstatic unsigned char havec;
Xstatic int yep;
X
Xstatic void dosig()
X{
Xyep=1;
X}
X
Xaflush()
X{
Xif(obufp)
X {
X struct itimerval a,b;
X unsigned long usec=obufp*ccc;
X if(usec>=500000/HZ)
X  {
X  a.it_value.tv_sec=usec/1000000;
X  a.it_value.tv_usec=usec%1000000;
X  a.it_interval.tv_usec=0;
X  a.it_interval.tv_sec=0;
X  action.sa_handler=dosig;
X  esignal(SIGALRM,dosig);
X  yep=0;
X  sigsetmask(sigmask(SIGALRM));
X  setitimer(ITIMER_REAL,&a,&b);
X  write(fileno(stdout),obuf,obufp);
X  while(!yep) sigpause(0);
X  esignal(SIGALRM,SIG_DFL);
X  }
X else write(fileno(stdout),obuf,obufp);
X obufp=0;
X }
Xif(!have)
X {
X fcntl(STDIN_FILENO,F_SETFL,O_NDELAY);
X if(read(STDIN_FILENO,&havec,1)==1) have=1;
X fcntl(STDIN_FILENO,F_SETFL,0);
X }
X}
X
Xunsigned char *take=0;
X
Xanext()
X{
Xif(take)
X if(*take)
X  {
X  int c;
X  if(*take!='\\') return *take++;
X  ++take;
X  if(!*take) return '\\';
X  else if(*take=='r') c='\r';
X  else if(*take=='b') c=8;
X  else if(*take=='n') c=10;
X  else if(*take=='f') c=12;
X  else if(*take=='a') c=7;
X  else if(*take=='\"') c='\"';
X  else if(*take>='0' && *take<='7')
X        {
X        c= *take++-'0';
X        if(*take>='0' && *take<='7')
X         {
X         c=c*8+*take++-'0';
X         if(*take>='0' && *take<='7') c=c*8+*take++-'0';
X         }
X        --take;
X        }
X  else c= *take;
X  ++take;
X  return c;
X  }
X else take=0;
Xaflush();
Xif(have) have=0;
Xelse if(read(STDIN_FILENO,&havec,1)<1) tsignal(0);
Xif(record) macroadd(havec);
Xreturn havec;
X}
X
Xeputc(c)
Xunsigned char c;
X{
Xobuf[obufp++]=c;
Xif(obufp==obufsiz) aflush();
X}
X
Xeputs(s)
Xchar *s;
X{
Xwhile(*s)
X {
X obuf[obufp++]= *(s++);
X if(obufp==obufsiz) aflush();
X }
X}
X
Xgetsize()
X{
X#ifdef TIOCGSIZE
Xstruct ttysize getit;
X#else
X#ifdef TIOCGWINSZ
Xstruct winsize getit;
X#else
Xchar *p;
X#endif
X#endif
X#ifdef TIOCGSIZE
Xif(ioctl(fileno(stdout),TIOCGSIZE,&getit)!= -1)
X {
X if(getit.ts_lines>=3) height=getit.ts_lines;
X if(getit.ts_cols>=2) width=getit.ts_cols;
X }
X#else
X#ifdef TIOCGWINSZ
Xif(ioctl(fileno(stdout),TIOCGWINSZ,&getit)!= -1)
X {
X if(getit.ws_row>=3) height=getit.ws_row;
X if(getit.ws_col>=2) width=getit.ws_col;
X }
X#else
Xif(p=getenv("ROWS")) sscanf(p,"%d",&height);
Xif(p=getenv("COLS")) sscanf(p,"%d",&width);
Xif(height<3) height=24;
Xif(width<2) width=80;
X#endif
X#endif
X}
X
Xtermtype()
X{
Xunsigned char entry[1024];
Xunsigned char area[1024];
Xunsigned char *foo=area;
Xunsigned char *x=(unsigned char *)getenv("TERM");
Xif(!x) goto down;
Xif(tgetent(entry,x)!=1) goto down;
Xheight=tgetnum("li");
Xif(height<3) height=24;
Xwidth=tgetnum("co");
Xif(width<2) width=80;
Xif(!tgetstr("cs",&foo)) scroll=0;
Xdown:
Xgetsize();
X}
X
Xshell()
X{
Xint x;
Xchar *s=(char *)getenv("SHELL");
Xif(!s)
X {
X puts("\nSHELL variable not set");
X return;
X }
Xeputs("\nYou are at the command shell.  Type 'exit' to continue editing\r\n");
Xaclose();
Xif(x=fork())
X {
X if(x!= -1) wait(0);
X }
Xelse
X {
X signorm();
X execl(s,s,0);
X _exit(0);
X }
Xaopen();
X}
X
Xsusp()
X{
X#ifdef SIGCONT
Xeputs("\nThe editor has been suspended.  Type 'fg' to continue editing\r\n");
Xyep=0;
Xaclose();
Xesignal(SIGCONT,dosig);
Xsigsetmask(sigmask(SIGCONT));
Xkill(0,SIGTSTP);
Xwhile(!yep) sigpause(0);
Xesignal(SIGCONT,SIG_DFL);
Xaopen();
X#else
Xshell();
X#endif
X}
END_OF_FILE
if test 5603 -ne `wc -c <'asyncposix.c'`; then
    echo shar: \"'asyncposix.c'\" unpacked with wrong size!
fi
# end of 'asyncposix.c'
fi
if test -f 'asyncxenix.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'asyncxenix.c'\"
else
echo shar: Extracting \"'asyncxenix.c'\" \(4419 characters\)
sed "s/^X//" >'asyncxenix.c' <<'END_OF_FILE'
X/* Terminal interface for XENIX
X   Copyright (C) 1991 Joseph H. Allen
X
XThis file is part of JOE (Joe's Own Editor)
X
XJOE is free software; you can redistribute it and/or modify it under the terms
Xof the GNU General Public License as published by the Free Software
XFoundation; either version 1, or (at your option) any later version. 
X
XJOE is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
XA PARTICULAR PURPOSE.  See the GNU General Public License for more details.  
X
XYou should have received a copy of the GNU General Public License
Xalong with JOE; see the file COPYING.  If not, write to
Xthe Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
X
X#include <stdio.h>
X#include <signal.h>
X#include <termio.h>
X#include "async.h"
X
X#define DIVISOR 12000
X#define TIMES 2
X
Xstatic struct termio oldterm;
X
Xstatic unsigned char *obuf=0;
Xstatic unsigned obufp=0;
Xstatic unsigned obufsiz;
Xstatic unsigned long ccc;
X
Xstatic unsigned speeds[]=
X{
XB50,50,B75,75,B110,110,B134,134,B150,150,B200,200,B300,300,B600,600,B1200,1200,
XB1800,1800,B2400,2400,B4800,4800,B9600,9600,EXTA,19200,EXTB,38400
X};
X
Xvoid tsignal();
X
Xsigjoe()
X{
Xsignal(SIGHUP,tsignal);
Xsignal(SIGTERM,tsignal);
Xsignal(SIGINT,SIG_IGN);
Xsignal(SIGPIPE,SIG_IGN);
Xsignal(SIGQUIT,SIG_IGN);
X}
X
Xsignorm()
X{
Xsignal(SIGHUP,SIG_DFL);
Xsignal(SIGTERM,SIG_DFL);
Xsignal(SIGQUIT,SIG_DFL);
Xsignal(SIGINT,SIG_DFL);
Xsignal(SIGPIPE,SIG_DFL);
X}
X
Xaopen()
X{
Xint x;
Xstruct termio newterm;
Xfflush(stdout);
Xioctl(fileno(stdin),TCGETA,&oldterm);
Xnewterm=oldterm;
Xnewterm.c_lflag=0;
Xnewterm.c_iflag&=~(ICRNL|IGNCR|INLCR);
Xnewterm.c_oflag=0;
Xnewterm.c_cc[VMIN]=1;
Xnewterm.c_cc[VTIME]=0;
Xioctl(fileno(stdin),TCSETAW,&newterm);
Xccc=0;
Xfor(x=0;x!=30;x+=2)
X if((newterm.c_cflag&CBAUD)==speeds[x])
X  {
X  ccc=DIVISOR/speeds[x+1];
X  break;
X  }
Xif(obuf) free(obuf);
Xif(!(TIMES*ccc)) obufsiz=4096;
Xelse
X {
X obufsiz=1000/(TIMES*ccc);
X if(obufsiz>4096) obufsiz=4096;
X }
Xif(!obufsiz) obufsiz=1;
Xobuf=(unsigned char *)malloc(obufsiz);
X}
X
Xaclose()
X{
Xaflush();
Xioctl(fileno(stdin),TCSETAW,&oldterm);
X}
X
Xint have=0;
X
Xaflush()
X{
Xif(obufp)
X {
X write(fileno(stdout),obuf,obufp);
X nap(obufp*ccc);
X obufp=0;
X }
Xif(!have) if(rdchk(fileno(stdin))>0) have=1;
X}
X
Xunsigned char *take=0;
X
Xanext()
X{
Xunsigned char c;
Xif(take)
X if(*take)
X  {
X  int c;
X  if(*take!='\\') return *take++;
X  ++take;
X  if(!*take) return '\\';
X  else if(*take=='r') c='\r';
X  else if(*take=='b') c=8;
X  else if(*take=='n') c=10;
X  else if(*take=='f') c=12;
X  else if(*take=='a') c=7;
X  else if(*take=='\"') c='\"';
X  else if(*take>='0' && *take<='7')
X        {
X        c= *take++-'0';
X        if(*take>='0' && *take<='7')
X         {
X         c=c*8+*take++-'0';
X         if(*take>='0' && *take<='7') c=c*8+*take++-'0';
X         }
X        --take;
X        }
X  else c= *take;
X  ++take;
X  return c;
X  }
X else take=0;
Xaflush();
Xif(read(fileno(stdin),&c,1)<1) tsignal(0);
Xhave=0;
Xif(record) macroadd(c);
Xreturn c;
X}
X
Xeputc(c)
Xunsigned char c;
X{
Xobuf[obufp++]=c;
Xif(obufp==obufsiz) aflush();
X}
X
Xeputs(s)
Xchar *s;
X{
Xwhile(*s)
X {
X obuf[obufp++]= *(s++);
X if(obufp==obufsiz) aflush();
X }
X}
X
Xgetsize()
X{
X#ifdef TIOCGSIZE
Xstruct ttysize getit;
X#else
X#ifdef TIOCGWINSZ
Xstruct winsize getit;
X#else
Xchar *p;
X#endif
X#endif
X#ifdef TIOCGSIZE
Xif(ioctl(fileno(stdout),TIOCGSIZE,&getit)!= -1)
X {
X if(getit.ts_lines>=3) height=getit.ts_lines;
X if(getit.ts_cols>=2) width=getit.ts_cols;
X }
X#else
X#ifdef TIOCGWINSZ
Xif(ioctl(fileno(stdout),TIOCGWINSZ,&getit)!= -1)
X {
X if(getit.ws_row>=3) height=getit.ws_row;
X if(getit.ws_col>=2) width=getit.ws_col;
X }
X#else
Xif(p=getenv("ROWS")) sscanf(p,"%d",&height);
Xif(p=getenv("COLS")) sscanf(p,"%d",&width);
Xif(height<3) height=24;
Xif(width<2) width=80;
X#endif
X#endif
X}
X
Xtermtype()
X{
Xunsigned char entry[1024];
Xunsigned char area[1024];
Xunsigned char *foo=area;
Xunsigned char *x=(unsigned char *)getenv("TERM");
Xif(!x) goto down;
Xif(tgetent(entry,x)!=1) goto down;
Xheight=tgetnum("li");
Xif(height<3) height=24;
Xwidth=tgetnum("co");
Xif(width<2) width=80;
Xif(!tgetstr("cs",&foo)) scroll=0;
Xdown:
Xgetsize();
X}
X
Xshell()
X{
Xint x;
Xchar *s=(char *)getenv("SHELL");
Xif(!s)
X {
X puts("\nSHELL variable not set");
X return;
X }
Xeputs("\nYou are at the command shell.  Type 'exit' to continue editing\r\n");
Xaclose();
Xif(x=fork())
X {
X if(x!= -1) wait(0);
X }
Xelse
X {
X signorm();
X execl(s,s,0);
X _exit(0);
X }
Xaopen();
X}
X
Xsusp()
X{
Xshell();
X}
END_OF_FILE
if test 4419 -ne `wc -c <'asyncxenix.c'`; then
    echo shar: \"'asyncxenix.c'\" unpacked with wrong size!
fi
# end of 'asyncxenix.c'
fi
if test -f 'blocks.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'blocks.c'\"
else
echo shar: Extracting \"'blocks.c'\" \(3092 characters\)
sed "s/^X//" >'blocks.c' <<'END_OF_FILE'
X/* Various memory block functions
X   Copyright (C) 1991 Joseph H. Allen
X
XThis file is part of JOE (Joe's Own Editor)
X
XJOE is free software; you can redistribute it and/or modify it under the terms
Xof the GNU General Public License as published by the Free Software
XFoundation; either version 1, or (at your option) any later version.  
X
XJOE is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
XA PARTICULAR PURPOSE.  See the GNU General Public License for more details.  
X
XYou should have received a copy of the GNU General Public License
Xalong with JOE; see the file COPYING.  If not, write to
Xthe Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
X
X
X#include "blocks.h"
X
X/* Set block to zero */
X
Xunsigned char *bzero(bk,sz)
Xunsigned char *bk;
X{
Xunsigned char *b=bk-1;
Xif(sz) do b[sz]=0; while(--sz);
Xreturn bk;
X}
X
X/* Set block to unsigned character */
X
Xunsigned char *bset(bk,sz,c)
Xunsigned char *bk;
Xunsigned char c;
X{
Xunsigned char *b=bk-1;
Xif(sz) do b[sz]=c; while(--sz);
Xreturn bk;
X}
X
X/* Move a possibly overlapping block of memory without loosing any data */
X
Xunsigned char *bmove(dst,src,sz)
Xunsigned char *dst;
Xunsigned char *src;
X{
Xif(src==dst || !sz) return dst;
Xif(src>dst)
X {
X unsigned x=0;
X do dst[x]=src[x]; while(++x, --sz);
X }
Xelse
X {
X unsigned char *d=dst-1;
X --src;
X do d[sz]=src[sz]; while(--sz);
X } 
Xreturn dst;
X}
X
X/* Move a block in the forward direction */
X
Xunsigned char *bfwrd(dst,src,sz)
Xunsigned char *dst;
Xunsigned char *src;
X{
Xif(src!=dst && sz)
X {
X unsigned x=0;
X do dst[x]=src[x]; while(++x,--sz);
X }
Xreturn dst;
X}
X
X/* Move a block in the backward direction */
X
Xunsigned char *bbkwd(dst,src,sz)
Xunsigned char *dst;
Xunsigned char *src;
X{
Xunsigned char *s=src-1, *d=dst-1;
Xif(s!=d && sz) do d[sz]=s[sz]; while(--sz);
Xreturn dst;
X}
X
Xunsigned umin(a,b)
Xunsigned a,b;
X{
Xreturn (a>b)?b:a;
X}
X
Xunsigned umax(a,b)
Xunsigned a,b;
X{
Xreturn (a>b)?a:b;
X}
X
Xint min(a,b)
X{
Xreturn (a>b)?b:a;
X}
X
Xint max(a,b)
X{
Xreturn (a>b)?a:b;
X}
X
X/* Compare blocks for equality */
X
Xint beq(dst,src,sz)
Xunsigned char *dst;
Xunsigned char *src;
X{
Xunsigned char *d=dst-1, *s=src-1;
Xif(!sz) return 1;
Xdo
X if(d[sz]!=s[sz]) return 0;
Xwhile(--sz);
Xreturn 1;
X}
X
X/* Compare blocks for equality case insensitive */
X
Xint bieq(dst,src,sz)
Xunsigned char *dst;
Xunsigned char *src;
X{
Xunsigned char *d=dst, *s=src; int cnt=sz;
Xif(!cnt) return 1;
Xdo
X if(*s>='a' && *s<='z')
X  {
X  if(*d>='a' && *d<='z') { if(*(d++)!=*(s++)) return 0; }
X  else if(*(d++)!=(0x5f&*(s++))) return 0;
X  }
X else if(*d>='a' && *d<='z')
X  {
X  if(*s>='a' && *s<='z') { if(*(d++)!=*(s++)) return 0; }
X  else if(*(s++)!=(0x5f&*(d++))) return 0;
X  }
X else if(*(d++)!=*(s++)) return 0;
Xwhile(--cnt);
Xreturn 1;
X}
X
Xunsigned char *bchr(bk,sz,c)
Xunsigned char *bk;
Xunsigned char c;
X{
Xunsigned char *s=bk;
Xint cnt=sz;
Xif(cnt)
X do if(*s==c) return s;
X while(++s, --cnt);
Xreturn 0;
X}
X
Xunsigned char *brchr(bk,sz,c)
Xunsigned char *bk, c;
X{
Xunsigned char *s=bk+sz;
Xint cnt=sz;
Xif(cnt)
X do if(*(--s)==c) return s;
X while(--cnt);
Xreturn 0;
X}
END_OF_FILE
if test 3092 -ne `wc -c <'blocks.c'`; then
    echo shar: \"'blocks.c'\" unpacked with wrong size!
fi
# end of 'blocks.c'
fi
if test -f 'blocks.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'blocks.h'\"
else
echo shar: Extracting \"'blocks.h'\" \(1012 characters\)
sed "s/^X//" >'blocks.h' <<'END_OF_FILE'
X/* Memory block functions header file
X   Copyright (C) 1991 Joseph H. Allen
X
XThis file is part of JOE (Joe's Own Editor)
X
XJOE is free software; you can redistribute it and/or modify it under the terms
Xof the GNU General Public License as published by the Free Software
XFoundation; either version 1, or (at your option) any later version.  
X
XJOE is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
XA PARTICULAR PURPOSE.  See the GNU General Public License for more details.  
X
XYou should have received a copy of the GNU General Public License along with
XJOE; see the file COPYING.  If not, write to the Free Software Foundation, 675
XMass Ave, Cambridge, MA 02139, USA.  */ 
X
Xunsigned char *bzero();
Xunsigned char *bset();
Xunsigned char *bmove();
Xunsigned char *bfwrd();
Xunsigned char *bbkwd();
Xunsigned umin();
Xunsigned umax();
Xint min();
Xint max();
Xint beq();
Xint bieq();
Xunsigned char *bchr();
Xunsigned char *brchr();
END_OF_FILE
if test 1012 -ne `wc -c <'blocks.h'`; then
    echo shar: \"'blocks.h'\" unpacked with wrong size!
fi
# end of 'blocks.h'
fi
if test -f 'cruddy.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'cruddy.c'\"
else
echo shar: Extracting \"'cruddy.c'\" \(3024 characters\)
sed "s/^X//" >'cruddy.c' <<'END_OF_FILE'
X/* Cruddy terminal interface - should be very portable though
X   Copyright (C) 1991 Joseph H. Allen
X
XThis file is part of JOE (Joe's Own Editor)
X
XJOE is free software; you can redistribute it and/or modify it under the terms
Xof the GNU General Public License as published by the Free Software
XFoundation; either version 1, or (at your option) any later version. 
X
XJOE is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
XA PARTICULAR PURPOSE.  See the GNU General Public License for more details.  
X
XYou should have received a copy of the GNU General Public License
Xalong with JOE; see the file COPYING.  If not, write to
Xthe Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
X
X#include <stdio.h>
X#include <signal.h>
X#include "async.h"
X
Xint have=0;
X
Xeputs(s)
Xchar *s;
X{
Xfputs(s,stdout);
X}
X
Xeputc(c)
X{
Xputchar(c);
X}
X
Xvoid tsignal();
X
Xsigjoe()
X{
Xsignal(SIGHUP,tsignal);
Xsignal(SIGTERM,tsignal);
Xsignal(SIGQUIT,SIG_IGN);
Xsignal(SIGPIPE,SIG_IGN);
Xsignal(SIGINT,SIG_IGN);
X}
X
Xsignorm()
X{
Xsignal(SIGHUP,SIG_DFL);
Xsignal(SIGTERM,SIG_DFL);
Xsignal(SIGQUIT,SIG_DFL);
Xsignal(SIGPIPE,SIG_DFL);
Xsignal(SIGINT,SIG_DFL);
X}
X
Xaopen()
X{
Xfflush(stdout);
Xsystem("/bin/stty raw -echo");
X}
X
Xaclose()
X{
Xfflush(stdout);
Xsystem("/bin/stty cooked echo");
X}
X
Xaflush()
X{
X}
X
Xunsigned char *take=0;
X
Xanext()
X{
Xunsigned char c;
Xif(take)
X if(*take)
X  {
X  int c;
X  if(*take!='\\') return *take++;
X  ++take;
X  if(!*take) return '\\';
X  else if(*take=='r') c='\r';
X  else if(*take=='b') c=8;
X  else if(*take=='n') c=10;
X  else if(*take=='f') c=12;
X  else if(*take=='a') c=7;
X  else if(*take=='\"') c='\"';
X  else if(*take>='0' && *take<='7')
X        {
X        c= *take++-'0';
X        if(*take>='0' && *take<='7')
X         {
X         c=c*8+*take++-'0';
X         if(*take>='0' && *take<='7') c=c*8+*take++-'0';
X         }
X        --take;
X        }
X  else c= *take;
X  ++take;
X  return c;
X  }
X else take=0;
Xfflush(stdout);
Xif(read(fileno(stdin),&c,1)<1) tsignal(0);
Xif(record) macroadd(c);
Xreturn c;
X}
X
Xgetsize()
X{
X#ifdef TIOCGSIZE
Xstruct ttysize getit;
X#else
X#ifdef TIOCGWINSZ
Xstruct winsize getit;
X#else
Xchar *p;
X#endif
X#endif
X#ifdef TIOCGSIZE
Xif(ioctl(fileno(stdout),TIOCGSIZE,&getit)!= -1)
X {
X if(getit.ts_lines>=3) height=getit.ts_lines;
X if(getit.ts_cols>=2) width=getit.ts_cols;
X }
X#else
X#ifdef TIOCGWINSZ
Xif(ioctl(fileno(stdout),TIOCGWINSZ,&getit)!= -1)
X {
X if(getit.ws_row>=3) height=getit.ws_row;
X if(getit.ws_col>=2) width=getit.ws_col;
X }
X#else
Xif(p=getenv("ROWS")) sscanf(p,"%d",&height);
Xif(p=getenv("COLS")) sscanf(p,"%d",&width);
Xif(height<3) height=24;
Xif(width<2) width=80;
X#endif
X#endif
X}
X
Xtermtype()
X{
Xgetsize();
X}
X
Xshell()
X{
Xint x;
Xchar *s=(char *)getenv("SHELL");
Xif(!s)
X {
X puts("\nSHELL variable not set");
X return;
X }
Xeputs("\nYou are at the command shell.  Type 'exit' to continue editing\r\n");
Xaclose();
Xif(x=fork())
X {
X if(x!= -1) wait(0);
X }
Xelse
X {
X signorm();
X execl(s,s,0);
X _exit(0);
X }
Xaopen();
X}
X
Xsusp()
X{
Xshell();
X}
END_OF_FILE
if test 3024 -ne `wc -c <'cruddy.c'`; then
    echo shar: \"'cruddy.c'\" unpacked with wrong size!
fi
# end of 'cruddy.c'
fi
if test -f 'joe.1' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'joe.1'\"
else
echo shar: Extracting \"'joe.1'\" \(6072 characters\)
sed "s/^X//" >'joe.1' <<'END_OF_FILE'
X.TH JOE 1
X.SH NAME
Xjoe \- Joe's Own Editor
X.SH SYNOPSIS
X.B joe file
X.br
X.BR joe
X.SH DESCRIPTION
XJOE is a screen editor designed to be easy to learn for novice users and
Xpowerfull enough to be usefull for experienced users.  After you invoke the
Xeditor, you can hit ^K H ('^' mean hold the Ctrl key down while pressing the
Xfollowing key) to turn on the help text.  From this you should be able to
Xfigure out how to use the editor.  A few things need further explanation
Xhowever. 
X
XNote that JOE is a student written program and is not supported by WPI or the
XCCC.  This means that JOE will not be maintained by the CCC staff and that the
XCCC staff do not have to help you use it.  Use this program at your own risk. 
XHowever, as long as the author of the program is here at WPI, he will be glad
Xto help you.  Mail any questions you have to 'rcarter@wpi.wpi.edu'
X
X.SH USEAGE
XJOE uses the "TERM" environment variable and the termcap database to determine
Xthe height and width of the screen and to determine if the terminal uses
Xscrolling regions.  Except for these differences the terminal must be
XANSI/VT100 compatible.  
X
XJOE also tries to get the width and the height of the screen from the
XTIOCGSIZE ioctl if your system supports it and if it reports that its values
Xare valid.  This allows JOE to use resizable windows.  Unfortunately, the
Xvalues returned by TIOCGSIZE are occasionally wrong when JOE is used on a
Xnormal serial terminal.  If you find that this is the case, you can force the
Xvalues TIOCGSIZE returns by typing the commands: 'stty rows 24' and 'stty cols
X80'
X
XTo customize the help screen or the key bindings, copy the file
X/usr/local/stusrc/joe/.joerc to your home directory and modify it.  The
Xcomments at the beginning of the file explain how to do this. 
X
XBe sure that the baud rate as reported by stty is correct.  JOE uses this
Xto optimize its screen writes.  If you're going over a network, set the
Xbaud rate to your best estimate of the actual througput.  If you're using
XJOE in an X window, set the baud rate to the highest possible (usually 'stty extb'
Xor 'stty 38400').
X
X^K J reformats the current paragraph.  ^T R can be used to change the right
Xmargin.  The default is the width of the screen.  If auto-indent mode is set,
Xindented paragraphs are formated.
X
XUse ^K B to set the beginning of a block and ^K K to set the end of a block. 
XYou can then copy, move, save or delete the marked block.  To turn the
Xhighlighting off, hit ^K B ^K K (make the beginning and ending the same or
Xmove the beginning past the ending or move the ending before the beginning).
X
X^K O splits a window into two.  You can then use ^K E to load a file into the
Xnew window.  ^K I shows either one window or it shows all of the windows.  Use
X^C to eliminate a window.
X
XControl characters (0-31, 127) are shown underlined.  Characters above 127 are
Xshown in inverse.  You can use ` and ^\ to enter control characters or
Xcharacters with the 7th bit set. 
X
XHit ^K F to find text.  You will be prompted to enter the search string. 
XAfter hitting Return, you will be prompted for options- you can type 1 or more
Xof:  
X
X.br
X			i	Ignore case
X.br
X			b	Backwards
X.br
X			r	Replace
X.br
X			nnn	Find the nth occurance or do nnn replacements
X.br
X
X		If you hit r, you will also be prompted to enter the
X		replacement string.
X
X		Hit ^L to find the next occurance of the previous search
X		string (with all the same options except nnn).
X
XHit ^K L to goto an entered line number.
X
XHit ^K 0 to execute a shell command.  If a block was set, the shell command
Xgets the block on its standard input and the any output the command writes
Xto it's stardard output will replace the block.  If a block was not set, any
Xstandard output is simply inserted into the text at the cursor location.
X
XYou may wish to capture the error output from the command instead of its
Xstandard output.  This may be done by giving appropraite shell modifiers
Xalong with the command.  For example if you want to run the command 'make
Xbsd':
X
X.br
X	make bsd			stderr -> screen, stdout -> editor
X.br
X	make bsd >&2			stderr -> screen, stdout -> screen
X.br
X	make bsd 2>&1			stderr -> editor, stdout -> editor
X.br
X	make bsd 3>&1 1>&2 2>&3		stderr -> editor, stdout -> screen
X.br
X
XIf for some reason JOE gets a signal (that it's going to crash or that the
Xsystem is messing up), it attempts to save all of its modified files into a
Xfile "DEADJOEnnnn" (where nnnn is the process I.D.) in the current directory. 
XEdit this file to get your latest modifications back after such an occurance.
X
X.SH MODES
XA number of editing modes are settable with the ^T command:
X
X.br
X	Insert/Overtype
X.br
X				When you type characters, they will either be
X.br
X				inserted before the existing text or will
X.br
X				replace the existing text.
X
X.br
X	Tab Magic on/off
X.br
X				When tab magic is on, the column number of
X.br
X				characters preceeded by tab characters will
X.br
X				automatically be maintained.
X
X.br
X	Word Wrap on/off
X.br
X				When word wrap is on, words typed past the
X.br
X				right margin will automatically wrap to the
X.br
X				left edge of the screen.
X
X.br
X	Autoindent on/off
X.br
X				When autoindent is on, new lines will begin
X.br
X				with same amount of whitespace from the left
X.br
X				edge of the screen.  Also indented paragraphs
X.br
X				will be formatted properly.
X
X.br
X	Picture mode on/off
X.br
X				When picture mode is on, the right-arrow and
X.br
X				down-arrow keys will move freely on the screen.
X.br
X				I.E., right arrow will not wrap to the next
X.br
X				line and down arrow will not stop at the end
X.br
X				of the file.
X
X.SH FILES
X.DT
X.ta 25n
X
X \.joerc 			Initialization file.  JOE looks for
X.br
X				this in the current directory, the
X.br
X				user's home directory and in the 
X.br
X				directory containing JOE
X
X.SH RESTRICTIONS
X
XThe file size is limited to the system process size limit 
X
X.SH BUGS
XSend bug reports to rcarter@wpi.wpi.edu (Joseph H. Allen).  This should be
Xvalid to at least January, 1991.  You can also contact me through snail mail:
X
X.br
X		Joseph H. Allen
X.br
X		28 Dale Lane
X.br
X		Smithtown, N.Y. 11787
END_OF_FILE
if test 6072 -ne `wc -c <'joe.1'`; then
    echo shar: \"'joe.1'\" unpacked with wrong size!
fi
# end of 'joe.1'
fi
if test -f 'joe.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'joe.c'\"
else
echo shar: Extracting \"'joe.c'\" \(68418 characters\)
sed "s/^X//" >'joe.c' <<'END_OF_FILE'
X/* JOE - Joe's Own Editor - the bulk of the code is here
X   Copyright (C) 1991 Joseph H. Allen
X
XThis file is part of JOE (Joe's Own Editor)
X
XJOE is free software; you can redistribute it and/or modify it under the terms
Xof the GNU General Public License as published by the Free Software
XFoundation; either version 1, or (at your option) any later version.  
X
XJOE is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
XA PARTICULAR PURPOSE.  See the GNU General Public License for more details.  
X
XYou should have received a copy of the GNU General Public License
Xalong with JOE; see the file COPYING.  If not, write to
Xthe Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
X
X#include <stdio.h>
X#include <string.h>
X#include <sys/types.h>
X#include <sys/stat.h>
X#include <errno.h>
X#include <pwd.h>
X/* #include <sys/dir.h> */
Xextern errno;
X#include "async.h"
X#include "blocks.h"
X#include "joe.h"
Xint width=80;
Xint height=24;
Xint scroll=1;
X
Xint repeatamnt=1;
Xint nrepeatamnt;
X
Xunsigned char stalin[PATHSIZE];
X
Xint smode=0;
Xint tops=0;
Xint bots;
Xint oxpos=0;            /* Current cursor position */
Xint oypos=0;
Xint *scrn;            /* Screen buffer address */
Xunsigned char *help=0;
Xint helplines=0;
Xint helpsize=0;
Xint helpblksize=0;
X
Xunsigned char *omsg=0;           /* Pointer to opening message */
X
Xdopen()
X{
Xint x;
Xunsigned char buf[30];
Xscrn=(int *)malloc(width*height*sizeof(int));
Xfor(x=0;x<width*height;x++) scrn[x]= ' ';
Xif(scroll)
X {
X sprintf(buf,"\033[0m\033[1;%dr\033[H\033[J",height), eputs(buf);
X bots=height-1;
X }
Xelse eputs("\033[0m\033[H\033[J");
X}
X
Xdclose()
X{
Xsetregn(0,height-1);
Xcpos(height-1,0);
Xattrib(0);
X}
X
Xresize()
X{
Xint x;
Xunsigned char buf[30];
Xfree(scrn);
Xscrn=(int *)malloc(width*height*sizeof(int));
Xfor(x=0;x<width*height;x++) scrn[x]= ' ';
Xif(scroll)
X {
X sprintf(buf,"\033[0m\033[1;%dr\033[H\033[J",height), eputs(buf);
X bots=height-1;
X }
Xelse eputs("\033[0m\033[H\033[J");
Xsmode=0;
Xif(wind) wind=helplines;
Xif(wind>height-3) wind=height-3;
Xif(wind) hupd=1;
Xwfit();
Xupd=1;
X}
X
Xcposs(y,x)
X{
Xunsigned char s[9];
Xif(y>bots || y<tops) setregn(0,height-1);
Xif(y==oypos)
X {
X if(x==oxpos) return;
X if(x==0)
X  {
X  eputc(13);
X  return;
X  }
X if(oxpos>=x+1 && oxpos<=x+4)
X  {
X  while(oxpos!=x) eputc(8), x++;
X  return;
X  }
X if(x>=oxpos+1 && x<=oxpos+4)
X  {
X  while(x!=oxpos) tputcc(scrn[oypos*width+oxpos++]);
X  return;
X  }
X if(x>oxpos)
X  sprintf(s,"\033[%dC",x-oxpos);
X else
X  sprintf(s,"\033[%dD",oxpos-x);
X eputs(s);
X return;
X }
Xif(x==oxpos)
X {
X if(y>=oypos+1 && y<=oypos+4)
X  {
X  while(y!=oypos) /* acheck(), */ eputc(10), oypos++;
X  return;
X  }
X if(y==0 && x==0)
X  {
X  eputs("\033[H");
X  return;
X  }
X if(y>oypos)
X  sprintf(s,"\033[%dB",y-oypos);
X else
X  sprintf(s,"\033[%dA",oypos-y);
X eputs(s);
X return;
X }
Xif(x<3 && y>oypos && y<oypos+5)
X {
X while(oypos!=y) ++oypos, eputc('\012');
X eputc('\015'); oxpos=0;
X while(x!=oxpos) tputcc(scrn[oypos*width+oxpos++]);
X return;
X }
Xif(x==0 && y==0)
X {
X eputs("\033[H");
X return;
X }
Xif(x==0)
X {
X sprintf(s,"\033[%dH",y+1);
X eputs(s);
X return;
X }
Xsprintf(s,"\033[%d;%dH",y+1,x+1);
Xeputs(s);
Xreturn;
X}
X
Xcpos(y,x)
X{
Xcposs(y,x);
Xoxpos=x;
Xoypos=y;
X}
X
Xsetregn(top,bot)
X{
Xunsigned char sst[16];
Xif(top!=tops || bots!=bot)
X {
X tops=top;
X bots=bot;
X if(scroll)
X  {
X  oxpos=0;
X  oypos=0;
X  sprintf(sst,"\033[%d;%dr\033[H",top+1,bot+1);
X  /* I shouldn't need the \033[H, but so many vt100 emulators forget to home
X   * the cursor after a set scrolling region...
X   */
X  eputs(sst);
X  }
X }
X}
X
Xattrib(x)
X{
Xif(smode== -1) goto clr;
Xif(!(x&INVERSE) && (smode&INVERSE)) goto clr;
Xif(!(x&BLINK) && (smode&BLINK)) goto clr;
Xif(!(x&UNDERLINE) && (smode&UNDERLINE)) goto clr;
Xif(!(x&BOLD) && (smode&BOLD)) goto clr;
Xgoto ovr;
Xclr:
Xsmode=0;
Xeputs("\033[m");
Xovr:
Xif(x&INVERSE && !(smode&INVERSE)) eputs("\033[7m");
Xif(x&BLINK && !(smode&BLINK)) eputs("\033[5m");
Xif(x&UNDERLINE && !(smode&UNDERLINE)) eputs("\033[4m");
Xif(x&BOLD && !(smode&BOLD)) eputs("\033[1m");
Xsmode=x;
X}
X
Xint uuu=0;
Xint cntr=0;
Xint upd=1;
Xint hupd=0;
Xint newy=1;
Xint helpon=0;
Xint wind=0;
Xint xpos=0;
Xint ypos=0;
XTXTSIZ saddr=0;
XTXTSIZ xoffset=0;
X
X/* Clear end of line if needed.  i is row number and j is column number */
X
Xclreolchk(i,j)
XTXTSIZ j;
X{
Xint *k=scrn+i*width;
Xint t, jj;
Xif(j<xoffset) jj=0;
Xelse
X if(j>=xoffset+width-1) return;
X else jj=j-xoffset;
Xfor(t=width-1;t>=jj;--t) if(k[t]!=' ') goto ohoh;
Xreturn;
Xohoh:
Xif(t==jj)
X {
X cpos(i,jj);
X tputcc(' ');
X k[jj]=' ';
X oxpos++;
X return;
X }
Xwhile(t>=jj) k[t--]=' ';
Xcpos(i,jj);
Xattrib(0);
Xeputs("\033[K");
X}
X
X/* Change buffer character to displayable form */
X
Xshowas(ch)
X{
X#ifdef NOHIGHBIT
Xif(ch>=128)
X {
X ch&=127;
X ch|=INVERSE;
X }
X#endif
Xif((ch&127)<32)
X {
X ch+='@';
X ch|=UNDERLINE;
X }
Xif((ch&127)==127)
X {
X ch&=~127;
X ch|='?'|UNDERLINE;
X }
Xreturn ch;
X}
X
Xint udline(i)
X{
Xint q=i*width;
XTXTSIZ j;
Xint t;
Xint u;
Xint ch;
Xfor(j=0;1;j++)
X {
X if(have) return -1;
X if(fmeof())
X  {
X  clreolchk(i++,j);
X  j=0;
X  while(i<curwin->wind+curwin->height) clreolchk(i++,j);
X  return 1;
X  }
X ch=fmgetc();
X if(ch==NL)
X  {
X  clreolchk(i,j);
X  return 0;
X  }
X if(ch==TAB)
X  {
X  ch=' ';
X  if(fmnote()-1>=markb && fmnote()<=marke && curbuf==markbuf) ch^=INVERSE;
X  t=i*width+j-xoffset;
X  do
X   {
X   if(j>=xoffset && j<xoffset+width-1)
X    {
X    u=scrn[t];
X    if(ch!=u || u==-1)
X     {
X     cpos(i,(int)(j-xoffset));
X     scrn[t]=ch;
X     tputcc(ch);
X     oxpos++;
X     }
X    }
X   t++;
X   j++;
X   } while(j&7);
X  j--;
X  }
X else
X  {
X  ch=showas(ch);
X  if(fmnote()-1>=markb && fmnote()<=marke && curbuf==markbuf) ch^=INVERSE;
X  t=q+j-xoffset;
X  if(j>=xoffset && j<xoffset+width-1)
X   {
X   u=scrn[t];
X   if(ch!=u || u==-1)
X    {
X    cpos(i,(int)(j-xoffset));
X    scrn[t]=ch;
X    tputcc(ch);
X    oxpos++;
X    }
X   }
X  }
X }
X}
X
Xint udscrn()
X{
Xint i;
Xint v;
Xfor(i=ypos;i<curwin->height+curwin->wind;i++)
X if(v=udline(i)) break;
Xif(v== -1) return 0;
Xfmpoint(saddr);
Xfor(i=curwin->wind+1;i<ypos;i++)
X if(udline(i)) return 0;
Xreturn 1;
X}
X
Xdupdate1(fgf)
X{
Xint y;
XTXTSIZ x;
XTXTSIZ sve=fmnote();
X
XTXTSIZ sve1;
X
X/* Status line */
Xstrcpy(stalin,"\\i");
Xif(gfnam[0]) strcat(stalin,gfnam);
Xelse strcat(stalin,"(Unnamed)");
Xif(changed) strcat(stalin," (Modified)");
Xif(record) strcat(stalin," (Macro recording)");
Xif(!helpon && strlen(stalin)+21<width+1)
X {
X int x=strlen(stalin);
X while(x<width-20) stalin[x++]=' ';
X stalin[x]=0;
X strcat(stalin,"Hit Ctrl-K H for help");
X }
Xelse
X {
X int x=strlen(stalin);
X while(x<width+1) stalin[x++]=' ';
X stalin[x]=0;
X }
X
Xmsgout(curwin->wind,stalin,0,1);
X
Xx=getcol();
Xif(fmnrnl()) fmpoint(fmnote()+1);
Xsve1=fmnote();
X
X/* calculate what screen cursor position should be */
X
Xif(x>xoffset+width-2)
X xpos=width-2, xoffset=x-width+2;
Xelse
X if(x<xoffset)
X  xpos=0, xoffset=x;
X else
X  xpos=x-xoffset;
X
X/* calculate new y cursor position and point to beginning of screen */
X
Xif(newy)
X {
X if(fmnote()<=saddr)
X  {
X  ypos=curwin->wind+1;
X  saddr=fmnote();
X  }
X else
X  {
X  /* is cursor within 24 lines of old beginning of screen */
X 
X  for(y=0;y!=curwin->height-2;y++)
X   {
X   if(fmnote()==saddr) goto over;
X   fmrgetc();
X   if(fmnrnl()) fmpoint(fmnote()+1);
X   }
X  if(cntr)
X   {
X   for(x=0;x<(curwin->height-1)/2;x++)
X    {
X    fmfnl();
X    y--;
X    fmgetc();
X    }
X   }
X  over:
X  cntr=0;
X  saddr=fmnote();
X  ypos=y+curwin->wind+1;
X  }
X newy=0;
X }
X
X/* Now update screen */
Xif(have)
X { if(fgf) cpos(ypos,xpos); }
Xelse
X {
X fmpoint(sve1);
X if(udscrn()) upd=0;
X if(fgf) cpos(ypos,xpos);
X }
Xfmpoint(sve);
X}
X
Xdupdatehelp()
X{
Xint att;
Xint i,j,c;
Xunsigned char *from=help;
Xint *too=scrn;
Xif(helplines>height-3) wind=height-3;
Xelse wind=helplines;
Xfor(i=0;i!=wind;++too, ++i)
X {
X j=0; att=0;
X loop:
X if(have) return;
X if(j==width-1)
X  {
X  while(*from!='\n') ++from;
X  ++from;
X  continue;
X  }
X if(*from=='\n')
X  {
X  hclreol:
X  ++from;
X  cpos(i,j);
X  eputs("\033[K");
X  while(j!=width-1) *too++ =' ', ++j;
X  continue;
X  }
X if(*from=='\\')
X  {
X  ++from;
X  if(*from=='\n') goto hclreol;
X  if(*from=='u')
X   {
X   att^=UNDERLINE;
X   ++from;
X   goto loop;
X   }
X  if(*from=='i')
X   {
X   att^=INVERSE;
X   ++from;
X   goto loop;
X   }
X  }
X c= *from++ | att;
X if(c!= *too)
X  {
X  cpos(i,j);
X  tputcc(*too= c);
X  oxpos++;
X  }
X ++too; ++j;
X goto loop;
X }
Xhupd=0;
X}
X
Xint updall=0;
X
Xdupdate()
X{
Xint xp,yp;
X
Xaflush();
Xif(hupd) dupdatehelp();
Xif(upd)
X {
X int total=height-wind;
X struct window *x;
X dupdate1(1);
X stwin(curwin);
X x=curwin;
X curwin=topwin;
X xp=xpos; yp=ypos;
X do
X  {
X  if((curbuf==x->buffer || updall) && curwin!=x)
X   {
X   if(total<=0) break;
X   ldwin(curwin);
X   total-=curwin->height;
X   newy=1;
X   dupdate1(0);
X   stwin(curwin);
X   }
X  else if(curwin==x)
X   total-=curwin->height;
X  }
X  while(curwin=curwin->next,curwin!=topwin);
X updall=0;
X ldwin(x);
X curwin=x;
X cpos(ypos=yp,xpos=xp);
X }
X}
X
Xinvalidate(line)
X{
Xint x;
Xfor(x=0;x<width;x++) scrn[width*line+x]= -1;
X}
X
Xtputcc(c)
X{
Xattrib(c);
Xeputc(c&255);
X}
X
Xint backup=0;
XFILE *handle;
Xunsigned char gfnam[PATHSIZE];
X
XTXTSIZ bufsiz;		/* Size of buffer */
XTXTPTR point;		/* The point */
XTXTPTR buffer;		/* The buffer */
XTXTPTR filend;		/* First character not in buffer */
XTXTPTR hole;		/* Beginning of hole */
XTXTPTR ehole;		/* First character not in hole */
Xint changed=0;		/* Set when file has been changed */
Xint nundorecs=0;
Xstruct undorec
X {
X struct undorec *next;
X TXTSIZ size;
X TXTSIZ where;
X unsigned char *buffer;
X }
X *undorecs=0;
Xstruct undorec *undoptr=0;
Xstruct undorec *redorecs=0;
Xint undoflag=1;
X
Xfmopen()
X{
Xbuffer=(unsigned char *)TXTMALLOC(bufsiz=HOLESIZE);
Xpoint=buffer;
Xhole=buffer;
Xehole=buffer+HOLESIZE;
Xfilend=ehole;
Xchanged=0;
Xundorecs=0;
Xnundorecs=0;
Xredorecs=0;
Xundoptr=0;
X}
X
Xfmexpand(amount)
Xunsigned amount;
X{
Xif(filend+amount-buffer>bufsiz)
X {
X unsigned char *old=buffer;
X buffer=(TXTPTR)TXTREALLOC(buffer,bufsiz=(filend+amount+HOLESIZE-buffer));
X point+=buffer-old;
X filend+=buffer-old;
X hole+=buffer-old;
X ehole+=buffer-old;
X }
X}
X
Xfmhole()
X{
Xif(point==hole) return;
Xif(point==ehole)
X {
X point=hole;
X return;
X }
Xif(point<hole)
X {
X bmove(ehole-(hole-point),point,hole-point);
X ehole-=(hole-point);
X hole=point;
X }
Xelse
X {
X bmove(hole,ehole,point-ehole);
X hole+=point-ehole;
X ehole=point;
X point=hole;
X }
X}
X
Xfmbig(size)
XTXTSIZ size;
X{
Xif(size>fmholesize())
X {
X size+=HOLESIZE;
X fmexpand(size);
X bmove(ehole+size,ehole,filend-ehole);
X ehole+=size;
X filend+=size;
X }
X}
X
Xint fmfnl()
X{
Xwhile(((point==hole)?(point=ehole):point)!=filend)
X if(*point==NL) return 1;
X else point++;
Xreturn 0;
X}
X
Xint fmrnl()
X{
Xif(fmrc()==NL) return 1;
Xwhile((point==ehole?point=hole:point)!=buffer)
X if(*(--point)==NL) return 1;
Xreturn 0;
X}
X
Xkillredo()
X{
Xstruct undorec *u;
Xwhile(redorecs)
X {
X u=redorecs->next;
X if(redorecs->buffer) free(redorecs->buffer);
X free(redorecs);
X redorecs=u;
X }
X}
X
Xkillundo()
X{
Xstruct undorec *u;
Xwhile(undorecs)
X {
X if(undorecs->buffer) free(undorecs->buffer);
X u=undorecs->next;
X free(undorecs);
X undorecs=u;
X }
X}
X
Xfminsu(size)
XTXTSIZ size;
X{
Xstruct window *z;
Xstruct undorec *it;
Xif(undoflag)
X {
X if(redorecs) killredo();
X if(undorecs && !undorecs->buffer &&
X    (undorecs->where==fmnote() || undorecs->where+undorecs->size==fmnote()))
X  undorecs->size+=size;
X else
X  {
X  /* New record */
X  it=(struct undorec *)malloc(sizeof(struct undorec));
X  it->next=undorecs;
X  undorecs=it;
X  it->size=size;
X  it->where=fmnote();
X  it->buffer=0;
X  ++nundorecs;
X  if(nundorecs==20)
X   {
X   struct undorec *p;
X   for(it=undorecs;it->next;p=it,it=it->next);
X   if(it->buffer) free(it->buffer);
X   free(it);
X   p->next=0;
X   }
X  }
X }
Xif(curbuf==markbuf)
X {
X if(fmnote()<markb) markb+=size;
X if(fmnote()<marke) marke+=size;
X }
Xz=topwin;
Xdo
X {
X if(z->buffer==curbuf)
X  {
X  if(z==curwin)
X   {
X   if(fmnote()<saddr) saddr+=size;
X   }
X  else
X   {
X   if(fmnote()<z->saddr) z->saddr+=size;
X   if(fmnote()<z->cursor) z->cursor+=size;
X   }
X  }
X z=z->next;
X }
X while(z!=topwin);
X}
X
Xundo()
X{
Xstruct undorec *u;
Xif(!undorecs) return;
Xextend=0;
Xif(!undoptr) undoptr=undorecs;
Xif(fmnote()==undoptr->where)
X {
X if(undoptr->buffer)
X  {
X  undoflag=0;
X  fminss(undoptr->buffer,undoptr->size);
X  undoflag=1;
X  markbuf=curbuf;
X  markb=fmnote();
X  marke=markb+undoptr->size;
X  u=(struct undorec *)malloc(sizeof(struct undorec));
X  u->next=redorecs;
X  redorecs=u;
X  u->size=undoptr->size;
X  u->buffer=0;
X  u->where=fmnote();
X  }
X else
X  {
X  u=(struct undorec *)malloc(sizeof(struct undorec));
X  u->next=redorecs;
X  redorecs=u;
X  u->size=undoptr->size;
X  u->buffer=(unsigned char *)malloc(undoptr->size);
X  fmcpy(u->buffer,undoptr->size);
X  u->where=fmnote();
X  undoflag=0;
X  fmdel(undoptr->size);
X  markb=marke=0;
X  undoflag=1;
X  }
X u=undoptr->next;
X if(undoptr->buffer) free(undoptr->buffer);
X free(undoptr);
X undoptr=undorecs=u;
X }
Xelse fmpoint(undoptr->where), newy=1;
X}
X
Xredo()
X{
Xstruct undorec *u;
Xif(!redorecs) return;
Xextend=0;
Xfmpoint(redorecs->where), newy=1;
Xif(redorecs->buffer)
X {
X undoflag=0;
X fminss(redorecs->buffer,redorecs->size);
X undoflag=1;
X markbuf=curbuf;
X markb=fmnote();
X marke=markb+redorecs->size;
X u=(struct undorec *)malloc(sizeof(struct undorec));
X u->next=undorecs;
X undorecs=undoptr=u;
X u->size=redorecs->size;
X u->buffer=0;
X u->where=fmnote();
X }
Xelse
X {
X u=(struct undorec *)malloc(sizeof(struct undorec));
X u->next=undorecs;
X undorecs=undoptr=u;
X u->size=redorecs->size;
X u->buffer=(unsigned char *)malloc(redorecs->size);
X fmcpy(u->buffer,redorecs->size);
X u->where=fmnote();
X undoflag=0;
X fmdel(redorecs->size);
X markb=marke=0;
X undoflag=1;
X }
Xu=redorecs->next;
Xif(redorecs->buffer) free(redorecs->buffer);
Xfree(redorecs);
Xredorecs=u;
X}
X
Xfmdelu(size)
XTXTSIZ size;
X{
Xstruct window *z;
Xstruct undorec *it;
Xif(undoflag)
X {
X if(redorecs) killredo();
X if(undorecs && undorecs->buffer && (undorecs->where==fmnote()))
X  {
X  /* Add to end */
X  undorecs->buffer=(unsigned char *)realloc(undorecs->buffer,
X  undorecs->size+size);
X  fmcpy(undorecs->buffer+undorecs->size,size);
X  undorecs->size+=size;
X  }
X else if(undorecs && undorecs->buffer && (undorecs->where==fmnote()+size))
X  {
X  /* Add to beginning */
X  undorecs->buffer=(unsigned char *)realloc(
X  undorecs->buffer,undorecs->size+size);
X  bbkwd(undorecs->buffer+size,undorecs->buffer,undorecs->size);
X  fmcpy(undorecs->buffer,size);
X  undorecs->size+=size;
X  undorecs->where-=size;
X  }
X else
X  {
X  /* New record */
X  it=(struct undorec *)malloc(sizeof(struct undorec));
X  it->next=undorecs;
X  undorecs=it;
X  it->size=size;
X  it->where=fmnote();
X  it->buffer=(unsigned char *)malloc(size);
X  fmcpy(it->buffer,size);
X  ++nundorecs;
X  if(nundorecs==20)
X   {
X   struct undorec *p;
X   for(it=undorecs;it->next;p=it,it=it->next);
X   if(it->buffer) free(it->buffer);
X   free(it);
X   p->next=0;
X   }
X  }
X }
Xif(markbuf==curbuf)
X {
X if(fmnote()<markb) markb-=umin(size,markb-fmnote());
X if(fmnote()<marke) marke-=umin(size,marke-fmnote());
X }
Xz=topwin;
Xdo
X {
X if(curbuf==z->buffer)
X  {
X  if(z==curwin)
X   {
X   if(fmnote()<saddr) saddr-=umin(size,saddr-fmnote());
X   }
X  else
X   {
X   if(fmnote()<z->saddr) z->saddr-=umin(size,z->saddr-fmnote());
X   if(fmnote()<z->cursor) z->cursor-=umin(size,z->cursor-fmnote());
X   }
X  }
X z=z->next;
X }
X while(z!=topwin);
X}
X
Xfmdel(x)
XTXTSIZ x;
X{
Xfmhole();
Xfmdelu(x);
Xehole+=x;
Xchanged=1;
X}
X
Xfminss(string,size)
Xunsigned char *string;
Xunsigned size;
X{
Xfminsu(size);
Xfmhole();
Xif(size>fmholesize()) fmbig(size);
Xbmove(hole,string,size);
Xhole+=size;
Xchanged=1;
X}
X
Xfmcpy(string,size)
Xunsigned char *string;
X{
Xfmhole();
Xbbkwd(string,ehole,size);
X}
X
Xint fmcmp(string,size)
Xunsigned char *string;
Xint size;
X{
Xunsigned char *x;
Xif(point==hole) point=ehole;
Xif(hole>point && hole<point+size && hole!=ehole)
X {
X if(fmcmp(string,hole-point)) return 1;
X else
X  {
X  x=point;
X  point=ehole;
X  if(fmcmp(string+(hole-x),size-(hole-x)))
X   {
X   point=x;
X   return 1;
X   }
X  else
X   {
X   point=x;
X   return 0;
X   }
X  }
X }
Xelse
X {
X x=point;
X do
X  if(*(x++)!=*(string++)) return 1;
X  while(--size);
X return 0;
X }
X}
X
Xint tupp(c)
Xunsigned char c;
X{
Xif(c>='a' && c<='z') return c+'A'-'a';
Xelse return c;
X}
X
Xint fmicmp(string,size)
Xunsigned char *string;
Xint size;
X{
Xunsigned char *x;
Xif(point==hole) point=ehole;
Xif(hole>point && hole<point+size && hole!=ehole)
X {
X if(fmcmp(string,hole-point)) return 1;
X else
X  {
X  x=point;
X  point=ehole;
X  if(fmcmp(string+(hole-x),size-(hole-x)))
X   {
X   point=x;
X   return 1;
X   }
X  else
X   {
X   point=x;
X   return 0;
X   }
X  }
X }
Xelse
X {
X x=point;
X do
X  if(tupp(*(x++))!=tupp(*(string++))) return 1;
X  while(--size);
X return 0;
X }
X}
X
Xint fmsave(file,size)
XFILE *file;
XTXTSIZ size;
X{
Xif(!size) return 1;
Xif(point==hole) point=ehole;
Xif(hole>point && hole<point+size && hole!=ehole)
X {
X if(hole-point!=fwrite(point,1,hole-point,file)) return 0;
X if(size-(hole-point)!=fwrite(ehole,1,size-(hole-point),file)) return 0;
X return 1;
X }
Xelse
X return size==fwrite(point,1,size,file);
X}
X
Xint fminsfil(file)
XFILE *file;
X{
Xstruct stat buf;
XTXTSIZ amount;
Xfstat(fileno(file),&buf);
Xif(buf.st_size==0) return 1;
Xfminsu(buf.st_size);
Xchanged=1;
Xfmhole();
Xfmbig(buf.st_size);
Xamount=fread(hole,1,buf.st_size,file);
Xhole+=amount;
Xreturn amount==buf.st_size;
X}
X
X/* Output a message string which might possibly longer than width */
X/* if flg is set and the string is longer than the line, the cursor is
X * left at the last position on the line.  If it is clear, the cursor may be
X * elsewhere because of screen optimization. */
X/* if flg1 is set, attribute escape sequences \i and \u are taken to mean
X * switch to inverse or switch to underline attributes
X */
X
Xmsgout(row,str,flg,flg1)
Xunsigned char *str;
X{
Xint j=0, c, att=0;
Xint *too=scrn+width*row;
Xloop:
Xif(j==width-1)
X {
X if(flg) cpos(row,j);
X return;
X }
Xif(!*str)
X {
X hclreol:
X cpos(row,j);
X eputs("\033[K");
X while(j!=width-1) *too++ =' ', ++j;
X return;
X }
Xif(*str=='\\' && flg1 && (str[1]=='i' || str[1]=='u'))
X {
X ++str;
X if(!*str) goto hclreol;
X if(*str=='u')
X  {
X  att^=UNDERLINE;
X  ++str;
X  goto loop;
X  }
X if(*str=='i')
X  {
X  att^=INVERSE;
X  ++str;
X  goto loop;
X  }
X }
Xc= *str++ | att;
Xif(c!= *too)
X {
X cpos(row,j);
X tputcc(*too= c);
X oxpos++;
X }
X++too; ++j;
Xgoto loop;
X}
X
Xint getl(prompt,dat)
Xunsigned char *prompt;
Xunsigned char *dat;
X{
Xint ch,x,y;
Xint flag=0;
Xunsigned char buf[PATHSIZE];
Xstrcpy(buf,prompt);
Xstrcat(buf," (^C to abort): ");
Xy=strlen(buf);
Xstrcat(buf,dat);
Xx=strlen(buf);
Xwhile(1)
X {
X if(x>width-1) msgout(height-1,buf+x-(width-1),1,0);
X else msgout(height-1,buf,1,0);
X ch=anext();
X if(ch=='`')
X  {
X  flag=1;
X  continue;
X  }
X if(ch>=32 && ch!=127 || flag)
X  {
X  if(flag)
X   {
X   flag=0;
X   ch&=0x1f;
X   }
X  buf[x+1]=0, dat[x+1-y]=0;
X  buf[x]=ch, dat[x++-y]=ch;
X  continue;
X  }
X if(ch=='L'-'@')
X  {
X  ch= -1;
X  break;
X  }
X if(ch==13 || ch==10)
X  {
X  ch=1;
X  break;
X  }
X if((ch==8 || ch==127) && x-y)
X  {
X  x--;
X  dat[x-y]=0;
X  buf[x]=0;
X  continue;
X  }
X/*
X if(ch==9)
X  {
X  dat[x-y]=0;
X  docomplete(dat);
X  strcpy(buf+y,dat);
X  x=strlen(buf);
X  continue;
X  }
X*/
X if(ch==3)
X  {
X  ch=0;
X  break;
X  }
X }
Xreturn ch;
X}
X
Xmsg(ms)
Xunsigned char *ms;
X{
Xmsgout(height-1,ms,1,1);
Xanext();
X}
X
Xint askyn(ms)
Xunsigned char *ms;
X{
Xint ch;
Xmsgout(height-1,ms,1,1);
Xup:
Xch=anext();
Xswitch(ch)
X {
Xcase 'y':
Xcase 'n':
X eputc(ch);
X ch&=0x5f;
X break;
Xcase 'Y':
Xcase 'N':
X eputc(ch);
X break;
Xcase 3:
X ch= -1;
X break;
Xdefault:
X goto up;
X }
Xreturn ch;
X}
X
Xint query(ms)
Xunsigned char *ms;
X{
Xmsgout(height-1,ms,1,1);
Xreturn anext();
X}
X
Xint nquery(ms)
Xunsigned char *ms;
X{
Xmsgout(height-1,ms,1,1);
Xcpos(ypos,xpos);
Xreturn anext();
X}
X
Ximsg()
X{
Xattrib(0);
Xif(omsg) msgout(1,omsg,0,1);
Xupd=1;
Xmsgout(height-1,"\\i** Joe's Own Editor version 0.1.2 (1991) **\\i",0,1);
Xcpos(1,0);
X}
X
Xint pic;
Xint autoind;
Xint overwrite;
Xint wrap;
Xint tabmagic;
XTXTSIZ rmargin;
X
Xint options=0;
Xunsigned char sstring[PATHSIZE];
Xunsigned char rstring[PATHSIZE];
Xint len;
X
XTXTSIZ markb=0;
XTXTSIZ marke=0;
X
XTXTSIZ added;
XTXTSIZ extend;
Xint leave;       /* set if editor should now exit */
X
XTXTSIZ getrcol()
X{
XTXTSIZ x,y;
Xunsigned char ch;
Xx=fmnote();
Xif(fmnrnl()) fmgetc();
Xy=0;
Xwhile(fmnote()!=x)
X {
X ch=fmgetc();
X if(ch==TAB)
X  while((++y)&7);
X else
X  y++;
X }
Xreturn y;
X}
X
Xgocol(x)
XTXTSIZ x;
X{
XTXTSIZ y;
Xint ch;
Xif(fmnrnl()) fmgetc();
Xextend=0;
Xfor(y=0;y!=x;y++)
X {
X if(fmeof()) goto dn;
X ch=fmgetc();
X if(ch==NL)
X  {
X  fmpoint(fmnote()-1);
X  extend=x;
X  return;
X  }
X if(ch==TAB)
X  {
X  while((++y)&7)
X   {
X   if(y==x)
X    {
X    fmpoint(fmnote()-1);
Xdn:
X    extend=x;
X    return;
X    }
X   }
X  y--;
X  }
X }
X}
X
XTXTSIZ calcs()
X{
XTXTSIZ y=0;
Xif(fmnrnl()) fmgetc();
Xextend=0;
Xwhile(! (fmeof()?1:fmrc()==NL))
X if(fmrc()==' ')
X  {
X  ++y;
X  fmgetc();
X  }
X else if(fmrc()==TAB)
X  {
X  do ++y; while(y%TABWIDTH);
X  fmgetc();
X  }
X else break;
Xreturn y;
X}
X
Xunfill()
X{
Xfmfnl();
Xextend=0;
Xwhile(fmnote())
X {
X unsigned char x=fmrgetc();
X if(x==' ' || x==TAB) fmdel(1);
X else
X  {
X  fmgetc();
X  break;
X  }
X }
X}
X
X/* Fill from end of line to extend position */
X
Xfillup()
X{
XTXTSIZ x;
Xif(extend && pic)
X {
X x=getrcol();
X while(extend>x)
X  {
X  fminsc(' ');
X  fmgetc();
X  ++x;
X  }
X }
Xextend=0;
X}
X
X/* Save current buffer in named file.  Returns 0 on error.  Clears 'changed'
X * variable if sucessfull
X */
X
Xint saveit1(tos)
Xunsigned char *tos;
X{
Xunsigned char sting[PATHSIZE];
XTXTSIZ temp=fmnote();
Xfmpoint(0);
Xhandle=fopen(tos,"w+");
Xif(handle)
X {
X if(!fmsave(handle,fmsize()))
X  {
X  sprintf(sting,"\\iError writing to file %s\\i",tos);
X  msg(sting);
X  fmpoint(temp);
X  return(0);
X  }
X fmpoint(temp);
X if(fclose(handle)==EOF)
X  {
X  sprintf(sting,"\\iError closing file %s\\i",tos);
X  msg(sting);
X  fmpoint(temp);
X  return(0);
X  }
X changed=0;
X curbuf->changed=0;
X return(1);
X }
Xelse
X {
X sprintf(sting,"\\iError opening file %s\\i",tos);
X msg(sting);
X fmpoint(temp);
X return(0);
X }
X}
X
Xrewrite()
X{
Xunsigned char s[25];
Xint *t,c;
Xoxpos= 0;
Xoypos= 0;
Xtops= 0;
Xbots= height-1;
Xsmode=0;
Xif(scroll) sprintf(s,"\033[m\033[1;%dr\033[H\033[J",height);
Xelse sprintf(s,"\033[m\033[H\033[J");
Xeputs(s);
Xt=scrn;
Xc=width*height;
Xdo *(t++)= ' '; while(--c);
Xupd=1;
Xnewy=1;
Xupdall=1;
Xif(helpon) hupd=1;
X}
X
X/* Toggle help text */
X
Xthelp()
X{
Xstruct window *x;
Xnewy=1;
Xupd=1;
Xif(helpon)
X {
X x=topwin;
X do
X  {
X  if(x->hheight) x->height=x->hheight;
X  else x->height*=height, x->height/=height-wind;
X  x=x->next;
X  }
X  while(x!=topwin);
X wind=0, hupd=0;
X }
Xelse
X {
X if(helplines>height-3) wind=height-3;
X else wind=helplines;
X hupd=1;
X x=topwin;
X do
X  {
X  x->hheight=x->height;
X  x->height*=height-wind;
X  x->height/=height;
X  x=x->next;
X  }
X  while(x!=topwin);
X }
Xhelpon= !helpon;
Xwfit();
X}
X
X/* Move cursor to beginning of file */
X
Xbof()
X{
Xextend=0;
Xfmpoint(0);
Xnewy=1;
X}
X
X/* Move cursor to beginning of line */
X
Xbol()
X{
Xif(fmnrnl()) fmgetc();
Xextend=0;
X}
X
X/* Move cursor to end of line */
X
Xeol()
X{
Xextend=0;
Xfmfnl();
X}
X
X/* Move cursor to end of file */
X
Xeof()
X{
Xextend=0;
Xfmpoint(fmsize());
Xnewy=1;
X}
X
X/* Move cursor right */
X
Xurtarw()
X{
Xfillup();
Xextend=0;
Xif(fmeof())
X {
X if(pic)
X  {
X  into:
X  fminsc(' ');
X  fmgetc();
X  }
X return;
X }
Xelse if(fmrc()==NL)
X {
X if(pic) goto into;
X bol();
X udnarw();
X return;
X }
Xfmgetc();
X}
X
Xrtarw()
X{
Xfillup();
Xextend=0;
Xif(fmeof())
X {
X if(pic)
X  {
X  into:
X  fminsc(' ');
X  fmgetc();
X  }
X return;
X }
Xelse if(fmrc()==NL)
X {
X if(pic) goto into;
X newy=1;
X }
Xfmgetc();
X}
X
Xultarw()
X{
Xif(extend)
X {
X extend=0;
X return;
X }
Xfillup();
Xif(fmnote())
X {
X fmpoint(fmnote()-1);
X if(fmrc()==NL)
X  {
X  fmgetc();
X  uuparw();
X  eol();
X  }
X }
X}
X
Xltarw()
X{
Xif(extend)
X {
X extend=0;
X return;
X }
Xfillup();
Xif(fmnote())
X fmpoint(fmnote()-1);
Xif(fmrc()==NL) newy=1;
X}
X
X/* Move cursor up */
X
Xuparw()
X{
XTXTSIZ x;
Xx=getcol();
Xbol();
Xif(fmnote())
X {
X fmpoint(fmnote()-1);
X if(fmnrnl())
X  fmgetc();
X }
Xgocol(x);
Xnewy=1;
X}
X
X/* user's cursor up routine (uses scrolling regions) */
X
Xuuparw()
X{
XTXTSIZ sve=fmnote();
Xint y=(curwin->wind+1)*width;
Xint x;
Xif(scroll)
X {
X if(fmnrnl())
X  {
X  if(fmnote()+1==saddr)
X   {
X   if(fmnrnl()) fmgetc();
X   saddr=fmnote();
X   setregn(curwin->wind+1,curwin->wind+(curwin->height-1));
X   cpos(curwin->wind+1,oxpos);
X   attrib(0);
X   eputs("\033M");
X   for(x=(curwin->wind+curwin->height)*width-1;x>=y+width;x--)
X    scrn[x]=scrn[x-width];
X   for(x=y;x<y+width;x++) scrn[x]= ' ';
X   }
X  fmpoint(sve);
X  }
X else
X  fmpoint(sve);
X }
Xuparw();
X}
X
X/* Move cursor down */
X
Xdnarw()
X{
XTXTSIZ x;
Xnewy=1;
Xx=getcol();
Xif(!fmfnl())
X bol();
Xelse
X fmgetc();
Xgocol(x);
X}
X
X/* user's down arrow function */
X
Xudnarw()
X{
XTXTSIZ sve=fmnote();
Xint x;
Xif(!fmfnl())
X {
X if(pic)
X  {
X  fminsc(NL);
X  fmpoint(sve);
X  udnarw();
X  return;
X  }
X else
X  {
X  goto cant;
X  }
X }
Xif(scroll)
X {
X if(ypos!=curwin->height+curwin->wind-1) goto cant;
X for(x=0;x!=curwin->height-2;x++) fmnrnl();
X fmfnl();
X fmgetc();
X saddr=fmnote();
X setregn(curwin->wind+1,curwin->wind+curwin->height-1);
X cpos((curwin->wind+curwin->height-1),oxpos);
X attrib(0);
X eputc(10);
X for(x=(curwin->wind+1)*width;x!=(curwin->wind+curwin->height-1)*width;x++)
X  scrn[x]=scrn[x+width];
X for(x=(curwin->wind+curwin->height-1)*width;
X     x!=(curwin->wind+curwin->height)*width;x++)
X  scrn[x]= ' ';
X }
Xcant:
Xfmpoint(sve);
Xdnarw();
X}
X
X/* Magic Tabs (tm) */
X
XTXTSIZ tabcol;	/* Original column of text preceeded by tab stops */
X
Xtabmark()
X{
XTXTSIZ cur=fmnote();
Xunsigned char c;
Xtabcol=0;
Xif(!tabmagic) return;
Xwhile(!fmeof())
X {
X c=fmgetc();
X if(c=='\t')
X  {
X  while(!fmeof())
X   {
X   c=fmgetc();
X   if(c=='\n') break;
X   if(c!='\t')
X    {
X    fmrgetc();
X    tabcol=getrcol();
X    break;
X    }
X   }
X  fmpoint(cur); return;
X  }
X if(c=='\n') break;
X }
Xfmpoint(cur); return;
X}
X
Xtabfix()
X{
XTXTSIZ cur=fmnote(),newcol;
Xunsigned char c;
Xif(!tabcol) return;
Xwhile(!fmeof())
X {
X c=fmgetc();
X if(c=='\t')
X  {
X  while(!fmeof())
X   {
X   c=fmgetc();
X   if(c=='\n') break;
X   if(c!='\t')
X    {
X    fmrgetc();
X    newcol=getrcol();
X    while(newcol<tabcol)
X     {
X     fminsc('\t');
X     newcol+=8;
X     }
X    fmrgetc();
X    while(newcol>tabcol)
X     {
X     if(fmrgetc()=='\t')
X      {
X      fmdel(1);
X      newcol-=8;
X      }
X     else break;
X     }
X    break;
X    }
X   }
X  fmpoint(cur); return;
X  }
X if(c=='\n') break;
X }
Xfmpoint(cur); return;
X}
X
X/* Delete character under cursor */
X
Xdelch()
X{
Xunsigned char c;
Xint x;
Xif(extend && pic) return;
Xif(extend)
X {
X extend=0;
X return;
X }
Xif(!fmeof())
X {
X if((c=fmrc())==NL && scroll)
X  {
X  if(ypos<curwin->wind+curwin->height-2)
X   {
X   for(x=(ypos+1)*width;x<width*(curwin->wind+curwin->height-1);x++)
X    scrn[x]=scrn[x+width];
X   for(x=(curwin->wind+curwin->height-1)*width;
X   x<(curwin->wind+curwin->height)*width;x++) scrn[x]= ' ';
X   setregn(ypos+1,(curwin->wind+curwin->height-1));
X   cpos((curwin->wind+curwin->height-1),oxpos);
X   attrib(0);
X   eputc(10);
X   }
X  fmdel(1);
X  }
X else if(c==TAB) fmdel(1);
X else
X  {
X  tabmark();
X  fmdel(1);
X  tabfix();
X  }
X }
X}
X
Xtype(ch)
Xunsigned char ch;
X{
Xint ox=oxpos;
Xint x,y;
XTXTSIZ temp, temp1;
Xint eflag=0;
Xif(quote8th)
X {
X quote8th=0;
X ch|=128;
X }
Xypos=oypos;
Xif(extend)
X {
X if(ch!=NL) fillup();
X else extend=0;
X eflag=1;
X }
Xif(ch==NL)
X {
X if(overwrite && !tabmagic && !fmeof()) fmdel(1);
X fminsc(ch);
X fmgetc();
X newy=1;
X if(ypos!=(curwin->wind+curwin->height-1))
X  {
X  if(!fmeof())
X   {
X   if(ypos<curwin->wind+curwin->height-2 && scroll)
X    {
X    setregn(ypos+1,(curwin->wind+curwin->height-1));
X    cpos(ypos+1,oxpos);
X    attrib(0);
X    eputs("\033M");
X    cpos(ypos+1,0);
X    for(x=(curwin->wind+curwin->height)*width-1;x>=(ypos+2)*width;x--)
X     scrn[x]=scrn[x-width];
X    for(x=(ypos+1)*width;x<(ypos+2)*width;x++) scrn[x]=' ';
X    }
X   else cpos(ypos+1,0);
X   }
X  else
X   cpos(ypos+1,0);
X  }
X else if(scroll)
X   {
X   setregn(curwin->wind+1,(curwin->wind+curwin->height-1));
X   cpos((curwin->height+curwin->wind-1),0);
X   attrib(0);
X   eputc(10);
X   for(x=curwin->wind*width;x<(curwin->wind+curwin->height-1)*width;x++)
X    scrn[x]=scrn[x+width];
X   for(x=(curwin->wind+curwin->height-1)*width;
X       x<(curwin->wind+curwin->height)*width;x++) scrn[x]= ' ';
X   temp=fmnote();
X   fmpoint(saddr);
X   fmfnl();
X   fmgetc();
X   saddr=fmnote();
X   fmpoint(temp);
X   }
X if(ox<(width-2) && (fmeof()) && scroll) uuu=1;
X if(autoind)
X  {
X  temp=fmnote();
X  uparw();
X  for(x=0;1;x++)
X   {
X   ch=fmgetc();
X   if(!(ch==' ' || ch==TAB)) break;
X   temp1=fmnote();
X   fmpoint(temp);
X   fminsc(ch);
X   uuu=0;
X   added++;
X   fmpoint(temp1);
X   temp++;
X   }
X  fmpoint(fmnote()-(x+1));
X  dnarw();
X  y=overwrite, overwrite=0;
X  for(;x;x--) rtarw();
X  overwrite=y;
X  }
X }
Xelse
X {
X if(overwrite)
X  {
X  if(!tabmagic)
X   {
X   if(!fmeof())
X    {
X    unsigned char c=fmrc();
X    fmdel(1);
X    if(ch!=TAB && c!=TAB && c!=NL && ox<(width-2)) uuu=1;
X    }
X   else if(ch!=TAB && ox<(width-2)) uuu=1;
X   }
X  else
X   if(fmrc()!=NL && !fmeof())
X    if(ch==TAB && fmrc()!=TAB)
X     {
X     TXTSIZ foo=getrcol();
X     do
X      {
X      if(fmeof()) break;
X      if(fmrc()==NL) break;
X      if(fmrc()==TAB)
X       {
X       fmdel(1);
X       break;
X       }
X      else fmdel(1);
X      ++foo;
X      }
X      while(foo&7);
X     }
X    else if(ch!=TAB && fmrc()==TAB)
X     {
X     TXTSIZ tt;
X     tabmark();
X     if(tt=tabcol)
X      {
X      fminsc(ch);
X      tabmark();
X      fmdel(1);
X      if(tabcol!=tt) fmdel(1);
X      }
X     }
X    else
X     {
X     fmdel(1);
X     if(ch!=TAB && ox<(width-2)) uuu=1;
X     }
X   else if(ox<(width-2) && ch!=TAB) uuu=1;
X  }
X if(wrap)
X  {
X  unsigned char xx;
X  if(getrcol()<rmargin) goto skip;
X  if(ch==' ')
X   fminsc(' '), rtarw();
X  else
X   {
X   temp=fmnote();
X   while(1)
X    {
X    if(fmnote())
X     {
X     fmpoint(fmnote()-1);
X     xx=fmrc();
X     if(xx==NL) break;
X     if(xx==' ' || x==TAB)
X      {
X      fmdel(1);
X      added=0;
X      type(NL);
X      temp+=added;
X      break;
X      }
X     }
X    else break;
X    }
X   fmpoint(temp);
X   fminsc(ch);
X   rtarw();
X   uuu=0;
X   }
X  }
X else
X  {
Xskip:
X  if(overwrite || ch==TAB) fminsc(ch);
X  else
X   {
X   tabmark();
X   fminsc(ch);
X   tabfix();
X   }
X  if(ch!=TAB && ch!=NL)
X   {
X   int cc=showas(ch);
X   if(fmnote()>=markb && fmnote()<marke) cc^=INVERSE;
X   fmgetc();
X   tputcc(cc);
X   scrn[ypos*width+oxpos]=cc;
X   oxpos++;
X   if(fmeof()) { if(!eflag && ox<width-2) uuu=1; }
X   else if(fmrc()==NL && !eflag && ox<width-2) uuu=1;
X   }
X  else fmgetc();
X  }
X }
X}
X
Xitype(ch)
Xunsigned char ch;
X{
Xint x,y;
XTXTSIZ temp,temp1;
Xif(extend)
X {
X if(ch!= NL) fillup();
X else extend=0;
X }
Xif(ch==NL)
X {
X fminsc(ch);
X fmgetc();
X newy=1;
X if(autoind)
X  {
X  temp=fmnote();
X  uparw();
X  for(x=0;1;x++)
X   {
X   ch=fmgetc();
X   if(!(ch==' ' || ch==TAB)) break;
X   temp1=fmnote();
X   fmpoint(temp);
X   fminsc(ch);
X   added++;
X   fmpoint(temp1);
X   temp++;
X   }
X  fmpoint(fmnote()-(x+1));
X  dnarw();
X  y=overwrite, overwrite=0;
X  for(;x;x--) rtarw();
X  overwrite=y;
X  }
X }
Xelse
X {
X if(overwrite)
X  if(!fmeof()) fmdel(1);
X if(wrap)
X  {
X  if(getrcol()<rmargin) goto skip;
X  if(ch==' ')
X   fminsc(' '), rtarw();
X  else
X   {
X   temp=fmnote();
X   while(1)
X    {
X    if(fmnote())
X     {
X     fmpoint(fmnote()-1);
X     x=fmrc();
X     if(x==NL) break;
X     if(x==' ' || x==TAB)
X      {
X      fmdel(1);
X      added=0;
X      itype(NL);
X      temp+=added;
X      break;
X      }
X     }
X    else break;
X    }
X   fmpoint(temp);
X   fminsc(ch);
X   rtarw();
X   }
X  }
X else
X  {
Xskip:
X  fminsc(ch);
X  rtarw();
X  }
X }
X}
X
X/* Insert space */
X
Xinss()
X{
Xint t=overwrite;
Xif(extend)
X {
X extend=0;
X return;
X }
Xoverwrite=0;
Xtype(' ');
Xltarw();
Xoverwrite=t;
X}
X
X/* Deleting backspace */
X
Xbacks()
X{
Xint flag=0,c;
Xif(extend)
X {
X extend=0;
X return;
X }
Xif(fmeof()) c=1;
Xelse if(fmrc()==NL) c=1;
Xif(fmnote())
X {
X ultarw();
X if(fmrc()==TAB) flag=1;
X if(overwrite && !tabmagic)
X  {
X  itype(' ');
X  ultarw();
X  }
X else if(overwrite && tabmagic)
X  {
X  if(c) delch();
X  else if(!flag)
X   {
X   itype(' ');
X   ltarw();
X   }
X  }
X else delch();
X if(oxpos && !flag)
X  {
X  eputc(8), tputcc(32), eputc(8), oxpos--,scrn[oypos*width+oxpos]=32;
X  if(fmeof()) uuu=1;
X  else if(fmrc()==NL || overwrite) uuu=1;
X  }
X }
X}
X
X/* quit: exit without saving */
X
Xeexit()
X{
Xint c;
Xif(curwin->next==curwin)
X {
X if(changed)
X  {
X  c=askyn("Do you really want to throw away this file?"); 
X  if(c=='N') return;
X  if(c== -1) return;
X  dclose();
X  eputs("\nFile not saved.\r\n");
X  }
X else
X  {
X  dclose();
X  eputs("\nFile not changed so no update needed\r\n");
X  }
X leave=1;
X }
Xelse
X {
X struct window *t=curwin;
X if(changed && curbuf->count==1)
X  {
X  c=askyn("Do you really want to throw away this file?");
X  if(c=='N') return;
X  if(c== -1) return;
X  }
X if(curbuf->count==1)
X  {
X  killundo();
X  killredo();
X  free(curbuf->buf), free(curbuf);
X  if(curbuf==markbuf) markbuf=0;
X  }                           
X else curbuf->count--;
X curwin->next->prev=curwin->prev;
X curwin->prev->next=curwin->next;
X curwin=curwin->prev;
X free(t);
X ldwin(curwin);
X if(topwin==t) topwin=curwin;
X wfit();
X }
X}
X
Xpgup()
X{
Xint nlins=curwin->height-1;
Xint hlins=nlins/2;
Xint x,y;
XTXTSIZ curpos,z;
Xif(!hlins) hlins=1;
Xz=getcol();
Xcurpos=fmnote();
Xfmpoint(saddr);
Xfor(x=0;x<hlins;x++)
X {
X if(!fmnrnl())
X  {
X  if(!x)
X   {
X   gocol(z);
X   newy=1;
X   return;
X   }
X  else
X   break;
X  }
X }
Xif(fmnrnl()) fmgetc();
Xsaddr=fmnote();
Xfmpoint(curpos);
Xsetregn(curwin->wind+1,(curwin->wind+curwin->height-1));
Xcpos(curwin->wind+1,oxpos);
Xattrib(0);
Xfor(y=0;y<x;y++)
X {
X if(scroll) eputs("\033M");
X fmnrnl();
X }
Xif(fmnrnl()) fmgetc();
Xcpos(oypos,oxpos);
Xgocol(z);
Xx*=width;
Xif(scroll) for(y=(curwin->wind+1)*width;y<x+(curwin->wind+1)*width;y++)
X {
X scrn[y+x]=scrn[y];
X scrn[y]= ' ';
X }
X}
X
Xpgdn()
X{
Xint nlins=curwin->height-1;
Xint hlins=nlins/2;
XTXTSIZ curpos,z;
Xint x,y;
Xz=getcol();
Xcurpos=fmnote();
Xx=nlins;
Xfmpoint(saddr);
Xdo
X {
X if(fmfnl()) fmgetc();
X else
X  {
X  newy=1;
X  gocol(z);
X  return;
X  }
X }
X while(--x);
Xfor(x=1;x<hlins;x++)
X {
X if(fmfnl()) fmgetc();
X else break;
X }
X
Xfmpoint(saddr);
Xfor(y=0;y<x;y++)
X {
X fmfnl();
X fmgetc();
X }
Xsaddr=fmnote();
X
Xsetregn(curwin->wind+1,(curwin->wind+curwin->height-1));
Xcpos((curwin->wind+curwin->height-1),oxpos);
Xfmpoint(curpos);
Xattrib(0);
Xfor(y=0;y<x;y++)
X {
X fmfnl();
X fmgetc();
X if(scroll) eputc(10);
X }
X
Xgocol(z);
Xcpos(ypos,xpos);
Xif(scroll)
X {
X y=width*x;
X for(curpos=(curwin->wind+1)*width+y;curpos<(curwin->wind+curwin->height)*
X     width;curpos++)
X  scrn[curpos-y]=scrn[curpos];
X for(curpos=(curwin->wind+curwin->height)*width-width*x;
X     curpos<(curwin->wind+curwin->height)*width;curpos++)
X  scrn[curpos]= ' ';
X }
X}
X
Xdeleol()
X{
XTXTSIZ temp=fmnote();
XTXTSIZ temp1;
Xif(extend && pic) return;
Xextend=0;
Xfmfnl();
Xtemp1=fmnote()-temp;
Xfmpoint(temp);
Xif(temp1) fmdel(temp1);
X}
X
Xkilllin()
X{
Xextend=0;
Xif(!fmeof())
X {
X if(fmrc()==NL) delch();
X else deleol();
X }
X}
X
Xdellin()
X{
Xbol();
Xdeleol();
Xdelch();
X}
X
Xfixpath(s)
Xunsigned char *s;
X{
Xunsigned char tmp[PATHSIZE], *p, c;
Xstruct passwd *passwd;
Xif(*s=='~')
X {
X p=s+1;
X while(*p!='/' && *p) ++p;
X if(c= *p)
X  {
X  *p=0;
X  if(passwd=getpwnam(s+1))
X   {
X   *p=c;
X   strcpy(tmp,passwd->pw_dir);
X   strcat(tmp,p);
X   strcpy(s,tmp);
X   }
X  }
X }
X}
X
X/*
X
Xstruct list
X {
X struct list *next;
X unsigned char *name;
X };
X
Xunsigned char *complete(list,name)
Xstruct list *list;
Xunsigned char *name;
X{
Xstruct list *found=0;
Xint x;
Xwhile(list)
X {
X for(x=0;name[x] && list->name[x];++x) if(name[x]!=list->name[x]) goto next;
X if(found) return 0;
X found=list;
X next:
X list=list->next;
X }
Xif(found) return found->name;
Xelse return 0;
X}
X
Xstruct list *getnames(name)
Xunsigned char *name;
X{
XDIR *dir=opendir(name);
Xstruct direct *dirent;
Xstruct list *first=0, *next=0;
Xif(dir)
X {
X while(dirent=readdir(dir))
X  {
X  if(next) next=next->next=malloc(sizeof(struct list));
X  else first=next=malloc(sizeof(struct list));
X  next->next=0;
X  next->name=strdupp(dirent->d_name);
X  }
X closedir(dir);
X }
Xreturn first;
X}
X
Xrmlist(list)
Xstruct list *list;
X{
Xstruct list *nxt;
Xif(list)
X do
X  nxt=list->next, free(list);
X  while(list=nxt);
X}
X
Xdocomplete(s)
Xunsigned char *s;
X{
Xstruct list *list=getnames(".");
Xunsigned char *name;
Xif(!list) return;
Xname=complete(list,s);
Xif(name) strcpy(s,name);
Xelse eputc(7);
Xrmlist(list);
X}
X
X*/
X
Xexsave()
X{
Xunsigned char sting[PATHSIZE];
Xif(!changed)
X {
X eexit();
X return;
X }
Xif(gfnam[0]==0)
X {
X if(!getl("Save file",gfnam))
X  return;
X fixpath(gfnam);
X }
Xelse if(!backup)
X {
X sprintf(sting,"/bin/cp %s %s~",gfnam,gfnam);
X cpos(height-2,0);
X system(sting);
X cpos(ypos,xpos);
X }
Xif(saveit1(gfnam))
X {
X sprintf(sting,"\nFile %s saved.\r\n",gfnam);
X if(curwin->next==curwin)
X  {
X  dclose();
X  eputs(sting);
X  leave=1;
X  }
X else
X  eexit();
X }
X}
X
Xsaveit()
X{
Xunsigned char gfnam1[PATHSIZE];
Xunsigned char sting[PATHSIZE];
Xstrcpy(gfnam1,gfnam);
Xif(!getl("Save file",gfnam1))
X return;
Xfixpath(gfnam1);
Xif(!gfnam1[0]) return;
Xif(!backup && !strcmp(gfnam1,gfnam))
X {
X sprintf(sting,"/bin/cp %s %s~",gfnam,gfnam);
X cpos(height-2,0);
X system(sting);
X cpos(ypos,xpos);
X }
Xsaveit1(gfnam1);
X}
X
Xfindline()
X{
Xunsigned char sting[PATHSIZE];
XTXTSIZ x;
Xsting[0]=0;
Xif(!getl("Goto line",sting))
X return;
Xx=atol(sting);
Xif(!x)
X {
X msg("\\iBad line number\\i");
X return;
X }
Xx--;
Xbof();
Xfor(;x;x--)
X {
X if(!fmfnl()) break;
X fmgetc();
X }
Xnewy=1;
Xcntr=1;
Xreturn;
X}
X
Xrepeat()
X{
Xunsigned char sting[PATHSIZE];
XTXTSIZ x;
Xsting[0]=0;
Xif(!getl("Repeat",sting))
X return;
Xx=atol(sting);
Xnrepeatamnt=x;
X}
X
Xint search()
X{
Xif(options&s_backwards)
X {
X while(fmnote())
X  {
X  fmrgetc();
X  if(options&s_ignore) { if(!fmicmp(sstring,len)) return 1; }
X  else if(!fmcmp(sstring,len)) return 1;
X  }
X return 0;
X }
Xelse
X {
X while(fmnote()+len<=fmsize())
X  {
X  if(!(options&s_ignore)) { if(!fmcmp(sstring,len)) return 1; }
X  else if(!fmicmp(sstring,len)) return 1;
X  fmgetc();
X  }
X return 0;
X }
X}
X
Xfind(c)
X{
Xint x;
Xint opts=0;
Xint n=0;
Xint rest=0;
Xint rlen;
XTXTSIZ p;
Xunsigned char ss[80];
Xextend=0;
Xif(c=='L'-'@' && sstring[0]) goto srch;
Xss[0]=0;
Xif(!(x=getl("Search string",ss))) return;
Xif(x== -1)
X {
X if(ss[0])
X  strcpy(sstring,ss);
X goto srch;
X }
Xif(!ss[0]) return;
Xstrcpy(sstring,ss);
Xss[0]=0;
Xif(!getl("(I)gnore case (B)ackwards (R)eplace n",ss)) return;
Xfor(x=0;ss[x];x++)
X {
X if(ss[x]=='i' || ss[x]=='I') opts|=s_ignore;
X if(ss[x]=='b' || ss[x]=='B') opts|=s_backwards;
X if(ss[x]=='r' || ss[x]=='R') opts|=s_replace;
X if(ss[x]=='x' || ss[x]=='X') opts|=s_regex;
X if(ss[x]>='0' && ss[x]<='9') n*=10, n+=ss[x]-'0';
X }
Xoptions=opts;
Xif(options&s_replace)
X {
X ss[0]=0;
X if(!(x=getl("Replace with",ss))) return;
X if(x!= -1)
X  strcpy(rstring,ss);
X }
Xsrch:
Xif(!sstring[0]) return;
Xlen=strlen(sstring);
Xrlen=strlen(rstring);
Xrpt:
Xp=fmnote();
Xif(search())
X {
X if(!(options&s_backwards)) fmpoint(fmnote()+len);
X if(options&s_replace)
X  {
X  if(rest) goto dn;
X  newy=1;
X  upd=1;
X  cntr=1;
X  extend=0;
X  dupdate();
Xagain:
X  x=nquery(
X  "Replace? (Yes, No, ^C to abort or R to replace rest without asking)");
X  if(x=='n' || x=='N') goto rpt;
X  if(x== 3) return;
X  if(x=='y' || x=='Y') goto dn;
X  if(x=='r' || x=='R')
X   {
X   rest=1;
X   goto dn;
X   }
X  goto again;
Xdn:
X  if(options&s_backwards)
X   {
X   fmdel(len);
X   fminss(rstring,rlen);
X   }
X  else
X   {
X   fmpoint(fmnote()-len);
X   fmdel(len);
X   fminss(rstring,rlen);
X   fmpoint(fmnote()+rlen);
X   }
X  if(n)
X   if(n==1) goto exi;
X   else n--;
X  goto rpt;
X  }
X else if(n)
X  {
X  if(n==1) goto exi;
X  n--;
X  goto rpt;
X  }
X }
Xelse
X {
X if(!(options&s_replace) || n>1)
X  msg("Not found");
X fmpoint(p);
X return;
X }
Xexi:
Xcntr=1;
Xnewy=1;
X}
X
Xfindnext()
X{
Xfind('L'-'@');
X}
X
Xfindfirst()
X{
Xfind(0);
X}
X
Xstruct buffer *markbuf;
X
Xsetbeg()
X{
Xmarkb=fmnote();
Xif(markbuf!=curbuf)
X {
X markbuf=curbuf;
X marke=0;
X }
X}
X
Xsetend()
X{
Xmarke=fmnote();
Xif(markbuf!=curbuf)
X {
X markbuf=curbuf;
X markb=0;
X }
X}
X
Xwriteblk()
X{
Xunsigned char gfnam1[PATHSIZE];
Xunsigned char sting[PATHSIZE];
XTXTSIZ sv=fmnote();
Xstruct buffer *bt=curbuf;
Xif(markbuf)
X {
X stbuf(curbuf);
X ldbuf(markbuf);
X }
Xif(markb>=marke || marke>fmsize() || !markbuf)
X {
X msg("\\iNo block\\i");
X if(markbuf)
X  ldbuf(bt);
X return;
X }
Xgfnam1[0]=0;
Xif(!getl("File to write block to",gfnam1))
X {
X ldbuf(bt);
X return;
X }
Xfixpath(gfnam1);
Xhandle=fopen(gfnam1,"w+");
Xif(handle)
X {
X fmpoint(markb);
X if(!fmsave(handle,marke-markb))
X  {
X  sprintf(sting,"\\iError writting to file %s\\i",gfnam1);
X  msg(sting);
X  }
X stbuf(markbuf);
X ldbuf(bt);
X fmpoint(sv);
X fclose(handle);
X }
Xelse
X {
X ldbuf(bt);
X sprintf(sting,"\\iError opening file %s\\i",gfnam1);
X msg(sting);
X }
X}
X
Xcmdblk()
X{
Xunsigned char ch;
Xint fr[2];
Xint fw[2];
Xunsigned char gfnam1[PATHSIZE];
Xunsigned char sting[PATHSIZE];
XTXTSIZ sv=fmnote(), sz;
Xstruct buffer *bt=curbuf;
Xif(markbuf)
X {
X stbuf(curbuf);
X ldbuf(markbuf);
X }
Xif(markb>=marke || marke>fmsize() || !markbuf)
X {
X marke=markb=0;
X markbuf=bt;
X }
Xgfnam1[0]=0;
Xif(markb==marke)
X {
X if(!getl("Command to capture:",gfnam1))
X  {
X  ldbuf(bt);
X  return;
X  }
X }
Xelse if(!getl("Command to pipe block through:",gfnam1))
X {
X ldbuf(bt);
X return;
X }
Xfixpath(gfnam1);
Xpipe(fr);
Xpipe(fw);
Xdclose();
Xeputc('\n');
Xaclose();
Xif(!fork())
X {
X signorm();
X printf("%s\n",gfnam1);
X if(markb!=marke) close(0);
X close(1);
X if(markb!=marke) dup(fw[0]);
X dup(fr[1]);
X close(fw[0]);
X close(fr[1]);
X close(fw[1]);
X close(fr[0]);
X execl("/bin/sh","/bin/sh","-c",gfnam1,0);
X exit(0);
X }
Xclose(fr[1]);
Xclose(fw[0]);
Xif(fork())
X {
X if(bt==markbuf) if(sv>=markb && sv<marke) sv=markb;
X sz=marke-markb;
X fmpoint(markb);
X if(sz) fmdel(sz);
X if(bt==markbuf) if(sv>markb) sv-=sz;
X close(fw[1]);
X stbuf(markbuf);
X ldbuf(bt);
X fmpoint(sv);
X markbuf=bt;
X markb=sv;
X while(1==read(fr[0],&ch,1)) putchar(ch), fminsc(ch), fmgetc();
X fflush(stdout);
X close(fr[0]);
X marke=fmnote();
X fmpoint(markb);
X wait(0);
X wait(0);
X }
Xelse
X {
X fmpoint(markb);
X while(fmnote()!=marke)
X  {
X  ch=fmgetc();
X  write(fw[1],&ch,1);
X  }
X close(fw[1]);
X _exit();
X }
Xaopen();
Xrewrite();
Xupdall=1;
Xnewy=1;
X}
X
Xdelblk()
X{
Xstruct buffer *bt=curbuf;
XTXTSIZ x=fmnote();
XTXTSIZ sz;
Xif(markbuf)
X {
X stbuf(curbuf);
X ldbuf(markbuf);
X }
Xif(marke<=markb || marke>fmsize() || !markbuf)
X {
X msg("\\iNo block\\i");
X if(markbuf)
X  ldbuf(bt);
X return;
X }
Xif(bt==markbuf) if(x>=markb && x<marke) x=markb;
Xsz=marke-markb;
Xfmpoint(markb);
Xfmdel(sz);
Xif(bt==markbuf) if(x>markb) x-=sz;
Xstbuf(markbuf);
Xldbuf(bt);
Xfmpoint(x);
Xupdall=1;
Xnewy=1;
X}
X
Xmoveblk()
X{
Xunsigned char *t;
XTXTSIZ sz, x=fmnote();
Xstruct buffer *bt=curbuf;
Xif(markbuf)
X {
X stbuf(curbuf);
X ldbuf(markbuf);
X }
Xif(marke<=markb || marke>fmsize() || !markbuf)
X {
X msg("\\iNo block\\i");
X if(markbuf)
X  ldbuf(bt);
X return;
X }
Xif(x>=markb && x<=marke && bt==markbuf)
X {
X x=markb;
X ldbuf(bt);
X return;
X }
Xsz=marke-markb;
Xt=(unsigned char *)malloc(sz);
Xfmpoint(markb);
Xfmcpy(t,sz);
Xfmdel(sz);
Xif(bt==markbuf) if(x>markb) x-=sz, newy=1;
Xstbuf(markbuf); 
Xldbuf(bt);
Xfmpoint(x);
Xfminss(t,sz);
Xfree(t);
Xmarkb=x;
Xmarke=x+sz;
Xmarkbuf=bt;
Xupdall=1;
X}
X
Xcpyblk()
X{
Xunsigned char *t;
XTXTSIZ x=fmnote();
Xstruct buffer *bt=curbuf;
XTXTSIZ sz;
Xif(markbuf)
X {
X stbuf(curbuf);
X ldbuf(markbuf);
X }
Xif(marke<=markb || marke>fmsize() || !markbuf)
X {
X msg("\\iNo block\\i");
X if(markbuf)
X  ldbuf(bt);
X return;
X }
Xsz=marke-markb;
Xt=(unsigned char *)malloc(sz);
Xfmpoint(markb);
Xfmcpy(t,sz);
Xstbuf(markbuf);
Xldbuf(bt); 
Xfmpoint(x);
Xfminss(t,sz);
Xfree(t);
Xmarke=x+sz;
Xmarkb=x;
Xmarkbuf=bt;
Xupdall=1;
X}
X
Xinsfil()
X{
Xunsigned char gfnam1[PATHSIZE];
Xunsigned char sting[PATHSIZE];
Xgfnam1[0]=0;
Xif(!getl("File to insert",gfnam1)) return;
Xfixpath(gfnam1);
Xhandle=fopen(gfnam1,"r");
Xif(handle)
X {
X if(!fminsfil(handle))
X  {
X  sprintf(sting,"\\iError inserting file %s\\i",gfnam1);
X  msg(sting);
X  }
X newy=1;
X fclose(handle);
X }
Xelse
X {
X sprintf(sting,"\\iError opening file %s\\i",gfnam1);
X msg(sting);
X return;
X }
X}
X
Xpush()
X{
Xdclose();
Xshell();
Xrewrite();
X}
X
Xsuspend()
X{
Xdclose();
Xsusp();
Xrewrite();
X}
X
Xioverwrite() { overwrite= !overwrite; }
Xiwrap() { wrap= !wrap; }
Xiautoind() { autoind= !autoind; }
Xitabmagic() { tabmagic= !tabmagic; }
Xipic() { pic= !pic; }
Xooverwrite() { overwrite=0; }
Xowrap() { wrap=0; }
Xoautoind() { autoind=0; }
Xotabmagic() { tabmagic=0; }
Xopic() { pic=0; }
X
Xsetrmargin()
X{
Xunsigned char sting[80];
Xsprintf(sting,"%d",rmargin);
Xif(!getl("Right margin",sting)) return;
Xrmargin=atol(sting);
Xif(rmargin<2) rmargin=2;
X}
X
Xmode()
X{
Xunsigned char s[PATHSIZE];
Xs[0]=0;
Xstrcat(s,"(R)ght Mrgn ");
Xif(overwrite) strcat(s,"(I) Overtype ");
Xelse strcat(s,"(I)nsert ");
Xif(tabmagic) strcat(s,"(T)ab Magic on ");
Xelse strcat(s,"(T)ab Magic off ");
Xif(wrap) strcat(s,"(W)rap on ");
Xelse strcat(s,"(W)rap off ");
Xif(autoind) strcat(s,"(A) Indent on ");
Xelse strcat(s,"(A) Indent off ");
Xif(pic) strcat(s,"(P)ic on: ");
Xelse strcat(s,"(P)ic off: ");
Xswitch(query(s))
X {
X case 'i':
X case 'I':
X case 'o':
X case 'O':
X  ioverwrite();
X  break;
X case 'W':
X case 'w':
X  iwrap();
X  break;
X case 'a':
X case 'A':
X  iautoind();
X  break;
X case 't':
X case 'T':
X  itabmagic();
X  break;
X case 'p':
X case 'P':
X  ipic();
X  break;
X case 'r':
X case 'R':
X  setrmargin();
X }
X}
X
X/* Center the current line */
X
Xctrlin()
X{
XTXTSIZ x;
Xint tmp=pic;
Xint y;
Xunfill();
Xbol();
Xwhile(y=fmrc(), y==' ' || y=='\t') fmdel(1);
Xeol();
Xx=fmnote();
Xbol();
Xif(x-fmnote()>rmargin) return;
Xy=(rmargin/2)-(x-fmnote())/2;
Xwhile(y--) fminsc(' ');
Xpic=1;
Xudnarw();
Xpic=tmp;
X}
X
X/* Reformat a paragraph */
X
Xreformat()
X{
XTXTSIZ tmp,idt,idt1,b,e,cur,ncur= -1;
Xunsigned char ch;
X
Xcur=fmnote();		/* Save cursor position */
X
X/* First, determine indentation on current or first non-blank line */
X
Xup:
Xidt=calcs();
Xif(fmeof()) return;     /* Not if at end of file */
Xif(fmrc()==NL)  /* Ignore any blank lines */
X {
X dnarw();
X goto up;
X }
Xbol();
X
X/* Now find beginning of paragraph */
X/* It will be indicated by a change of indentation or a blank line or bof */
X
Xwhile(fmnote())         /* Beginning is at bof */
X {
X uparw();
X idt1=calcs();
X if(fmrc()==NL) /* Beginning is blank line */
X  {
X  bol();
X  dnarw();
X  break;
X  }
X bol();
X if(idt1>idt) break;
X if(idt1<idt)
X  {
X  dnarw();
X  break;
X  }
X }
X
X/* Point is now at beginning of paragraph (hopefully) */
X/* Set the mark */
X
Xb=fmnote();
X
Xidt=calcs(); bol();	/* Save indentation level of first line of paragraph */
X
X/* Now move to after end of paragraph */
Xwhile(1)
X {
X tmp=fmnote();
X dnarw();
X if(fmnote()==tmp)      /* Paragraph ends on end of file */
X  {
X  eol();
X  fminsc(NL);		/* Stick in a NL */
X  fmgetc();
X  extend=0;		/* I don't think I have to do this but... */
X  break;
X  }
X idt1=calcs();
X if(fmrc()==NL)		/* Paragraph ends on blank line */
X  {
X  bol();
X  break;
X  }
X bol();
X if(idt1>idt) break;    /* Paragraph ends when indentation increases */
X }
X
X/* Point now after end of paragraph, cut paragraph */
Xe=fmnote();
X
X/* Now reinsert paragraph in a nice way */
X
Xif(e>b)
X {
X unsigned oldwrap=wrap;
X unsigned oldoverwrite=overwrite;
X unsigned oldauto=autoind;
X unsigned flag=0;
X unsigned char ccc=0;
X TXTSIZ ppp=b; 
X undoflag=0;
X overwrite=0;
X wrap=1;
X while(ppp!=e)
X  {
X  tmp=fmnote();
X  fmpoint(ppp);
X  if(ppp>=cur && ncur== -1) ncur=tmp;
X  ppp++;
X  ch=fmrc();
X  fmpoint(tmp);
X  if(ch==NL) ch=' ';
X  if(ch==' ' || ch==TAB)
X   {
X   if(flag==0) itype(ch);
X   else if(flag==1 && ch!='\t')
X     {
X     itype(' ');
X     if(!(ccc=='.' || ccc==':' || ccc=='?' || ccc=='!' || ccc=='\"' ||
X          ccc==';')) flag=2;
X     }
X   else if(ch=='\t') itype('\t');
X   }
X  else
X   {
X   flag=1;
X   itype(ch);
X   }
X  ccc=ch;
X  }
X autoind=0;
X if(flag) itype(NL);
X /* Make undo record for entered paragraph */
X  {
X  /* New record */
X  struct undorec *it=(struct undorec *)malloc(sizeof(struct undorec));
X  if(redorecs) killredo();
X  it->next=undorecs;
X  undorecs=it;
X  it->size=fmnote()-e;
X  it->where=e;
X  it->buffer=0;
X  ++nundorecs;
X  if(nundorecs==20)
X   {
X   struct undorec *p;
X   for(it=undorecs;it->next;p=it,it=it->next);
X   if(it->buffer) free(it->buffer);
X   free(it);
X   p->next=0;
X   }
X  }
X
X undoflag=1;
X wrap=oldwrap;
X overwrite=oldoverwrite;
X autoind=oldauto;
X fmpoint(b);
X fmdel(e-b);
X fmpoint(ncur-(e-b));
X newy=1;
X }
X}
X
Xkillword()
X{
Xunsigned char ch;
Xch=fmrc();
Xif(((ch>='a' && ch<='z') || (ch>='A' && ch <='Z')) && !fmeof())
X do
X  {
X  delch();
X  ch=fmrc();
X  } while (((ch>='a' && ch<='z') || (ch>='A' && ch <='Z')) && !fmeof());
Xelse
X if((ch==' ' || ch==TAB || ch==NL) && !fmeof())
X  do
X   {
X   delch();
X   ch=fmrc();
X   } while (!fmeof() && (ch==' ' || ch==NL || ch==TAB));
Xelse
X if(ch>='0' && ch<='9' && !fmeof())
X  do
X   {
X   delch();
X   ch=fmrc();
X   } while (!fmeof() && ch>='0' && ch<='9');
Xelse delch();
X}
X
Xbackword()
X{
Xunsigned char ch;
Xif(fmnote())
X {
X fmpoint(fmnote()-1);
X ch=fmgetc();
X if((ch>='a' && ch<='z') || (ch>='A' && ch <='Z'))
X  {
Xup:
X  backs();
X  if(fmnote())
X   {
X   fmpoint(fmnote()-1);
X   ch=fmrc();
X   fmgetc();
X   if((ch>='a' && ch<='z') || (ch>='A' && ch <='Z')) goto up;
X   }
X  }
X else if(ch==' ' || ch==TAB || ch==NL)
X   {
Xup1:
X   backs();
X   if(fmnote())
X    {
X    fmpoint(fmnote()-1);
X    ch=fmrc();
X    fmgetc();
X    if(ch==' ' || ch==TAB || ch==NL) goto up1;
X    }
X   }
X else if(ch>='0' && ch<='9')
X   {
Xup2:
X   backs();
X   if(fmnote())
X    {
X    fmpoint(fmnote()-1);
X    ch=fmrc();
X    fmgetc();
X    if(ch>='0' && ch<='9') goto up2;
X    }
X   }
X else backs();
X }
X}
X
Xword()
X{
Xint c;
Xif(fmnote()==fmsize()) return 0;
Xc=fmrc();
Xif(c>='a' && c<='z') return 1;
Xif(c>='A' && c<='Z') return 1;
Xif(c>='0' && c<='9') return 1;
Xreturn 0;
X}
X
Xwrdl()
X{
Xextend=0;
Xnewy=1;
Xif(!fmnote()) return;
Xfmrgetc();
Xwhile(!word())
X {
X if(!fmnote()) return;
X fmrgetc();
X }
Xwhile(word())
X {
X if(!fmnote()) return;
X fmrgetc();
X }
Xfmgetc();
X}
X
Xwrdr()
X{
Xextend=0;
Xnewy=1;
Xwhile(!word())
X {
X if(fmnote()==fmsize()) return;
X fmgetc();
X }
Xwhile(word())
X {
X if(fmnote()==fmsize()) return;
X fmgetc();
X }
X}
X
Xunsigned char lft[]="{[(<`";
Xunsigned char rht[]="}])>'";
X
Xgotomatching()
X{
XTXTSIZ cur=fmnote(),cnt;
Xunsigned char c;
Xint x;
Xextend=0;
Xif(fmeof()) return;
Xc=fmrc();
Xfor(x=0;x!=strlen(lft);++x)
X if(lft[x]==c)
X  {
X  cnt=0;
X  while(!fmeof())
X   {
X   c=fmgetc();
X   if(lft[x]==c) ++cnt;
X   if(rht[x]==c)
X    if(!--cnt)
X     {
X     newy=1;
X     fmrgetc();
X     return;
X     }
X   }
X  fmpoint(cur);
X  return;
X  }
X else if(rht[x]==c)
X  {
X  cnt=1;
X  while(fmnote())
X   {
X   c=fmrgetc();
X   if(rht[x]==c) ++cnt;
X   if(lft[x]==c)
X    if(!--cnt)
X     {
X     newy=1;
X     return;
X     }
X   }
X  fmpoint(cur);
X  return;
X  }
X}
X
Xint setindent()
X{
XTXTSIZ idt,idt1,cur=fmnote(),tmp;
Xif(curbuf==markbuf && cur>=markb && cur<marke) return 1;
Xmarkbuf=curbuf; markb=0; marke=0;
X/* Find beginning */
Xidt=calcs();
Xif(fmeof()) goto done;
Xif(fmrc()==NL) goto done;
Xwhile(fmnrnl())
X {
X idt1=calcs();
X/* if(fmrc()!=NL) if(idt1<idt) Use this line instead of one below for
X   setindent to ignore blank lines */
X if(fmrc()==NL || idt1<idt)
X  {
X  if(fmfnl()) fmgetc();
X  break;
X  }
X }
X/* Point is now at beginning of block (hopefully) */
X/* Set the mark */
Xmarkb=fmnote();
X
Xwhile(fmfnl())
X {
X fmgetc();
X idt1=calcs();
X/* if(fmrc()!=NL) if(idt1<idt) Use this line instead of one below for
X   setindent to ignore blank lines */
X if(fmrc()==NL || idt1<idt)
X  {
X  bol();
X  break;
X  }
X }
Xmarke=fmnote();
Xdone: fmpoint(cur);
Xreturn 0;
X} 
X 
Xindentr()
X{
XTXTSIZ cur=fmnote(),tmp;
Xif(!setindent()) return;
Xfmpoint(markb);
Xwhile(fmnote()<marke)
X {
X calcs();
X if(fmeof()) break;
X if(fmrc()!=NL)
X  {
X  if(fmnote()<=cur) ++cur;
X  fminsc(' ');
X  }
X if(fmfnl()) fmgetc();
X else break;
X }
Xdone: fmpoint(cur);
Xreturn;
X}
X
Xindentl()
X{
XTXTSIZ cur=fmnote(),idt,tmp;
Xif(!setindent()) return;
Xfmpoint(markb);
Xwhile(fmnote()<marke)
X {
X idt=calcs();
X if(fmeof()) break;
X if(fmrc()!=NL) if(!idt) goto done;
X if(fmfnl()) fmgetc();
X else break;
X }
Xfmpoint(markb);
Xwhile(fmnote()<marke)
X {
X calcs();
X if(fmeof()) break;
X if(fmrc()!=NL)
X  {
X  if(fmnote()<=cur) --cur;
X  fmrgetc();
X  fmdel(1);
X  }
X if(fmfnl()) fmgetc();
X else break;
X }
Xdone: fmpoint(cur);
Xreturn;
X}
X
Xstruct window *curwin;
Xstruct buffer *curbuf;
Xstruct window *topwin;
X
Xldbuf(zuffer)
Xstruct buffer *zuffer;
X{
Xif(zuffer==curbuf) return;
Xcurbuf=zuffer;
Xbackup=zuffer->backup;
Xstrcpy(gfnam,zuffer->gfnam);
Xbufsiz=zuffer->bufsiz;
Xbuffer=zuffer->buf;
Xfilend=zuffer->filend;
Xhole=zuffer->hole;
Xehole=zuffer->ehole;
Xchanged=zuffer->changed;
Xundorecs=zuffer->undorecs;
Xnundorecs=zuffer->nundorecs;
Xredorecs=zuffer->redorecs;
Xundoptr=0;
X}
X
Xldbuf1(zuffer)
Xstruct buffer *zuffer;
X{
Xcurbuf=zuffer;
Xbackup=zuffer->backup;
Xstrcpy(gfnam,zuffer->gfnam);
Xbufsiz=zuffer->bufsiz;
Xbuffer=zuffer->buf;
Xfilend=zuffer->filend;
Xhole=zuffer->hole;
Xehole=zuffer->ehole;
Xchanged=zuffer->changed;
Xundorecs=zuffer->undorecs;
Xredorecs=zuffer->redorecs;
Xnundorecs=zuffer->nundorecs;
Xundoptr=0;
X}
X
Xstbuf(zuffer)
Xstruct buffer *zuffer;
X{
Xzuffer->backup=backup;
Xstrcpy(zuffer->gfnam,gfnam);
Xzuffer->bufsiz=bufsiz;
Xzuffer->buf=buffer;
Xzuffer->filend=filend;
Xzuffer->hole=hole;
Xzuffer->ehole=ehole;
Xzuffer->changed=changed;
Xzuffer->undorecs=undorecs;
Xzuffer->nundorecs=nundorecs;
Xzuffer->redorecs=redorecs;
Xundoptr=0;
X}
X
Xldwin(window)
Xstruct window *window;
X{
Xsaddr=window->saddr;
Xxoffset=window->xoffset;
Xpic=window->pic;
Xautoind=window->autoind;
Xoverwrite=window->overwrite;
Xwrap=window->wrap;
Xtabmagic=window->tabmagic;
Xrmargin=window->rmargin;
Xextend=window->extend;
Xldbuf1(window->buffer);
Xfmpoint(window->cursor);
X}
X                                   
Xstwin(window)
Xstruct window *window;
X{ 
Xwindow->saddr=saddr;
Xwindow->xoffset=xoffset;
Xwindow->pic=pic;
Xwindow->autoind=autoind;
Xwindow->overwrite=overwrite;
Xwindow->wrap=wrap;
Xwindow->tabmagic=tabmagic;
Xwindow->rmargin=rmargin;
Xwindow->extend=extend;
Xwindow->cursor=fmnote();
Xstbuf(window->buffer);
X}
X
Xwfit()
X{
Xstruct window *x;
Xint total;
Xupdall=1;
Xnewy=1;
Xup:
Xtotal=height-wind;
Xfor(x=topwin;1;x=x->next)
X {
X if(x->height<3) x->height=3;
X if(curwin==x && total>=3) break;
X if(total<3) goto in;
X total-=x->height;
X if(total<0)
X  {
X  in:
X  topwin=topwin->next;
X  goto up;
X  }
X }
Xfor(x=topwin,total=wind;1;x=x->next)
X {
X x->wind=total;
X if(x->height<3) x->height=3;
X total+=x->height;
X if(total>=height || x->next==topwin)
X  {
X  total-=x->height;
X  x->height=height-total;
X  return;
X  }
X }
X}
X
Xwnext()
X{
Xstwin(curwin);
Xcurwin=curwin->next;
Xldwin(curwin);
Xwfit();
X}
X
Xwprev()
X{
Xstwin(curwin);
Xcurwin=curwin->prev;
Xldwin(curwin);
Xwfit();
X}
X
Xwexplode()
X{
Xstruct window *x;
Xint y;
Xif(curwin->height!=height-wind)
X { /* Make curwin only */
X topwin=curwin;
X x=topwin;
X do
X  {
X  x->height=height-wind;
X  x->wind=wind;
X  x=x->next;
X  }
X  while(x!=topwin);
X newy=1;
X }
Xelse
X { /* Show all windows */
X x=topwin; y=0;
X do y++, x=x->next; while(x!=topwin);
X if((height-wind)/y<3) y=3;
X else y=(height-wind)/y;
X x=topwin;
X do x->height=y, x=x->next; while(x!=topwin);
X wfit();
X }
X}
X
Xwgrow()
X{
Xif(curwin->wind+curwin->height==height)
X {
X if(curwin->wind!=wind) if(curwin->prev->height>3)
X  curwin->prev->height--, curwin->height++, curwin->wind--, updall=1;
X }
Xelse
X {
X if(curwin->next->height>3)
X  curwin->height++, curwin->next->wind++, curwin->next->height--, updall=1;
X }
Xnewy=1;
X}
X
Xwshrink()
X{
Xif(curwin->wind+curwin->height==height)
X {
X if(curwin->wind!=wind) if(curwin->height>3)
X curwin->height--, curwin->prev->height++, curwin->wind++, updall=1;
X }
Xelse
X {
X if(curwin->height>3)
X curwin->height--, curwin->next->wind--, curwin->next->height++, updall=1;
X }
Xnewy=1;
X}
X
Xwsplit()
X{
Xstruct window *new;
Xif(curwin->height<6) return;
Xnew=(struct window *)malloc(sizeof(struct window));
Xnew->buffer=curbuf;
Xstwin(new);
Xnew->next=curwin->next;
Xnew->prev=curwin;
Xcurwin->next->prev=new;
Xcurwin->next=new;
Xif(curwin->height&1)
X {
X curwin->height/=2;
X new->height=curwin->height+1;
X }
Xelse
X {
X curwin->height/=2;
X new->height=curwin->height;
X }
Xif(curwin->hheight&1)
X {
X curwin->hheight/=2;
X new->hheight=curwin->hheight+1;
X }
Xelse
X {
X curwin->hheight/=2;
X new->hheight=curwin->hheight;
X }
Xnew->wind=curwin->wind+curwin->height;
Xcurwin=new;
Xcurbuf->count++;
Xupdall=1;
Xnewy=1;
X}
X
Xwedit()
X{
Xunsigned char gfnam1[PATHSIZE];
Xunsigned char sting[PATHSIZE];
Xint c;
Xstruct window *x;
Xstwin(curwin);
Xif(curbuf->count==1 && curbuf->changed)
X {
X c=askyn("Do you really want to throw away this file?"); 
X if(c=='N') return;
X if(c== -1) return;
X }
Xgfnam1[0]=0;
Xif(!getl("File to edit",gfnam1)) return;
Xfixpath(gfnam1);
Xx=topwin;
Xdo
X {
X if(!strcmp(gfnam1,x->buffer->gfnam))
X  {
X  if(curbuf->count==1)
X   {
X   killredo();
X   killundo();
X   free(curbuf->buf), free(curbuf);
X   if(curbuf==markbuf) markbuf=0;
X   }                           
X  else 
X   curbuf->count--;
X  curwin->buffer=x->buffer;
X  curwin->buffer->count++;
X  ldbuf(x->buffer);
X  bof();
X  return;
X  }
X x=x->next;
X }
X while(x!=topwin);
Xstrcpy(gfnam,gfnam1);
Xstmode(gfnam);
Xif(curbuf->count==1) free(curbuf->buf),
X                             free(curbuf);
Xelse curbuf->count--;
Xcurwin->buffer=(struct buffer *)malloc(sizeof(struct buffer));
Xcurbuf=curwin->buffer;
Xcurbuf->count=1;
Xfmopen();
Xbof();
Xhandle=fopen(gfnam1,"r");
Xif(handle)
X {
X if(!fminsfil(handle))
X  {
X  sprintf(sting,"\\iError loading file %s\\i",gfnam1);
X  msg(sting);
X  }
X changed=0;
X newy=1;
X fclose(handle);
X }
Xelse
X {
X newy=1;
X upd=1;
X if(errno==ENOENT)
X  {
X  dupdate();
X  msgout(curwin->wind+1,"New File",0,0);
X  cpos(curwin->wind+1,0);
X  backup=1;
X  }
X else
X  {
X  dupdate();
X  msgout(curwin->wind+1,"\\iError opening file\\i",0,1);
X  cpos(curwin->wind+1,0);
X  }
X dokey(anext());
X return;
X }
X}
X
Xrtn()
X{
Xtype(NL);
X}
X
Xstquote()
X{
Xquoteflg=1;
X}
X
Xstquote8th()
X{
Xquote8th=1;
X}
X
XCMD kkm[73]=
X{
X {"uparw",0,uuparw},
X {"rtarw",0,urtarw},
X {"ltarw",0,ultarw},
X {"dnarw",0,udnarw},
X {"eol",0,eol},
X {"pgdn",0,pgdn},
X {"bol",0,bol},
X {"pgup",0,pgup},
X {"ctrlin",0,ctrlin},
X {"setbeg",0,setbeg},
X {"cpyblk",0,cpyblk},
X {"saveit",0,saveit},
X {"wedit",0,wedit},
X {"findfirst",0,findfirst},
X {"findnext",0,findnext},
X {"wgrow",0,wgrow},
X {"thelp",0,thelp},
X {"wexplode",0,wexplode},
X {"reformat",0,reformat},
X {"setend",0,setend},
X {"findline",0,findline},
X {"moveblk",0,moveblk},
X {"wnext",0,wnext},
X {"wprev",0,wprev},
X {"wsplit",0,wsplit},
X {"insfil",0,insfil},
X {"wshrink",0,wshrink},
X {"bof",0,bof},
X {"eof",0,eof},
X {"writeblk",0,writeblk},
X {"exsave",0,exsave},
X {"delblk",0,delblk},
X {"push",0,push},
X {"suspend",0,suspend},
X {"eexit",0,eexit},
X {"delch",0,delch},
X {"inss",0,inss},
X {"backs",0,backs},
X {"type",0,type},
X {"rtn",0,rtn},
X {"backword",0,backword},
X {"rewrite",0,rewrite},
X {"mode",0,mode},
X {"killword",0,killword},
X {"wrdr",0,wrdr},
X {"dellin",0,dellin},
X {"wrdl",0,wrdl},
X {"stquote8th",0,stquote8th},
X {"stquote",0,stquote},
X {"gotomatching",0,gotomatching},
X {"indentl",0,indentl},
X {"indentr",0,indentr},
X {"undo",0,undo},
X {"redo",0,redo},
X {"killlin",0,killlin},
X {"deleol",0,deleol},
X {"ioverwrite",0,ioverwrite},
X {"iwrap",0,iwrap},
X {"iautoind",0,iautoind},
X {"itabmagic",0,itabmagic},
X {"ipic",0,ipic},
X {"ooverwrite",0,ooverwrite},
X {"owrap",0,owrap},
X {"oautoind",0,oautoind},
X {"otabmagic",0,otabmagic},
X {"opic",0,ipic},
X {"setrnargin",0,setrmargin},
X {"cmdblk",0,cmdblk},
X {"repeat",0,repeat},
X {"macrob",0,macrob},
X {"macroe",0,macroe},
X {"macrodo",0,macrodo},
X {"wait",0,waite}
X };
X
XCONTEXT km={0, "main", 0, 73, kkm};
X
X/** Key sequence processing functions **/
X
Xstruct kmap *curmap;
Xint quoteflg=0;
Xint quote8th=0;
X
Xint record=0;
Xunsigned char *kmacro=0;
Xint kmacrox=0;
Xint kmacrosz=0;
X
Xint macroadd(c)
Xunsigned char c;
X{
Xif(kmacrox+3>=kmacrosz) 
X if(kmacro) kmacro=(unsigned char *)realloc(kmacro,kmacrosz+=10);
X else kmacro=(unsigned char *)malloc(kmacrosz=10);
Xif(c=='\\')
X {
X kmacro[kmacrox++]='\\';
X kmacro[kmacrox++]='\\';
X }
Xelse
X kmacro[kmacrox++]=c;
Xkmacro[kmacrox]=0;
X}
X
Xmacrob()
X{
Xkmacrox=0;
Xrecord=1;
X}
X
Xmacroe()
X{
Xrecord=0;
X}
X
Xint inmacro=0;
X
Xmacrodo()
X{
Xint z=repeatamnt;
Xif(record) return;
Xif(inmacro) return;
Xinmacro=1;
Xrepeatamnt=1;
Xnrepeatamnt=1;
Xtake=kmacro;
Xwaite();
Xrepeatamnt=z;
Xinmacro=0;
X}
X
Xint dokey(k)
Xunsigned char k;
X{
Xint above=curmap->len;
Xint below=0;
Xint new;
Xstruct kmap *r;
Xif(quoteflg)
X {
X quoteflg=0;
X if(k>='@' && k<='_') k-='@';
X if(k>='a' && k<='z') k-='`';
X if(k=='?') k=127;
X type(k);
X goto abcd;
X }
Xgoto in;
Xdo
X {
X new=(above+below)/2;
X if((curmap->keys[new].k&KEYMASK)==k)
X  if(curmap->keys[new].k&KEYSUB)
X   {
X   curmap=(KMAP *)(curmap->keys[new].n);
X   return Kaccept;
X   }
X  else
X   {
X   int h=height, w=width, zz, rpt=repeatamnt;
X   getsize();
X   if(h!=height || w!=width) resize();
X   r=curmap;
X   curmap=km.kmap;
X   nrepeatamnt=1;
X   while(rpt--)
X    {
X    if(rpt>1 && have)
X     {
X     anext();
X     msg("Repeat aborted");
X     undoptr=0;
X     break;
X     }
X    for(zz=0;r->keys[new].n[zz]!= -1;zz+=2)
X     {
X     if(r->keys[new].n[zz])
X      {
X      take=(unsigned char *)r->keys[new].n[zz+1];
X      }
X     else
X      {
X      if(km.cmd[r->keys[new].n[zz+1]].func!=redo &&
X         km.cmd[r->keys[new].n[zz+1]].func!=undo) undoptr=0;
X      km.cmd[r->keys[new].n[zz+1]].func(k);
X      if(leave) goto abcd;
X      }
X     }
X    }
X   abcd:
X   repeatamnt=nrepeatamnt;
X   if(!leave)
X    {
X    if(!uuu) upd=1;
X    else uuu=0;
X    dupdate();
X    }
X   return 0;
X   }
X else if((curmap->keys[new].k&KEYMASK)>k)
X  {
X  above=new;
X  in:
X  if(above==below) break;
X  }
X else if(below==new) break;
X else below=new;
X } while(1);
Xcurmap=km.kmap;
Xreturn Kbad;
X}
X
Xedit()
X{
Xnewy=1;
Xdupdate();
Ximsg();
Xdokey(anext());
Xif(leave) return;
Xupd=1;
Xnewy=1;
Xdo
X dokey(anext());
X while(!leave);
X}
X
Xint waite()
X{
Xwhile(take && *take)
X {
X dokey(anext());
X if(leave) break;
X }
X}
X
Xstruct mpair
X {
X struct mpair *next;
X unsigned char *s;
X int wrap;
X int autoind;
X int pic;
X int overwrite;
X int tabmagic;
X TXTSIZ rmargin;
X };
X
Xstruct mpair *mpairs=0;
X
Xstmode(name)
Xunsigned char *name;
X{
Xint x=strlen(name);
Xstruct mpair *mp=mpairs;
Xwhile(mp)
X if(!strcmp(mp->s,name+x-strlen(mp->s)))
X  {
X  autoind=mp->autoind;
X  wrap=mp->wrap;
X  overwrite=mp->overwrite;
X  pic=mp->pic;
X  tabmagic=mp->tabmagic;
X  rmargin=mp->rmargin;
X  break;
X  }
X else mp=mp->next;
X}
X
Xint process(name,cmds)
Xunsigned char *name;
XCONTEXT *cmds;
X{
XCONTEXT *context=0;
Xunsigned char buf[PATHSIZE];
XKMAP *kmap;
XFILE *fd=fopen(name,"r");
Xint x,y,n,z,macrox,macrosize,*macro,macroc;
Xif(!fd) return -1;
Xprintf("Processing keymap file %s ...",name);
Xfflush(stdout);
Xwhile(fgets(buf,256,fd))
X {
X if(buf[0]=='{')
X  {
X  up:
X  if(!fgets(buf,256,fd)) break;
X  if(buf[0]=='}') continue;
X  if(helpsize+strlen(buf)>helpblksize)
X   {
X   if(help) help=(unsigned char *)realloc(help,helpblksize+strlen(buf)+320);
X   else help=(unsigned char *)malloc(strlen(buf)+320);
X   helpblksize+=strlen(buf)+320;
X   }
X  strcat(help,buf);
X  helpsize=strlen(help);
X  ++helplines;
X  goto up;
X  }
X if(buf[0]=='*')
X  {
X  struct mpair *mp=(struct mpair *)calloc(sizeof(struct mpair),1);
X  int c=0;
X  mp->next=mpairs;
X  mp->rmargin=76;
X  mpairs=mp;
X  for(x=0;buf[x];x++)
X   if(buf[x]==' ' || buf[x]=='\t' || buf[x]=='\n')
X    {
X    c=buf[x];
X    buf[x]=0;
X    break;
X    }
X  mp->s=strdupp(buf+1);
X  buf[x]=c;
X  while(buf[x])
X   if(buf[x]!=' ' && buf[x]!='\t' && buf[x]!='\n') break;
X   else x++;
X  while(buf[x] && buf[x]!=' ' && buf[x]!='\t' && buf[x]!='\n')
X   {
X   switch(buf[x])
X    {
X   case 'O':
X   case 'o': mp->overwrite=1;
X   break;
X   case 'W':
X   case 'w': mp->wrap=1;
X   break;
X   case 'a':
X   case 'A': mp->autoind=1;
X   break;
X   case 'p':
X   case 'P': mp->pic=1;
X   break;
X   case '0': case '1': case '2': case '3': case '4': case '5': case '6':
X   case '7': case '8': case '9':
X   mp->rmargin=buf[x++]-'0';
X   while(buf[x]>='0' && buf[x]<='9') mp->rmargin=mp->rmargin*10+buf[x++]-'0';
X   --x;
X   break;
X   case 't':
X   case 'T': mp->tabmagic=1;
X    }
X   x++;
X   }
X  continue;
X  }
X if(buf[0]==':' && buf[1]!=' ' && buf[1]!='\t')
X  {
X  for(x=0;buf[x];x++)
X   if(buf[x]==' ' || buf[x]=='\t' || buf[x]=='\n')
X    {
X    buf[x]=0;
X    break;
X    }
X  context=cmds;
X  while(strcmp(buf+1,context->name))
X   {
X   context=context->next;
X   if(!context)
X    {
X    printf("Unknown context name in keyboard file\n");
X    return -1;
X    }
X   }
X  continue;
X  }
X for(x=0;buf[x];x++) if(buf[x]==' ' || buf[x]=='\t' || buf[x]=='\n' ||
X                        buf[x]==',') break;
X if(buf[0]==' ' || buf[0]=='\t' || buf[0]=='\n' || !buf[x]) continue;
X if(!context)
X  {
X  printf("No context selected for key\n");
X  return -1;
X  }
X if(buf[0]=='\"')
X  {
X  int q;
X  x=0;
X  for(q= ++x;buf[q];++q)
X   if(buf[q]=='\"' && buf[q-1]!='\\' || buf[q]=='\n') break;
X  macroc=buf[q]; buf[q]=0;
X  macro=(int *)malloc(sizeof(int)*2);
X  macrosize=2;
X  macrox=0;
X  macro[macrox++]=1;
X  macro[macrox++]=(int)strdupp(buf+x);
X  buf[q]=macroc;
X  if(macroc=='\"') x=q+1;
X  else x=q;
X  }
X else
X  {
X  macroc=buf[x];
X  buf[x]=0;
X  for(y=0;y!=context->size;y++)
X    if(!strcmp(context->cmd[y].name,buf)) goto foundit;
X  printf("Key function not found %s\n",buf);
X  continue;
X  foundit:
X
X  macro=(int *)malloc(sizeof(int)*2);
X  macro[0]=0;
X  macro[1]=y;
X  macrox=2;
X  macrosize=2;
X  buf[x]=macroc;
X  }
X
X fn:
X if(buf[x]==',')
X  if(buf[++x]=='\"')
X   {
X   int q;
X   for(q= ++x;buf[q];++q)
X    if(buf[q]=='\"' && buf[q-1]!='\\' || buf[q]=='\n') break;
X   macroc=buf[q]; buf[q]=0;
X   if(macrox==macrosize) macro=(int *)realloc(macro,sizeof(int)*(macrosize+=2));
X   macro[macrox++]=1;
X   macro[macrox++]=(int)strdupp(buf+x);
X   buf[q]=macroc;
X   if(macroc=='\"') x=q+1;
X   else x=q;
X   goto fn;
X   }
X  else
X   {
X   int q;
X   for(q=x;buf[q];++q) if(buf[q]=='\t' || buf[q]==' ' || buf[q]==',') break;
X   macroc=buf[q]; buf[q]=0;
X   for(y=0;y!=context->size;++y)
X    if(!strcmp(context->cmd[y].name,buf+x)) goto ff;
X   printf("Key function not found %s\n",buf+x);
X   free(macro);
X   continue;
X   ff:
X   if(macrox==macrosize) macro=(int *)realloc(macro,sizeof(int)*(macrosize+=2));
X   macro[macrox++]=0;
X   macro[macrox++]=y;
X   buf[q]=macroc; x=q;
X   goto fn;
X   }
X
X if(macrox==macrosize) macro=(int *)realloc(macro,sizeof(int)*(++macrosize));
X macro[macrox]= -1;
X 
X kmap=0;
X n= -1;
X for(;buf[x];x++) if(buf[x]!=' ' && buf[x]!='\t') break;
X while(1)
X  {
X  int c;
X  if(buf[x]==' ') x++;
X  if(!buf[x]) break;
X  if(buf[x]=='\n' || buf[x]==' ' || buf[x]=='\t') break;
X  /* Got Next key */
X  x++;
X  if(buf[x-1]=='^')
X   if(buf[x]==' ' || buf[x]=='\t' || buf[x]=='\n' || !buf[x]) c='^';
X   else if(buf[x]=='?') c=127, x++;
X   else c=(buf[x]&0x1f), x++;
X  else if((buf[x-1]&0x5f)=='S' && (buf[x]&0x5f)=='P') c=' ', x++;
X  else c=buf[x-1];
X  /* Add it as if it were a submap */
X  if(!kmap)
X   {
X   if(!(kmap=context->kmap))
X    {
X    kmap=(KMAP *)malloc(sizeof(KMAP));
X    kmap->keys=(KEY *)malloc(4*sizeof(KEY));
X    kmap->size=4;
X    kmap->len=0;
X    context->kmap=kmap;
X    }
X   }
X  else
X   if(kmap->keys[n].k&KEYSUB) kmap=(KMAP *)(kmap->keys[n].n);
X   else
X    {
X    kmap->keys[n].n=(int *)malloc(sizeof(KMAP));
X    kmap->keys[n].k|=KEYSUB;
X    kmap=(KMAP *)(kmap->keys[n].n);
X    kmap->keys=(KEY *)malloc(4*sizeof(KEY));
X    kmap->len=0;
X    kmap->size=4;
X    }
X  for(n=0;n!=kmap->len;n++)
X   if((kmap->keys[n].k&KEYMASK)==c) goto sub;
X   else if((kmap->keys[n].k&KEYMASK)>c) break;
X  if(kmap->len==kmap->size)
X   kmap->keys=(KEY *)realloc(kmap->keys,sizeof(KEY)*(kmap->size+=8));
X  for(z=kmap->len;z!=n;z--) kmap->keys[z]=kmap->keys[z-1];
X  kmap->len++;
X  kmap->keys[n].k=c;
X  kmap->keys[n].n=macro;
X  sub:;
X  }
X }
Xfclose(fd);
Xprintf("done\n");
Xreturn 0;
X}
X
Xint main(argc,argv)
Xunsigned char *argv[];
X{
Xif(process(KEYMAP,&km))
X {
X unsigned char *hh=(unsigned char *)getenv("HOME");
X if(!hh) goto in;
X strcpy(gfnam,hh);
X strcat(gfnam,"/");
X strcat(gfnam,KEYMAP);
X if(process(gfnam,&km))
X  {
X  in:
X  if(process(KEYDEF,&km))
X   {
X   printf("Couldn't open keymap\n");
X   return 1;
X   }
X  }
X }
Xcurmap=km.kmap;
Xif(argc>2)
X {
X fputs("\nIllegal number of command line arguments",stderr);
X fputs("\nEditor Command Format:  joe [filename]\n",stderr);
X return 0;
X }
Xtermtype();
Xcurwin=(struct window *)malloc(sizeof(struct window));
Xtopwin=curwin;
Xcurwin->next=curwin;
Xcurwin->prev=curwin;
Xmarkbuf=0;
Xcurwin->height=height;
Xcurwin->wind=0;
Xcurwin->buffer=(struct buffer *)malloc(sizeof(struct buffer));
Xcurbuf=curwin->buffer;
Xcurbuf->count=1;
Xsigjoe();
Xaopen();
Xdopen();
Xfmopen();
Xbof();
Xoptions=0;
Xsstring[0]=0;
Xrstring[0]=0;
Xleave=0;
X
Xrmargin=width-4;
Xtabmagic=0;
Xwrap=1;
Xautoind=0;
Xoverwrite=0;
Xpic=0;
Xstmode("");
X
Xgfnam[0]=0;
X
Xif(argc==2)
X {
X strcpy(gfnam,argv[1]);
X stmode(gfnam);
X handle=fopen(argv[1],"r");
X if(handle)
X  {
X  if(!fminsfil(handle))
X   omsg=(unsigned char *)"\\iError reading file\\i";
X  else
X   changed=0;
X  fclose(handle);
X  }
X else
X  {
X  if(errno==ENOENT)
X   {
X   omsg=(unsigned char *)"New File";
X   backup=1;
X   }
X  else
X   omsg=(unsigned char *)"\\iError opening file\\i";
X  }
X }
Xelse omsg=(unsigned char *)"New File";
Xedit();
Xaclose();
Xsignorm();
Xreturn 0;
X}
X
Xtsignal(sig)
X{
Xunsigned char nam[PATHSIZE];
Xlong tim=time(0);
Xstruct window *orig=curwin;
Xsprintf(nam,"%s%d",ABORT,getpid());
Xhandle=fopen(nam,"a");
Xfmpoint(0);
Xfprintf(handle,"\n*** Files in JOE when it aborted on %s",ctime(&tim));
Xif(sig) fprintf(handle,"*** JOE was aborted by the signal %d\n",sig);
Xelse fprintf(handle,"*** JOE was aborted because stdin closed\n");
Xif(gfnam[0]) fprintf(handle,"*** FILE: %s\n",gfnam);
Xelse fprintf(handle,"*** FILE: (Unnamed)\n");
Xfmsave(handle,fmsize());
Xfflush(handle);
Xcurbuf->count=0;
Xdo
X {
X stwin(curwin);
X curwin=curwin->next;
X ldwin(curwin);
X if(curbuf->count)
X  {
X  fmpoint(0);
X  if(gfnam[0]) fprintf(handle,"*** FILE: %s\n",gfnam);
X  else fprintf(handle,"*** FILE: (Unnamed)\n");
X  fmsave(handle,fmsize());
X  fflush(handle);
X  curbuf->count=0;
X  }
X }
X while(curwin!=orig);
Xfclose(handle);
X_exit(1);
X}
END_OF_FILE
if test 68418 -ne `wc -c <'joe.c'`; then
    echo shar: \"'joe.c'\" unpacked with wrong size!
fi
# end of 'joe.c'
fi
if test -f 'joe.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'joe.h'\"
else
echo shar: Extracting \"'joe.h'\" \(17768 characters\)
sed "s/^X//" >'joe.h' <<'END_OF_FILE'
X/* JOE header file
X   Copyright (C) 1991 Joseph H. Allen
X
XThis file is part of JOE (Joe's Own Editor)
X
XJOE is free software; you can redistribute it and/or modify it under the terms
Xof the GNU General Public License as published by the Free Software
XFoundation; either version 1, or (at your option) any later version.  
X
XJOE is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
XA PARTICULAR PURPOSE.  See the GNU General Public License for more details.  
X
XYou should have received a copy of the GNU General Public License along with
XJOE; see the file COPYING.  If not, write to the Free Software Foundation, 675
XMass Ave, Cambridge, MA 02139, USA.  */ 
X
X/* File characteristics */
X
X#define NL '\n'			/* End of line character */
X#define TAB '\t'		/* Tab character */
X#define TABWIDTH 8		/* Tab width */
X#define NOHIGHBIT		/* Comment this out to send characters with
X				   high bit set to terminal as is.  See
X				   the function 'showas'. */
X
X/* Types used in the file buffer */
X
Xtypedef unsigned char * TXTPTR;	/* Pointer to text in the buffer */
Xtypedef unsigned TXTSIZ;	/* Integer to hold size of file */
X#define TXTFREE(a) free(a)	/* Free a buffer */
X#define TXTMALLOC(a) malloc(a)	/* Allocate a buffer */
X#define TXTREALLOC(a,b) realloc((a),(b))	/* Reallocate a buffer */
X
X/* File names and characteristics */
X
X#define PATHSIZE 256		/* Maximum path length */
X#define KEYMAP ".joerc"		/* Keymap file */
X/* #define KEYDEF "/usr/bin/.joerc"	Default keymap file */
X#define ABORT "DEADJOE"		/* Aborted file */
X
X/* The current file buffer */
X/* When you change windows, these variables get stored in the 'struct buffer'
X   associated with the old window and are load with the values in the
X   'struct buffer' for the new window */
X
Xextern TXTSIZ bufsiz;		/* Size of malloc block buffer is in */
Xextern TXTPTR point;		/* The point (cursor) */
Xextern TXTPTR buffer;		/* The buffer */
Xextern TXTPTR filend;		/* First char not in buffer */
Xextern TXTPTR hole;		/* Address of hole */
Xextern TXTPTR ehole;		/* First char not in hole */
Xextern int changed;		/* Set if buffer changed */
Xextern int backup;		/* Set if backup file has been made */
Xextern unsigned char gfnam[PATHSIZE];
X				/* Current edit file name.  "" for unnamed */
X
X#define HOLESIZE 1024		/* Amount file buffer grows by */
X
X/*******************************************************/
X/* Basic file buffer manipulation functions and macros */
X/*******************************************************/
X
Xint fminsu();		/* fminsu(size) Adjust pointers by amnt inserted */
Xint fmdelu();		/* fmdelu(size) Adjust pointers by amount deleted */ 
X/* The pointers the above two functions currently update include:
X	The pointer to start of each window which references the current
X	buffer.
X
X	The pointer to cursor in each window which reference the current
X	buffer but not the one for the current window.
X
X	The begin & end pointers to the marked block if they are in the
X	current buffer.
X*/
X
X/* Return size of hole */
X
X#define fmholesize() (ehole-hole)
X
X/* Read character at the point */
X
X#define fmrc() (point==hole?*(point=ehole):*point)
X
X/* Overtype character at the point */
X
X#define fmwc(c) (((point==hole)?point=ehole:0),((point==filend)?(fmexpand(1),\
Xfilend++):0),*point=(c),changed=1)
X
X/* Read character at point and advance point */
X
X#define fmgetc() ((point==hole)?(point=ehole+1,*ehole):*(point++))
X
X/* Overtype character at point and advance point */
X
X#define fmputc(c) (((point==hole)?point=ehole:0),((point==filend)?(fmexpand(1),\
Xfilend++):0),*(point++)=(c),changed=1)
X
X/* Insert character at point */
X
X#define fminsc(c) ( fminsu(1), \
X(point!=hole?fmhole():0), (hole==ehole?fmbig(1):0),\
X*(hole++)=(c), changed=1)
X
X/* Return the byte offset from the beginning of the buffer to the point */
X
X#define fmnote() ((point>=ehole)?(point-buffer)-(ehole-hole):point-buffer)
X
X/* Return the size of the file in the buffer */
X
X#define fmsize() ((filend-buffer)-(ehole-hole))
X
X/* Return true if the point is at the end of the file */
X
X#define fmeof() ((point==hole)?(ehole==filend):(point==filend))
X
X/* Position the point to a byte offset from the beginning of the file */
X
X#define fmpoint(x) (point=buffer+(x), (point>hole)?(point+=ehole-hole):0)
X
X/* Retreat the point and then read the character that's there */
X
X#define fmrgetc() (point==ehole?*(point=hole-1):*(--point))
X
X/* Position the point to the next NL or the end of the file.  If the point
X   is already at a NL, it is set to the next NL. Return 0 if not found, 1
X   if found */
X
X#define fmnnl() (fmeof()?0:(fmgetc(),fmfnl()))
X
X/* Set the point to the beginning of the file or the previous NL.  If the
X   point is already at a NL, it is set to the one before it.  Return 0 if
X   not found, 0 if found */
X
X#define fmnrnl() (fmnote()?(fmrgetc(),fmrnl()):0)
X
Xint fmopen();			/* fmopen() Initialize current edit buffer */
Xint fmexpand();			/* fmexpand(amount) Make buffer bigger */
Xint fmhole();			/* fmhole() Move hole to point */
Xint fmbig();			/* fmbig(size) Make hole at least size */
Xint fmfnl();			/* Find first NL.  Returns 0 if not found */
X				/* If at an NL already, point is not moved */
Xint fmrnl();			/* Find NL in reverse.  Rtns 0 if not found */
X				/* If at an NL already, point is not moved */
Xint fminss();			/* fminss(blk,size) Insert a block at point */
Xint fmcmp();			/* fmcmp(blk,size) return 0 if matching */
Xint tupp();			/* tupp(c) Convert char to uppercase */
Xint fmicmp();			/* Same as fmcmp but ignore case */
Xint fmsave();			/* fmsave(FILE,size) Save at point in file */
Xint fminsfil();			/* fminsfil(FILE) Insert file at point */
X
X/******************/
X/* Terminal stuff */
X/******************/
X
X/* Terminal characteristics (terminal must be vt100ish) */
X
Xextern int width;		/* Screen width */
Xextern int height;		/* Screen height */
Xextern int scroll;		/* Set if terminal has scrolling regions */
X
X/* Terminal state */
X
Xextern int smode;		/* Current character attributes */
Xextern int tops;		/* Scroll region top (-1 for unknown) */
Xextern int bots;		/* Scroll region bottem */
Xextern int oxpos;		/* Cursor position */
Xextern int oypos;
Xextern int *scrn;		/* Screen buffer
X					-1 means unknown character
X					0 - 255 means known character
X				*/
X
Xextern unsigned char *omsg;	/* Opening message */
Xint dopen();                        /* Open display (clear it, allocate scrn,
X				   etc.) */
Xint dclose();                       /* dclose(s) Show final message and close
X				   display */
X
Xint cposs();			/* cpos(row,col) Set cursor position */
Xint cpos();				/* cpos(row,col) Set cursor position and
X				   update ox/oypos */
Xint setregn();			/* setregn(top,bot) Set scroll region */
X
Xint attrib();			/* attrib(mask) Set attributes */
X#define INVERSE 256
X#define BLINK 512
X#define UNDERLINE 1024
X#define BOLD 2048
X
X/*****************/
X/* Screen update */
X/*****************/
X
X/* Flags which high-level edit functions set to control the screen
X   update.  All three are initialized to 0 before an edit function
X   is executed */
X
Xextern int uuu;			/* Set is no screen update needed */
Xextern int cntr;		/* Set to center cursor to middle of
X				   screen if the screen will scroll
X				   (for search/replace) */
Xextern int newy;		/* Set if row changed */
Xextern int updall;		/* Set to update all windows, not just
X				   the ones with same buffer */
X
X/* Flags which indicate the current progress of a screen update (I.E., so
X   we can continue if user interrupts screen update) */
X
Xextern int upd;			/* Set if a screen update should be done */
Xextern int hupd;		/* Set if a help update should be done */
X
Xextern int helpon;		/* Set if help screen is on */
Xextern int wind;		/* Number of help lines */
X
Xextern int xpos;		/* Requested x & y positions (as determined */
Xextern int ypos;		/* by scroll calculator: dupdate1 */
X
Xextern TXTSIZ saddr;		/* Byte offset to first char of first screen
X				   line (of current window) */
Xextern TXTSIZ xoffset;		/* Cols current window is scrolled to right */
Xextern TXTSIZ extend;		/* Column number if past end of line or in
X				   tab stop */
X
X/* Functions for doing screen update */
X
Xint clreolchk();		/* clreolchk(lin,col) Clear to end of line if needed */
Xint udline();		/* udline(lin) Update a single line.  Return true
X			   EOF reached */
Xint udscrn();		/* Update screen (returns true if it finished) */
Xint dupdate1();		/* dupdate1(flg) Recalculate cursor, scroll & update
X			   screen (sets cursor position if flg is set) */
Xint dupdatehelp();		/* Update help */
Xint dupdate();		/* Update help and screen */
Xint invalidate();		/* invalidate(lin) Invalidate a line so it gets upd. */
X
X/****************/
X/* Window Stuff */
X/****************/
X
X/* Each file that's edited has a 'struct buffer' associated with it.
X   This stores the buffer variables when the buffer is not the current
X   buffer (I.E., when the cursor is in a window for another file).
X*/
X
Xstruct buffer
X {
X int count;		/* Reference count (No. windows into this buffer) */
X TXTSIZ bufsiz;		/* Size of malloc block buffer is in */
X TXTPTR buf;		/* The buffer */
X TXTPTR filend;		/* First char not in buffer */
X TXTPTR hole;		/* Address of hole */
X TXTPTR ehole;		/* First char not in hole */
X int changed;		/* Set if buffer changed */
X int backup;		/* Set if backup file has been made */
X unsigned char gfnam[PATHSIZE];	/* Current edit file name.  "" for unnamed */
X struct undorec *undorecs;
X struct undorec *redorecs;
X int nundorecs;
X };
X
X/* Each window has a 'struct window' associated with it */
X
Xstruct window
X {
X struct window *next;	/* Doubly linked list of windows */
X struct window *prev;
X
X struct buffer *buffer;	/* The buffer this window looks at */
X
X /* Screen variables for each window */
X
X TXTSIZ saddr;		/* Byte offset to first character of first line in
X 			   window */
X TXTSIZ xoffset;	/* No. columns the screen is scrolled to the right */
X
X /* Window size */
X
X int wind;         /* Starting screen line */
X			/* wind is not the same as 'wind' the number of
X			   help lines */
X int height;       /* Height of window */
X int hheight;      /* Height before help turned on */
X
X /* Edit modes */
X
X int pic;
X int autoind;
X int overwrite;
X int wrap;
X int tabmagic;
X TXTSIZ rmargin;
X
X /* Cursor position */
X
X TXTSIZ extend;		/* Column number if cursor is past end of line or
X 			   if it's in a tab stop */
X TXTSIZ cursor;		/* Byte offset (in buffer) to the cursor */
X
X };
X
Xextern struct window *wfirst;	/* Doubly linked list of windows */
Xextern struct window *wlast;
X
Xextern struct window *curwin;	/* Current window */
Xextern struct buffer *curbuf;	/* Current buffer */
Xextern struct window *topwin;	/* First window on the screen */
X
X/* Keyboard and command table handler */
X
Xtypedef struct key KEY;
Xstruct key
X {
X int k;                 /* Key value */
X int *n;                /* Command number or submap address */
X };
X
Xtypedef struct kmap KMAP;
Xstruct kmap
X {
X int len;          /* Number of KEY entries */
X int size;         /* Size of malloc block */
X KEY *keys;             /* KEYs.  Sorted. */
X };
X
X/* Masks & bits for k */
X
X#define KEYMASK 0x7fff
X#define KEYSUB 0x8000	/* Set for submap */
X
X/* A command entry */
X
Xtypedef struct cmd CMD;
Xstruct cmd
X {
X char *name;
X int flag;
X int (*func)();
X };
X
X/* A context (group of related commands) */
X
Xtypedef struct context CONTEXT;
Xstruct context
X {
X CONTEXT *next;		/* List of all contexts */
X char *name;		/* Name of this context */
X KMAP *kmap;		/* Top level keymap for this context */
X int size;		/* Number of entries in this context */
X CMD *cmd;		/* The entries themselves (sorted) */
X };
X
Xint dokey();		/* dokey(c) Execute next key */
Xextern int quoteflg;	/* Set if next key is quoted */
Xextern int quote8th;	/* Set if next key is quoted */
X
X/* dokey() Return values */
X
X#define Kaccept -1	/* Key accepted but not executed */
X#define Kbad -2		/* Bad key */
X/* dokey() used to return a function number; now it executes the function
X   itself so the return values are meaningless */
X
X/* Messages and queries */
X
X/* These are all hacks because they return/check for exact key values
X   and don't know about the key table.  Someday a key 'context' should
X   be added for these
X*/
X
Xint getl();		/* getl(prompt,line) Get a line of input */
X			/* Returns: -1 if user hits ^L
X				     1 if user hits \n or \r
X				     0 if user hits ^C
X			    (yes this is a stupid hack)
X			*/
X
Xint msg();			/* msg(s) Show a message until user hits a key */
X
Xint askyn();		/* askyn(s) Yes/No question 
X			Returns: 'Y', 'N' or -1 for ^C */
X
Xint query();		/* query(s) Show message, wait for user to hit a key,
X			   then return key. */
X
Xint nquery();		/* nquery(s) Same as query but leave cursor on
X			   edit screen */
Xint imsg();                 /* imsg() Show opening message */
X
X/*******************************************/
X/* High-level edit functions and variables */
X/*******************************************/
X
X/* Edit modes */
X
Xextern int pic;			/* Set for picture mode */
Xextern int autoind;		/* Set for autoindent */
Xextern int overwrite;		/* Set for overwrite */
Xextern int wrap;		/* Set for autowrap */
Xextern int tabmagic;		/* Set for magical tabs */
Xextern TXTSIZ rmargin;		/* Current right margin */
X
X/****************************/
X/* Search and replace stuff */
X/****************************/
X
X/* Search & replace options */
X
X#define s_ignore 1		/* Ignore case */
X#define s_backwards 2		/* Search backwards */
X#define s_replace 4		/* Replace */
X#define s_regex 8		/* Regular expression search */
X
Xextern int options;		/* Search options */
Xextern unsigned char sstring[PATHSIZE];	/* Search string */
Xextern unsigned char rstring[PATHSIZE];	/* Replace string */
Xextern int len;			/* Length of search string */
X
X/**********/
X/* Blocks */
X/**********/
X
Xextern TXTSIZ markb;		/* Begining of block */
Xextern TXTSIZ marke;		/* End of block */
Xextern struct buffer *markbuf;	/* Buffer block is in or 0 for no block */
X
X/**************************************/
X/* High level edit function utilities */
X/**************************************/
X
Xextern int leave;		/* Edit function sets this to leave the editor
X				   after the function returns */
X
Xint dnarw();			/* Move cursor to next line */
X				/* Column number is preserved */
XTXTSIZ calcs();			/* Calculate number of whitespace columns
X				   at beginning of line.  Cursor is left
X				   at first non-whitespace character */
Xint saveit1();			/* saveit1(s) Save buffer in file & clear
X				   changed */
Xint itype();
Xint ltarw();			/* Move cursor left (goes to end of previous
X				   line if at beginning of line) */
Xint uparw();			/* Move cursor up (preserves column) */
Xint rtarw();                        /* Move cursor right (goes to beginning of
X				   next line if at end of line) */
X
X/* Return current column number of cursor */
X
X#define getcol() (extend?extend:getrcol())
X
XTXTSIZ getrcol();		/* Get column number of point */
Xint gocol();			/* gocol(col) Set cursor (point/extend) to
X				   column number */
Xint unfill();			/* Remove trailing spaces from line */
Xint fillup();                       /* Fill to extend position (use this only
X				   if extend if past end of line, not for
X				   if extend is in tab stop) */
X
Xint search();			/* Execute a search.  Returns 1 if found,
X				   0 if not */
X
X/* Window functions */
X
Xint ldwin();			/* ldwin(window) load window */
Xint stwin();			/* stwin(window) save window */
Xint ldbuf();			/* ldbuf(buf) load buf if it's not already */
Xint ldbuf1();			/* ldbuf1(buf) load buf always */
Xint stbuf();			/* stbuf(buf) store buffer */
Xint wfit();			/* make sure the current window is on screen */
X
X/* High Level (user) edit functions */
X
Xint wnext();			/* goto next window */
Xint wprev();			/* goto previous window */
Xint wexplode();			/* show 1 or all windows */
Xint wgrow();			/* make window bigger */
Xint wshrink();			/* make window smaller */
Xint wedit();			/* edit a new file */
Xint wsplit();			/* Split window into 2 */
X
Xint rewrite();			/* Rewrite screen */
Xint thelp();			/* Toggle help screen */
Xint bof();			/* Goto beginning of file */
Xint eof();			/* Goto end of file */
Xint bol();			/* Goto beginning of line */
Xint eol();				/* Goto end of line */
Xint urtarw();			/* Move cursor right (scroll if need to) */
Xint ultarw();
Xint uuparw();
Xint udnarw();
Xint delch();			/* Delete character */
Xint type();				/* type(c) type a character */
Xint inss();				/* insert a space */
Xint backs();			/* backspace */
Xint eexit();			/* Exit & abort */
Xint pgup();				/* 1/2 Page up */
Xint pgdn();				/* 1/2 Page down */
Xint deleol();			/* Erase end of line */
Xint dellin();			/* Erase entire line */
Xint exsave();			/* Save and exit */
Xint saveit();			/* Save current file */
Xint findline();			/* Goto line No. */
Xint findfirst();			/* Find some text */
Xint findnext();			/* Find next occurance */
Xint setbeg();			/* Set beginning of block */
Xint setend();			/* Set end of block */
Xint writeblk();			/* Write block to file */
Xint moveblk();			/* Move block to point */
Xint cpyblk();			/* Copy block to point */
Xint delblk();			/* Delete block */
Xint insfil();			/* Insert a file */
Xint push();				/* Execute a shell */
Xint mode();				/* Change edit mode */
Xint ctrlin();			/* Center current line */
Xint reformat();			/* Reformat current paragraph */
Xint killword();			/* Delete word */
Xint backword();			/* Delete word to the left */
Xint wrdl();				/* goto previous word */
Xint wrdr();				/* goto next word */
Xint macrob();
Xint macroe();
Xint macrodo();
Xint edit();				/* Main edit loop */
Xint waite();
Xint macroadd();
Xextern FILE *handle;		/* File handle used for many various things */
Xextern TXTSIZ added;		/* Number of chars autoindent added
X				(obsolete?) */
X
X/* Portable strdup() */
X
X#define strdupp(x) ((unsigned char *)strcpy((unsigned char *)malloc(strlen(x)+1),(x)))
END_OF_FILE
if test 17768 -ne `wc -c <'joe.h'`; then
    echo shar: \"'joe.h'\" unpacked with wrong size!
fi
# end of 'joe.h'
fi
if test -f '.joerc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'.joerc'\"
else
echo shar: Extracting \"'.joerc'\" \(7749 characters\)
sed "s/^X//" >'.joerc' <<'END_OF_FILE'
X                          Initializtaion file for JOE
X
X JOE looks for this file in:
X        1 - Current directory
X        2 - User's home directory
X        3 - /usr/bin  (or whatever KEYDEF was set to in the Makefile)
X 
X Comments:
X   Any line beginning with whitespace is a comment line.  At least 2
X   characters of whitespace past the end of a line also begin a comment.
X
X FIRST SECTION:  File name dependant mode settings
X
X Each line with '*' in the first column indicates the modes which should be
X set for a particular extension (or ending actually).  If there are more than
X one of these lines which match a particular file name, then the last line
X which matches the name is the one which is chosen.
X
X Here is a list of characters.  Each sets a particular mode.  If the character
X is missing, then the mode shown in the parenthasis is set.
X
X		a	autoindent (no auto indent)
X		o	overwrite  (insert)
X		p	picture mode (no picture mode)
X		w	word wrap (no word wrap)
X		t	tab magic (no tab magic)
X		nnn	right margin (default is 76)
X
X Here are the file name dependant mode setting lines:
X
X*		wt76		Default for unknown extensions.  This line
X				must appear first.
X*.c		at76		C programs
X*.h		at76		C header files
X*.p		at76		Pascal programs
X*.f		at76		Fortran programs
X*.joerc		at76		This file
X
X SECOND SECTION:  Lines between the { and the } are the on-line help text.  Use
X \u to turn underline on or off.  Use \i to turn inverse on or off.  Use \\
X to display \
X
X{
X\i   Help Screen    turn off with ^KH                                            \i
X\i \i\uGO\u \uTO\u              \uDELETE\u    \uMISC\u      \uBLOCK\u    \uFIND\u     \uQUOTE\u    \uWINDOW\u     \i \i
X\i \i^B left  ^F right ^D single ^T  mode   ^KB mark ^KF text `  Ctrl  ^KO split  \i \i
X\i \i^Z word  ^X word  ^W >word  ^R  retype ^KK end  ^L  next ^\\ bit-7 ^KI 1 / all\i \i
X\i \i^A edge  ^E edge  ^O word<  ^KA center ^KC copy ^KL line \uFILE\u     ^KP up     \i \i
X\i \i^P up    ^N down  ^J >line  ^KJ format ^KM move \uEXIT\u     ^KD save ^KN down   \i \i
X\i \i^U page  ^V page  ^Y line   ^KZ shell  ^KW save ^KX save ^KR read ^KG grow   \i \i
X\i \i^KU top ^KV end   ^K- undo  ^K, indnt< ^KY kill ^C abort/         ^KT shrink \i \i
X\i \i^G matching ([<{` ^K+ redo  ^K. indnt> ^K0 subst   close window  ^KE get file\i \i
X\i \i\uMACROS\u: ^K[ record ^K] stop ^K/ play ^K= repeat                              \i \i
X}
X
X THIRD SECTION:  Key sequence to command bindings.  Use ^@ to ^_ and ^? to
X specify control characters.  Use 'sp' specify the space character.
X
X A simple macro facility is provided:  commands separated by commas (no
X whitespace) are executed sequentially.  For example:
X 
X bof,eol	^K 5			Goto end of first line
X
X Also, a quoted string may be placed in the command list to supply keyboard
X input.  Inside the string: \\=\, \"=", and \r=return.  For example:
X 
X "\r",saveit,wsplit,"m.out\r",wedit,setbeg,setend,"make\r",cmdblk	^K 2
X
X Will save the file in the current window, make a new window, run "make" in a
X shell and place the results in the new window when ^K 2 is pressed.
X
X Note how the quoted strings appear before the commands which require them.  A
X special command 'wait' types any previous string in as if from the keyboard.
X
X For example:  "Hello\r",wait		^K 7
X Types "Hello" into the edit buffer when ^K 7 is pressed.
X
X:main
Xbacks		^H			Backspace
Xbacks		^?
Xbackword	^O			Backspace word
Xbof		^K U			Move cursor to beginning of file
Xbof		^K ^U
Xbof		^K u
Xbol		^A			Move cursor to beginning of line
Xbol		^[ [ H
Xbol		^K ^[ [ H
Xbol		^[ O P
Xbol		^K ^[ O P
Xcmdblk		^K 0			Pipe a marked block through a command
Xcpyblk		^K C			Copy previously marked block
Xcpyblk		^K ^C
Xcpyblk		^K c
Xctrlin		^K A			Center line
Xctrlin		^K ^A
Xctrlin		^K a
Xdelblk		^K Y			Delete previously marked block
Xdelblk		^K ^Y
Xdelblk		^K y
Xdelch		^D			Delete character
X deleol		^J			Delete to end of line
Xdellin		^Y			Delete entire line
Xdnarw		^N			Move cursor down
Xdnarw		^[ [ B
Xdnarw		^[ O B
Xdnarw		^K ^[ [ B
Xdnarw		^K ^[ O B
Xeexit		^C			Exit (window/file)
Xeexit		^K Q
Xeexit		^K q
Xeof		^K V			Move cursor to end of file
Xeof		^K ^V
Xeof		^K v
Xeol		^E			Move cursor to end of line
Xeol		^[ [ F
Xeol		^K ^[ [ F
Xeol		^[ O S
Xeol		^K ^[ O S
Xexsave		^K X			Save & exit
Xexsave		^K ^X
Xexsave		^K x
Xfindfirst	^K F			Find text
Xfindfirst	^K ^F
Xfindfirst	^K f
Xfindnext	^L			Find next
Xfindline	^K L			Goto line number
Xfindline	^K ^L
Xfindline	^K l
Xgotomatching	^G
Xindentl		^K ,			Indent left
Xindentr		^K .			Indent right
Xinsfil		^K R			Insert a file
Xinsfil		^K ^R
Xinsfil		^K r
X inss		^G			Insert a space
Xinss		^[ [ L
Xinss		^K ^[ [ L
Xkilllin		^J			Emacs-style kill line
Xkillword	^W			Delete word under cursor
Xltarw		^B			Move cursor left
Xltarw		^[ [ D
Xltarw		^K ^[ [ D
Xltarw		^[ O D
Xltarw		^K ^[ O D
Xmacrob		^K [
Xmacroe		^K ]
Xmacrodo		^K /
Xmode		^T			Change mode
X ooverwrite				Overwrite mode off
X owrap					Word wrap off
X otabmagic				Tab magic off
X oautoind				Auto-indent off
X opic					Picture mode off
X ioverwrite				Overwrite on/off
X iwrap					Word wrap on/off
X itabmagic				Tab Magic on/off
X iautoind				Auto-indent on/off
X ipic					Picture mode on/off
X setrmargin				Set right margin
Xmoveblk		^K M			Move previously marked block
Xmoveblk		^K ^M
Xmoveblk		^K m
Xpgdn		^V			Move cursor 1/2 page down
Xpgdn		^[ [ G
Xpgdn		^K ^[ [ G
Xpgdn		^[ [ 6 ~
Xpgdn		^K ^[ [ 6 ~
Xpgup		^U			Move cursor 1/2 page up
Xpgup		^[ [ I
Xpgup		^K ^[ [ I
Xpgup		^[ [ 5 ~
Xpgup		^K ^[ [ 5 ~
X push		^K Z			Push to a shell
X push		^K ^Z
X push		^K z
Xsuspend		^K Z			Suspend the editor or push to a shell
Xsuspend		^K ^Z			if system doesn't have job control
Xsuspend		^K z
Xredo		^K +			Redo
Xreformat	^K J			Reformat paragraph
Xreformat	^K ^J
Xreformat	^K j
Xrepeat		^K =			Repeat
Xrewrite		^R			Retype screen
Xrtarw		^F			Move cursor right
Xrtarw		^[ [ C
Xrtarw		^K ^[ [ C
Xrtarw		^[ O C
Xrtarw		^K ^[ O C
Xrtn		^M			The return key
Xsaveit		^K D			Save file
Xsaveit		^K ^D
Xsaveit		^K d
Xsaveit		^K S
Xsaveit		^K s
Xsetbeg		^K B			Set beginning of block
Xsetbeg		^K ^B
Xsetbeg		^K b
Xsetend		^K K			Set end of block
Xsetend		^K ^K
Xsetend		^K k
Xstquote		`			Next character is a control character
Xstquote8th	^\			Next character has 7th bit set
Xthelp		^K H			Toggle help text on/off
Xthelp		^K ^H
Xthelp		^K h
Xthelp		^[ [ 2 8 ~
Xthelp		^K ^[ [ 2 8 ~
Xundo		^K -			Undelete
Xuparw		^P			Move cursor up
Xuparw		^[ [ A
Xuparw		^K ^[ [ A
Xuparw		^[ O A
Xuparw		^K ^[ O A
Xwedit		^K E			Edit another file
Xwedit		^K ^E
Xwedit		^K e
Xwexplode	^K I			Show 1 or all windows
Xwexplode	^K ^I
Xwexplode	^K i
Xwgrow		^K G			Grow window
Xwgrow		^K ^G
Xwgrow		^K g
Xwnext		^K N			Goto next window
Xwnext		^K ^N
Xwnext		^K n
Xwprev		^K P			Goto previous window
Xwprev		^K ^P
Xwprev		^K p
Xwrdl		^Z			Move to previous word
Xwrdl		^[ O Q
Xwrdl		^K ^[ O Q
Xwrdr		^X			Move to next word
Xwrdr		^[ O R
Xwrdr		^K ^[ O R
Xwriteblk	^K W			Write previously marked block to a file
Xwriteblk	^K ^W
Xwriteblk	^K w
Xwshrink		^K T			Shrink window
Xwshrink		^K ^T
Xwshrink		^K t
Xwsplit		^K O			Split window
Xwsplit		^K ^O
Xwsplit		^K o
Xtype		^I			Tab
Xtype		sp			Typable characters
Xtype		!
Xtype		"
Xtype		#       
Xtype		$
Xtype		%
Xtype		&
Xtype		'
Xtype		(
Xtype		)
Xtype		*
Xtype		+
Xtype		,
Xtype		-
Xtype		.
Xtype		/
Xtype		0
Xtype		1
Xtype		2
Xtype		3
Xtype		4
Xtype		5
Xtype		6
Xtype		7
Xtype		8
Xtype		9
Xtype		:
Xtype		;
Xtype		<
Xtype		=
Xtype		>
Xtype		?
Xtype		@
Xtype		A
Xtype		B
Xtype		C
Xtype		D
Xtype		E
Xtype		F
Xtype		G
Xtype		H
Xtype		I
Xtype		J
Xtype		K
Xtype		L
Xtype		M
Xtype		N
Xtype		O
Xtype		P
Xtype		Q
Xtype		R
Xtype		S
Xtype		T
Xtype		U
Xtype		V
Xtype		W
Xtype		X
Xtype		Y
Xtype		Z
Xtype		[
Xtype		\
Xtype		]
Xtype		^
Xtype		_
Xtype		a
Xtype		b
Xtype		c
Xtype		d
Xtype		e
Xtype		f
Xtype		g
Xtype		h
Xtype		i
Xtype		j
Xtype		k
Xtype		l
Xtype		m
Xtype		n
Xtype		o
Xtype		p
Xtype		q
Xtype		r
Xtype		s
Xtype		t
Xtype		u
Xtype		v
Xtype		w
Xtype		x
Xtype		y
Xtype		z
Xtype		{
Xtype		|
Xtype		}
Xtype		~
END_OF_FILE
if test 7749 -ne `wc -c <'.joerc'`; then
    echo shar: \"'.joerc'\" unpacked with wrong size!
fi
# end of '.joerc'
fi
echo shar: End of shell archive.
exit 0
